
gbw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  080086e0  080086e0  000186e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  000206c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  000206c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  0800a4e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200006c4  0800aba4  000206c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c98  0800aba4  00020c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000858a  00000000  00000000  00020737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf5  00000000  00000000  00028cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000688  00000000  00000000  0002b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b8d  00000000  00000000  0002b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bca2  00000000  00000000  00042365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008723f  00000000  00000000  0004e007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003504  00000000  00000000  000d5248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d874c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200006c4 	.word	0x200006c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086c8 	.word	0x080086c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200006c8 	.word	0x200006c8
 80001dc:	080086c8 	.word	0x080086c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <OLED_WR_Byte>:
uint8_t OLED_GRAM[LCD_SIZE_WIDTH+16][LCD_SIZE_PAGES];

//发送一个字节
//mode:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(uint8_t dat, uint8_t mode)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
			uint8_t data;
		} SSD1306IIC;
		uint8_t sendbyte[2];
	} sendbyte;

	sendbyte.SSD1306IIC.mode = mode;
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	733b      	strb	r3, [r7, #12]
	sendbyte.SSD1306IIC.data = dat;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, sendbyte.sendbyte, sizeof(sendbyte), 10);
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	230a      	movs	r3, #10
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	2178      	movs	r1, #120	; 0x78
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <OLED_WR_Byte+0x34>)
 8000f7a:	f001 fd49 	bl	8002a10 <HAL_I2C_Master_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000924 	.word	0x20000924

08000f8c <OLED_ColorTurn>:

// 反色显示
void OLED_ColorTurn(uint8_t i)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	if (i == 0)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <OLED_ColorTurn+0x18>
	{
		OLED_WR_Byte(0xA6, OLED_CMD);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	20a6      	movs	r0, #166	; 0xa6
 8000fa0:	f7ff ffd8 	bl	8000f54 <OLED_WR_Byte>
	}
	if (i == 1)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d103      	bne.n	8000fb2 <OLED_ColorTurn+0x26>
	{
		OLED_WR_Byte(0xA7, OLED_CMD);
 8000faa:	2100      	movs	r1, #0
 8000fac:	20a7      	movs	r0, #167	; 0xa7
 8000fae:	f7ff ffd1 	bl	8000f54 <OLED_WR_Byte>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <OLED_SetBrightness>:

void OLED_SetBrightness(uint8_t brightness)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
			uint8_t data[2];
		} SSD1306IIC;
		uint8_t sendbyte[3];
	} sendbyte;

	sendbyte.SSD1306IIC.mode = OLED_ADDR;
 8000fc6:	2378      	movs	r3, #120	; 0x78
 8000fc8:	733b      	strb	r3, [r7, #12]
	sendbyte.SSD1306IIC.data[0] = 0x81; /*contract control*/
 8000fca:	2381      	movs	r3, #129	; 0x81
 8000fcc:	737b      	strb	r3, [r7, #13]
	sendbyte.SSD1306IIC.data[1] = brightness;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, sendbyte.sendbyte, sizeof(sendbyte), 10);
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2303      	movs	r3, #3
 8000fdc:	2178      	movs	r1, #120	; 0x78
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <OLED_SetBrightness+0x30>)
 8000fe0:	f001 fd16 	bl	8002a10 <HAL_I2C_Master_Transmit>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000924 	.word	0x20000924

08000ff0 <OLED_DisplayTurn>:

//屏幕旋转180度
void OLED_DisplayTurn(uint8_t i)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	if (i == 0)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d107      	bne.n	8001010 <OLED_DisplayTurn+0x20>
	{
		OLED_WR_Byte(0xC8, OLED_CMD); //正常显示
 8001000:	2100      	movs	r1, #0
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f7ff ffa6 	bl	8000f54 <OLED_WR_Byte>
		OLED_WR_Byte(0xA1, OLED_CMD);
 8001008:	2100      	movs	r1, #0
 800100a:	20a1      	movs	r0, #161	; 0xa1
 800100c:	f7ff ffa2 	bl	8000f54 <OLED_WR_Byte>
	}
	if (i == 1)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d107      	bne.n	8001026 <OLED_DisplayTurn+0x36>
	{
		OLED_WR_Byte(0xC0, OLED_CMD); //反转显示
 8001016:	2100      	movs	r1, #0
 8001018:	20c0      	movs	r0, #192	; 0xc0
 800101a:	f7ff ff9b 	bl	8000f54 <OLED_WR_Byte>
		OLED_WR_Byte(0xA0, OLED_CMD);
 800101e:	2100      	movs	r1, #0
 8001020:	20a0      	movs	r0, #160	; 0xa0
 8001022:	f7ff ff97 	bl	8000f54 <OLED_WR_Byte>
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <OLED_Refresh>:
	OLED_WR_Byte(0xAE, OLED_CMD); //关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0a6      	sub	sp, #152	; 0x98
 8001034:	af04      	add	r7, sp, #16
	uint8_t data[128];
	HAL_StatusTypeDef status;
	uint8_t i, n;
	for (i = 0; i < 4; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800103c:	e046      	b.n	80010cc <OLED_Refresh+0x9c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); //设置行起始地址
 800103e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001042:	3b50      	subs	r3, #80	; 0x50
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff83 	bl	8000f54 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  //设置低列起始地址
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff7f 	bl	8000f54 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  //设置高列起始地址
 8001056:	2100      	movs	r1, #0
 8001058:	2010      	movs	r0, #16
 800105a:	f7ff ff7b 	bl	8000f54 <OLED_WR_Byte>

		for (n = 0; n < 128; n++)
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001064:	e013      	b.n	800108e <OLED_Refresh+0x5e>
		{
			data[n] = OLED_GRAM[n][i];
 8001066:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800106a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800106e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <OLED_Refresh+0xb0>)
 8001074:	0089      	lsls	r1, r1, #2
 8001076:	4401      	add	r1, r0
 8001078:	440a      	add	r2, r1
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	3388      	adds	r3, #136	; 0x88
 800107e:	443b      	add	r3, r7
 8001080:	f803 2c84 	strb.w	r2, [r3, #-132]
		for (n = 0; n < 128; n++)
 8001084:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001088:	3301      	adds	r3, #1
 800108a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800108e:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 8001092:	2b00      	cmp	r3, #0
 8001094:	dae7      	bge.n	8001066 <OLED_Refresh+0x36>
		}

		status = HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, 1, (uint8_t *)data, sizeof(data), 50);
 8001096:	2332      	movs	r3, #50	; 0x32
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	2178      	movs	r1, #120	; 0x78
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <OLED_Refresh+0xb4>)
 80010aa:	f001 fdaf 	bl	8002c0c <HAL_I2C_Mem_Write>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if (status == HAL_BUSY)
 80010b4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d102      	bne.n	80010c2 <OLED_Refresh+0x92>
		{
			// I2C BUSY
			HAL_I2C_Init(&hi2c1);
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <OLED_Refresh+0xb4>)
 80010be:	f001 fb63 	bl	8002788 <HAL_I2C_Init>
	for (i = 0; i < 4; i++)
 80010c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c6:	3301      	adds	r3, #1
 80010c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80010cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d9b4      	bls.n	800103e <OLED_Refresh+0xe>
		{
			// I2C ERROR
			//LED_Blink(30, 500);
		}
	}
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3788      	adds	r7, #136	; 0x88
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200006e0 	.word	0x200006e0
 80010e4:	20000924 	.word	0x20000924

080010e8 <OLED_Clear>:
//清屏函数
void OLED_Clear(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 4; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e014      	b.n	800111e <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	71bb      	strb	r3, [r7, #6]
 80010f8:	e00a      	b.n	8001110 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; //清除所有数据
 80010fa:	79ba      	ldrb	r2, [r7, #6]
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <OLED_Clear+0x48>)
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	440a      	add	r2, r1
 8001104:	4413      	add	r3, r2
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	3301      	adds	r3, #1
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	daf0      	bge.n	80010fa <OLED_Clear+0x12>
	for (i = 0; i < 4; i++)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	3301      	adds	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d9e7      	bls.n	80010f4 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); //更新显示
 8001124:	f7ff ff84 	bl	8001030 <OLED_Refresh>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200006e0 	.word	0x200006e0

08001134 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	460b      	mov	r3, r1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	4613      	mov	r3, r2
 8001144:	717b      	strb	r3, [r7, #5]
	uint8_t i, m, n;
	i = y / 8;
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	2201      	movs	r2, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	737b      	strb	r3, [r7, #13]
	if (t)
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d012      	beq.n	800118a <OLED_DrawPoint+0x56>
	{
		OLED_GRAM[x][i] |= n;
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4925      	ldr	r1, [pc, #148]	; (8001200 <OLED_DrawPoint+0xcc>)
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	440a      	add	r2, r1
 800116e:	4413      	add	r3, r2
 8001170:	7818      	ldrb	r0, [r3, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	7b79      	ldrb	r1, [r7, #13]
 8001178:	4301      	orrs	r1, r0
 800117a:	b2c8      	uxtb	r0, r1
 800117c:	4920      	ldr	r1, [pc, #128]	; (8001200 <OLED_DrawPoint+0xcc>)
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	440a      	add	r2, r1
 8001182:	4413      	add	r3, r2
 8001184:	4602      	mov	r2, r0
 8001186:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
		OLED_GRAM[x][i] |= n;
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
	}
}
 8001188:	e033      	b.n	80011f2 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	491c      	ldr	r1, [pc, #112]	; (8001200 <OLED_DrawPoint+0xcc>)
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	440a      	add	r2, r1
 8001194:	4413      	add	r3, r2
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	43c9      	mvns	r1, r1
 800119e:	b2c8      	uxtb	r0, r1
 80011a0:	4917      	ldr	r1, [pc, #92]	; (8001200 <OLED_DrawPoint+0xcc>)
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	440a      	add	r2, r1
 80011a6:	4413      	add	r3, r2
 80011a8:	4602      	mov	r2, r0
 80011aa:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] |= n;
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4913      	ldr	r1, [pc, #76]	; (8001200 <OLED_DrawPoint+0xcc>)
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	440a      	add	r2, r1
 80011b6:	4413      	add	r3, r2
 80011b8:	7818      	ldrb	r0, [r3, #0]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	7b79      	ldrb	r1, [r7, #13]
 80011c0:	4301      	orrs	r1, r0
 80011c2:	b2c8      	uxtb	r0, r1
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <OLED_DrawPoint+0xcc>)
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	440a      	add	r2, r1
 80011ca:	4413      	add	r3, r2
 80011cc:	4602      	mov	r2, r0
 80011ce:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <OLED_DrawPoint+0xcc>)
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	440a      	add	r2, r1
 80011da:	4413      	add	r3, r2
 80011dc:	7819      	ldrb	r1, [r3, #0]
 80011de:	79fa      	ldrb	r2, [r7, #7]
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	43c9      	mvns	r1, r1
 80011e4:	b2c8      	uxtb	r0, r1
 80011e6:	4906      	ldr	r1, [pc, #24]	; (8001200 <OLED_DrawPoint+0xcc>)
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	440a      	add	r2, r1
 80011ec:	4413      	add	r3, r2
 80011ee:	4602      	mov	r2, r0
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200006e0 	.word	0x200006e0

08001204 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:选择字体 6x8/6x12/8x16/12x24
//mode:0,反色显示;1,正常显示
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1, uint8_t mode)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4604      	mov	r4, r0
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	461a      	mov	r2, r3
 8001212:	4623      	mov	r3, r4
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	4603      	mov	r3, r0
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	460b      	mov	r3, r1
 800121c:	717b      	strb	r3, [r7, #5]
 800121e:	4613      	mov	r3, r2
 8001220:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t x0 = x, y0 = y;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	72bb      	strb	r3, [r7, #10]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	72fb      	strb	r3, [r7, #11]
	if (size1 == 8)
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d102      	bne.n	8001236 <OLED_ShowChar+0x32>
		size2 = 6;
 8001230:	2306      	movs	r3, #6
 8001232:	733b      	strb	r3, [r7, #12]
 8001234:	e014      	b.n	8001260 <OLED_ShowChar+0x5c>
	else
		size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); //得到字体一个字符对应点阵集所占的字节数
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	793b      	ldrb	r3, [r7, #4]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	085b      	lsrs	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	fb12 f303 	smulbb	r3, r2, r3
 800125e:	733b      	strb	r3, [r7, #12]
	chr1 = chr - ' ';											   //计算偏移后的值
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	3b20      	subs	r3, #32
 8001264:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < size2; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e078      	b.n	800135e <OLED_ShowChar+0x15a>
	{
		if (size1 == 8)
 800126c:	793b      	ldrb	r3, [r7, #4]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d10b      	bne.n	800128a <OLED_ShowChar+0x86>
		{
			temp = asc2_0806[chr1][i];
 8001272:	7a7a      	ldrb	r2, [r7, #9]
 8001274:	7bf9      	ldrb	r1, [r7, #15]
 8001276:	483e      	ldr	r0, [pc, #248]	; (8001370 <OLED_ShowChar+0x16c>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4403      	add	r3, r0
 8001282:	440b      	add	r3, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	737b      	strb	r3, [r7, #13]
 8001288:	e028      	b.n	80012dc <OLED_ShowChar+0xd8>
		} //调用0806字体
		else if (size1 == 12)
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	d10b      	bne.n	80012a8 <OLED_ShowChar+0xa4>
		{
			temp = asc2_1206[chr1][i];
 8001290:	7a7a      	ldrb	r2, [r7, #9]
 8001292:	7bf9      	ldrb	r1, [r7, #15]
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <OLED_ShowChar+0x170>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4403      	add	r3, r0
 80012a0:	440b      	add	r3, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	737b      	strb	r3, [r7, #13]
 80012a6:	e019      	b.n	80012dc <OLED_ShowChar+0xd8>
		} //调用1206字体
		else if (size1 == 16)
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d108      	bne.n	80012c0 <OLED_ShowChar+0xbc>
		{
			temp = asc2_1608[chr1][i];
 80012ae:	7a7a      	ldrb	r2, [r7, #9]
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	4931      	ldr	r1, [pc, #196]	; (8001378 <OLED_ShowChar+0x174>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	440a      	add	r2, r1
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	737b      	strb	r3, [r7, #13]
 80012be:	e00d      	b.n	80012dc <OLED_ShowChar+0xd8>
		} //调用1608字体
		else if (size1 == 24)
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	2b18      	cmp	r3, #24
 80012c4:	d150      	bne.n	8001368 <OLED_ShowChar+0x164>
		{
			temp = asc2_2412[chr1][i];
 80012c6:	7a7a      	ldrb	r2, [r7, #9]
 80012c8:	7bf9      	ldrb	r1, [r7, #15]
 80012ca:	482c      	ldr	r0, [pc, #176]	; (800137c <OLED_ShowChar+0x178>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4403      	add	r3, r0
 80012d6:	440b      	add	r3, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	737b      	strb	r3, [r7, #13]
		} //调用2412字体
		else
			return;
		for (m = 0; m < 8; m++)
 80012dc:	2300      	movs	r3, #0
 80012de:	73bb      	strb	r3, [r7, #14]
 80012e0:	e022      	b.n	8001328 <OLED_ShowChar+0x124>
		{
			if (temp & 0x01)
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <OLED_ShowChar+0xf8>
				OLED_DrawPoint(x, y, mode);
 80012ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012f0:	79b9      	ldrb	r1, [r7, #6]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff1d 	bl	8001134 <OLED_DrawPoint>
 80012fa:	e00c      	b.n	8001316 <OLED_ShowChar+0x112>
			else
				OLED_DrawPoint(x, y, !mode);
 80012fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	79b9      	ldrb	r1, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff0f 	bl	8001134 <OLED_DrawPoint>
			temp >>= 1;
 8001316:	7b7b      	ldrb	r3, [r7, #13]
 8001318:	085b      	lsrs	r3, r3, #1
 800131a:	737b      	strb	r3, [r7, #13]
			y++;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	3301      	adds	r3, #1
 8001320:	71bb      	strb	r3, [r7, #6]
		for (m = 0; m < 8; m++)
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	3301      	adds	r3, #1
 8001326:	73bb      	strb	r3, [r7, #14]
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	2b07      	cmp	r3, #7
 800132c:	d9d9      	bls.n	80012e2 <OLED_ShowChar+0xde>
		}
		x++;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3301      	adds	r3, #1
 8001332:	71fb      	strb	r3, [r7, #7]
		if ((size1 != 8) && ((x - x0) == size1 / 2))
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	2b08      	cmp	r3, #8
 8001338:	d00c      	beq.n	8001354 <OLED_ShowChar+0x150>
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	7abb      	ldrb	r3, [r7, #10]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	793a      	ldrb	r2, [r7, #4]
 8001342:	0852      	lsrs	r2, r2, #1
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	4293      	cmp	r3, r2
 8001348:	d104      	bne.n	8001354 <OLED_ShowChar+0x150>
		{
			x = x0;
 800134a:	7abb      	ldrb	r3, [r7, #10]
 800134c:	71fb      	strb	r3, [r7, #7]
			y0 = y0 + 8;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	3308      	adds	r3, #8
 8001352:	72fb      	strb	r3, [r7, #11]
		}
		y = y0;
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < size2; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	429a      	cmp	r2, r3
 8001364:	d382      	bcc.n	800126c <OLED_ShowChar+0x68>
 8001366:	e000      	b.n	800136a <OLED_ShowChar+0x166>
			return;
 8001368:	bf00      	nop
	}
}
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	08008740 	.word	0x08008740
 8001374:	08008968 	.word	0x08008968
 8001378:	08008ddc 	.word	0x08008ddc
 800137c:	080093cc 	.word	0x080093cc

08001380 <OLED_ShowString>:
//x,y:起点坐标
//size1:字体大小
//*chr:字符串起始地址
//mode:0,反色显示;1,正常显示
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1, uint8_t mode)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af02      	add	r7, sp, #8
 8001386:	603a      	str	r2, [r7, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	460b      	mov	r3, r1
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	4613      	mov	r3, r2
 8001394:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) //判断是不是非法字符!
 8001396:	e019      	b.n	80013cc <OLED_ShowString+0x4c>
	{
		OLED_ShowChar(x, y, *chr, size1, mode);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	797c      	ldrb	r4, [r7, #5]
 800139e:	79b9      	ldrb	r1, [r7, #6]
 80013a0:	79f8      	ldrb	r0, [r7, #7]
 80013a2:	7e3b      	ldrb	r3, [r7, #24]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	4623      	mov	r3, r4
 80013a8:	f7ff ff2c 	bl	8001204 <OLED_ShowChar>
		if (size1 == 8)
 80013ac:	797b      	ldrb	r3, [r7, #5]
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d103      	bne.n	80013ba <OLED_ShowString+0x3a>
			x += 6;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	3306      	adds	r3, #6
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	e005      	b.n	80013c6 <OLED_ShowString+0x46>
		else
			x += size1 / 2;
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
		chr++;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) //判断是不是非法字符!
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b1f      	cmp	r3, #31
 80013d2:	d903      	bls.n	80013dc <OLED_ShowString+0x5c>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b7e      	cmp	r3, #126	; 0x7e
 80013da:	d9dd      	bls.n	8001398 <OLED_ShowString+0x18>
	}
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <OLED_Init>:
	}
}

//OLED的初始化
void OLED_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port,OLED_RES_Pin,GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2120      	movs	r1, #32
 80013ec:	483a      	ldr	r0, [pc, #232]	; (80014d8 <OLED_Init+0xf4>)
 80013ee:	f001 f9b1 	bl	8002754 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013f2:	200a      	movs	r0, #10
 80013f4:	f000 ff08 	bl	8002208 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RES_GPIO_Port,OLED_RES_Pin,GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2120      	movs	r1, #32
 80013fc:	4836      	ldr	r0, [pc, #216]	; (80014d8 <OLED_Init+0xf4>)
 80013fe:	f001 f9a9 	bl	8002754 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001402:	2032      	movs	r0, #50	; 0x32
 8001404:	f000 ff00 	bl	8002208 <HAL_Delay>
	
	OLED_WR_Byte(0xAE, OLED_CMD); /*display off*/
 8001408:	2100      	movs	r1, #0
 800140a:	20ae      	movs	r0, #174	; 0xae
 800140c:	f7ff fda2 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); /*set lower column address*/
 8001410:	2100      	movs	r1, #0
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fd9e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); /*set higher column address*/
 8001418:	2100      	movs	r1, #0
 800141a:	2010      	movs	r0, #16
 800141c:	f7ff fd9a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); /*set display start line*/
 8001420:	2100      	movs	r1, #0
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fd96 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0, OLED_CMD); /*set page address*/
 8001428:	2100      	movs	r1, #0
 800142a:	20b0      	movs	r0, #176	; 0xb0
 800142c:	f7ff fd92 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); /*contract control*/
 8001430:	2100      	movs	r1, #0
 8001432:	2081      	movs	r0, #129	; 0x81
 8001434:	f7ff fd8e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xff, OLED_CMD); /*128*/
 8001438:	2100      	movs	r1, #0
 800143a:	20ff      	movs	r0, #255	; 0xff
 800143c:	f7ff fd8a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); /*set segment remap*/
 8001440:	2100      	movs	r1, #0
 8001442:	20a1      	movs	r0, #161	; 0xa1
 8001444:	f7ff fd86 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); /*normal / reverse*/
 8001448:	2100      	movs	r1, #0
 800144a:	20a6      	movs	r0, #166	; 0xa6
 800144c:	f7ff fd82 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); /*multiplex ratio*/
 8001450:	2100      	movs	r1, #0
 8001452:	20a8      	movs	r0, #168	; 0xa8
 8001454:	f7ff fd7e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x1F, OLED_CMD); /*duty = 1/32*/
 8001458:	2100      	movs	r1, #0
 800145a:	201f      	movs	r0, #31
 800145c:	f7ff fd7a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); /*Com scan direction*/
 8001460:	2100      	movs	r1, #0
 8001462:	20c8      	movs	r0, #200	; 0xc8
 8001464:	f7ff fd76 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); /*set display offset*/
 8001468:	2100      	movs	r1, #0
 800146a:	20d3      	movs	r0, #211	; 0xd3
 800146c:	f7ff fd72 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD);
 8001470:	2100      	movs	r1, #0
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fd6e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5, OLED_CMD); /*set osc division*/
 8001478:	2100      	movs	r1, #0
 800147a:	20d5      	movs	r0, #213	; 0xd5
 800147c:	f7ff fd6a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD);
 8001480:	2100      	movs	r1, #0
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	f7ff fd66 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); /*set pre-charge period*/
 8001488:	2100      	movs	r1, #0
 800148a:	20d9      	movs	r0, #217	; 0xd9
 800148c:	f7ff fd62 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f, OLED_CMD);
 8001490:	2100      	movs	r1, #0
 8001492:	201f      	movs	r0, #31
 8001494:	f7ff fd5e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); /*set COM pins*/
 8001498:	2100      	movs	r1, #0
 800149a:	20da      	movs	r0, #218	; 0xda
 800149c:	f7ff fd5a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fd56 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0xdb, OLED_CMD); /*set vcomh*/
 80014a8:	2100      	movs	r1, #0
 80014aa:	20db      	movs	r0, #219	; 0xdb
 80014ac:	f7ff fd52 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD);
 80014b0:	2100      	movs	r1, #0
 80014b2:	2040      	movs	r0, #64	; 0x40
 80014b4:	f7ff fd4e 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x8d, OLED_CMD); /*set charge pump enable*/
 80014b8:	2100      	movs	r1, #0
 80014ba:	208d      	movs	r0, #141	; 0x8d
 80014bc:	f7ff fd4a 	bl	8000f54 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD);
 80014c0:	2100      	movs	r1, #0
 80014c2:	2014      	movs	r0, #20
 80014c4:	f7ff fd46 	bl	8000f54 <OLED_WR_Byte>
	OLED_Clear();
 80014c8:	f7ff fe0e 	bl	80010e8 <OLED_Clear>
	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 80014cc:	2100      	movs	r1, #0
 80014ce:	20af      	movs	r0, #175	; 0xaf
 80014d0:	f7ff fd40 	bl	8000f54 <OLED_WR_Byte>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020400 	.word	0x40020400

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <MX_GPIO_Init+0x138>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a46      	ldr	r2, [pc, #280]	; (8001614 <MX_GPIO_Init+0x138>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b44      	ldr	r3, [pc, #272]	; (8001614 <MX_GPIO_Init+0x138>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <MX_GPIO_Init+0x138>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a3f      	ldr	r2, [pc, #252]	; (8001614 <MX_GPIO_Init+0x138>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <MX_GPIO_Init+0x138>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_GPIO_Init+0x138>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a38      	ldr	r2, [pc, #224]	; (8001614 <MX_GPIO_Init+0x138>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_GPIO_Init+0x138>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <MX_GPIO_Init+0x138>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <MX_GPIO_Init+0x138>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <MX_GPIO_Init+0x138>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C13_GPIO_Port, C13_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001568:	482b      	ldr	r0, [pc, #172]	; (8001618 <MX_GPIO_Init+0x13c>)
 800156a:	f001 f8f3 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, hx711_sck_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2130      	movs	r1, #48	; 0x30
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <MX_GPIO_Init+0x140>)
 8001574:	f001 f8ee 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2120      	movs	r1, #32
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <MX_GPIO_Init+0x144>)
 800157e:	f001 f8e9 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C13_Pin;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	481f      	ldr	r0, [pc, #124]	; (8001618 <MX_GPIO_Init+0x13c>)
 800159c:	f000 ff3e 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_Pin|hx711_dt_Pin;
 80015a0:	2309      	movs	r3, #9
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <MX_GPIO_Init+0x140>)
 80015b4:	f000 ff32 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = hx711_sck_Pin|RELAY_Pin;
 80015b8:	2330      	movs	r3, #48	; 0x30
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_GPIO_Init+0x140>)
 80015d0:	f000 ff24 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MENU_Pin|UP_Pin|DOWN_Pin|KEYB15_Pin;
 80015d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_GPIO_Init+0x144>)
 80015ea:	f000 ff17 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 80015ee:	2320      	movs	r3, #32
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_GPIO_Init+0x144>)
 8001606:	f000 ff09 	bl	800241c <HAL_GPIO_Init>

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400

08001624 <HX711_Init>:
#include "stm32f4xx_hal.h"

static volatile float calibration_factor = 2096  ;
static volatile uint32_t tare_value = 0;

void HX711_Init(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock for GPIOA
 8001638:	2300      	movs	r3, #0
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HX711_Init+0x84>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <HX711_Init+0x84>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HX711_Init+0x84>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]

	// SCK Pin configuration
	GPIO_InitStruct.Pin = HX711_SCK_PIN;
 8001654:	2310      	movs	r3, #16
 8001656:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(HX711_SCK_PORT, &GPIO_InitStruct);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <HX711_Init+0x88>)
 800166a:	f000 fed7 	bl	800241c <HAL_GPIO_Init>

	// DT Pin configuration
	GPIO_InitStruct.Pin = HX711_DT_PIN;
 800166e:	2308      	movs	r3, #8
 8001670:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(HX711_DT_PORT, &GPIO_InitStruct);
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <HX711_Init+0x88>)
 8001680:	f000 fecc 	bl	800241c <HAL_GPIO_Init>

	//make sure that the hx711 is in a known state
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2110      	movs	r1, #16
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <HX711_Init+0x88>)
 800168a:	f001 f863 	bl	8002754 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1 ms delay
 800168e:	2001      	movs	r0, #1
 8001690:	f000 fdba 	bl	8002208 <HAL_Delay>
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2110      	movs	r1, #16
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <HX711_Init+0x88>)
 800169a:	f001 f85b 	bl	8002754 <HAL_GPIO_WritePin>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <HX711_Read>:

uint32_t HX711_Read(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	//setting to gain of 32 to get 80hz reading for a quicker response
    uint32_t count = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
    uint8_t i;

    // Wait for the HX711 to become ready
    while(HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN) == GPIO_PIN_SET);
 80016ba:	bf00      	nop
 80016bc:	2108      	movs	r1, #8
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <HX711_Read+0x80>)
 80016c0:	f001 f830 	bl	8002724 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d0f8      	beq.n	80016bc <HX711_Read+0xc>

    // Pulse the clock pin 24 times to read the data
    for(i = 0; i < 24; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	e019      	b.n	8001704 <HX711_Read+0x54>
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <HX711_Read+0x80>)
 80016d6:	f001 f83d 	bl	8002754 <HAL_GPIO_WritePin>
        count = count << 1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <HX711_Read+0x80>)
 80016e6:	f001 f835 	bl	8002754 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN) == GPIO_PIN_SET) {
 80016ea:	2108      	movs	r1, #8
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <HX711_Read+0x80>)
 80016ee:	f001 f819 	bl	8002724 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HX711_Read+0x4e>
            count++;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	607b      	str	r3, [r7, #4]
    for(i = 0; i < 24; i++) {
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	3301      	adds	r3, #1
 8001702:	70fb      	strb	r3, [r7, #3]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b17      	cmp	r3, #23
 8001708:	d9e2      	bls.n	80016d0 <HX711_Read+0x20>
        }
    }

    // The 25th pulse, keeping SCK high for gain of 32
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2110      	movs	r1, #16
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <HX711_Read+0x80>)
 8001710:	f001 f820 	bl	8002754 <HAL_GPIO_WritePin>
    // The 26th pulse is completed to set the gain to 32 for the next measurement
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2110      	movs	r1, #16
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <HX711_Read+0x80>)
 800171a:	f001 f81b 	bl	8002754 <HAL_GPIO_WritePin>

    // XOR the count with 0x800000 as the HX711 output is in 2's complement form
    count ^= 0x800000;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001724:	607b      	str	r3, [r7, #4]

    return count;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40020000 	.word	0x40020000

08001734 <HX711_GetWeight>:

float HX711_GetWeight(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
    uint32_t raw_value = HX711_Read();
 800173a:	f7ff ffb9 	bl	80016b0 <HX711_Read>
 800173e:	60b8      	str	r0, [r7, #8]
    uint32_t tare_offset = raw_value - tare_value;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HX711_GetWeight+0x58>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
    float weight = (float)tare_offset / calibration_factor;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HX711_GetWeight+0x5c>)
 8001756:	ed93 7a00 	vldr	s14, [r3]
 800175a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175e:	edc7 7a03 	vstr	s15, [r7, #12]
    if(weight > 1000000) weight = 0;
 8001762:	edd7 7a03 	vldr	s15, [r7, #12]
 8001766:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001794 <HX711_GetWeight+0x60>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	dd02      	ble.n	800177a <HX711_GetWeight+0x46>
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
    return weight;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	ee07 3a90 	vmov	s15, r3
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000920 	.word	0x20000920
 8001790:	20000000 	.word	0x20000000
 8001794:	49742400 	.word	0x49742400

08001798 <HX711_Tare>:

void HX711_Tare(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
    const int samples = 10;
 80017a2:	230a      	movs	r3, #10
 80017a4:	607b      	str	r3, [r7, #4]
    uint32_t reading;

    // Take several readings to average
    for (int i = 0; i < samples; i++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	e00c      	b.n	80017c6 <HX711_Tare+0x2e>
        reading = HX711_Read();
 80017ac:	f7ff ff80 	bl	80016b0 <HX711_Read>
 80017b0:	6038      	str	r0, [r7, #0]
        sum += reading;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        HAL_Delay(10); // Delay between readings for stability
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 fd24 	bl	8002208 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbee      	blt.n	80017ac <HX711_Tare+0x14>
    }

    tare_value = sum / samples; // Average tare value
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HX711_Tare+0x4c>)
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000920 	.word	0x20000920

080017e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_I2C1_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_I2C1_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_I2C1_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_I2C1_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_I2C1_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_I2C1_Init+0x50>)
 8001826:	f000 ffaf 	bl	8002788 <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001830:	f000 fb1e 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000924 	.word	0x20000924
 800183c:	40005400 	.word	0x40005400
 8001840:	00061a80 	.word	0x00061a80

08001844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_I2C_MspInit+0x84>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12b      	bne.n	80018be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_I2C_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_I2C_MspInit+0x88>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_I2C_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <HAL_I2C_MspInit+0x8c>)
 800189e:	f000 fdbd 	bl	800241c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_I2C_MspInit+0x88>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_I2C_MspInit+0x88>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_I2C_MspInit+0x88>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400

080018d4 <GetStableWeight>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float GetStableWeight(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
	float readings[5];

	// Take 5 readings
	for (int i = 0; i < 5; i++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e010      	b.n	8001902 <GetStableWeight+0x2e>
		readings[i] = HX711_GetWeight();
 80018e0:	f7ff ff28 	bl	8001734 <HX711_GetWeight>
 80018e4:	eef0 7a40 	vmov.f32	s15, s0
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3328      	adds	r3, #40	; 0x28
 80018ee:	443b      	add	r3, r7
 80018f0:	3b24      	subs	r3, #36	; 0x24
 80018f2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1); // Delay between readings
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 fc86 	bl	8002208 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3301      	adds	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	2b04      	cmp	r3, #4
 8001906:	ddeb      	ble.n	80018e0 <GetStableWeight+0xc>
	}

	// Sort the array to find the median
	// Simple insertion sort
	for (int i = 1; i < 5; i++) {
 8001908:	2301      	movs	r3, #1
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	e036      	b.n	800197c <GetStableWeight+0xa8>
		float key = readings[i];
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	3328      	adds	r3, #40	; 0x28
 8001914:	443b      	add	r3, r7
 8001916:	3b24      	subs	r3, #36	; 0x24
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
		int j = i - 1;
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	3b01      	subs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
		while (j >= 0 && readings[j] > key) {
 8001922:	e00f      	b.n	8001944 <GetStableWeight+0x70>
			readings[j + 1] = readings[j];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	3228      	adds	r2, #40	; 0x28
 800192e:	443a      	add	r2, r7
 8001930:	3a24      	subs	r2, #36	; 0x24
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3328      	adds	r3, #40	; 0x28
 8001938:	443b      	add	r3, r7
 800193a:	3b24      	subs	r3, #36	; 0x24
 800193c:	601a      	str	r2, [r3, #0]
			j = j - 1;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b01      	subs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
		while (j >= 0 && readings[j] > key) {
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0d      	blt.n	8001966 <GetStableWeight+0x92>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3328      	adds	r3, #40	; 0x28
 8001950:	443b      	add	r3, r7
 8001952:	3b24      	subs	r3, #36	; 0x24
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed97 7a06 	vldr	s14, [r7, #24]
 800195c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d4de      	bmi.n	8001924 <GetStableWeight+0x50>
		}
		readings[j + 1] = key;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	3328      	adds	r3, #40	; 0x28
 800196e:	443b      	add	r3, r7
 8001970:	3b24      	subs	r3, #36	; 0x24
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++) {
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	3301      	adds	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b04      	cmp	r3, #4
 8001980:	ddc5      	ble.n	800190e <GetStableWeight+0x3a>
	}

	// Return the median value
	return readings[2]; // The middle value after sorting
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	ee07 3a90 	vmov	s15, r3
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	0000      	movs	r0, r0
 8001994:	0000      	movs	r0, r0
	...

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f000 fbc1 	bl	8002124 <HAL_Init>

  /* USER CODE BEGIN Init */
  state = 0;
 80019a2:	4bc1      	ldr	r3, [pc, #772]	; (8001ca8 <main+0x310>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  int lastState = -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f9f7 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f7ff fd93 	bl	80014dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80019b6:	f7ff ff17 	bl	80017e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	//init the scale
	HX711_Init();
 80019ba:	f7ff fe33 	bl	8001624 <HX711_Init>
	//init the oled
	OLED_Init();
 80019be:	f7ff fd11 	bl	80013e4 <OLED_Init>
	OLED_SetBrightness(128);
 80019c2:	2080      	movs	r0, #128	; 0x80
 80019c4:	f7ff fafa 	bl	8000fbc <OLED_SetBrightness>
	OLED_ColorTurn(0);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fadf 	bl	8000f8c <OLED_ColorTurn>
	OLED_DisplayTurn(0);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fb0e 	bl	8000ff0 <OLED_DisplayTurn>
//	OLED_ShowString(0,4,"Testing ",16,1);
	OLED_Refresh();
 80019d4:	f7ff fb2c 	bl	8001030 <OLED_Refresh>
	HX711_Tare();
 80019d8:	f7ff fede 	bl	8001798 <HX711_Tare>
		//add case switch here
		//if button is pressed, go to next state

		char cur_weight[30];

		if(HAL_GPIO_ReadPin(MENU_PORT, MENU_PIN) == GPIO_PIN_SET){
 80019dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e0:	48b2      	ldr	r0, [pc, #712]	; (8001cac <main+0x314>)
 80019e2:	f000 fe9f 	bl	8002724 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d117      	bne.n	8001a1c <main+0x84>
			// Debounce delay
			HAL_Delay(100);
 80019ec:	2064      	movs	r0, #100	; 0x64
 80019ee:	f000 fc0b 	bl	8002208 <HAL_Delay>
			while(HAL_GPIO_ReadPin(MENU_PORT, MENU_PIN) == GPIO_PIN_SET); // Wait until button is released
 80019f2:	bf00      	nop
 80019f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f8:	48ac      	ldr	r0, [pc, #688]	; (8001cac <main+0x314>)
 80019fa:	f000 fe93 	bl	8002724 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d0f7      	beq.n	80019f4 <main+0x5c>

			state = (state + 1) % 4;
 8001a04:	4ba8      	ldr	r3, [pc, #672]	; (8001ca8 <main+0x310>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	425a      	negs	r2, r3
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	bf58      	it	pl
 8001a16:	4253      	negpl	r3, r2
 8001a18:	4aa3      	ldr	r2, [pc, #652]	; (8001ca8 <main+0x310>)
 8001a1a:	6013      	str	r3, [r2, #0]
//			HAL_Delay(500);
		}
//
		if (state != lastState)
 8001a1c:	4ba2      	ldr	r3, [pc, #648]	; (8001ca8 <main+0x310>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d006      	beq.n	8001a34 <main+0x9c>
		{
			OLED_Clear();
 8001a26:	f7ff fb5f 	bl	80010e8 <OLED_Clear>
			HX711_Tare();
 8001a2a:	f7ff feb5 	bl	8001798 <HX711_Tare>
			lastState = state; // Update the last state
 8001a2e:	4b9e      	ldr	r3, [pc, #632]	; (8001ca8 <main+0x310>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
		}

		switch(state){
 8001a34:	4b9c      	ldr	r3, [pc, #624]	; (8001ca8 <main+0x310>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d8cf      	bhi.n	80019dc <main+0x44>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <main+0xac>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001bd3 	.word	0x08001bd3
 8001a4c:	08001c05 	.word	0x08001c05
 8001a50:	08001d2d 	.word	0x08001d2d
		case 0:
			snprintf(cur_weight, sizeof(cur_weight), "Start %.2f g", target);
 8001a54:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <main+0x318>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd7d 	bl	8000558 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4638      	mov	r0, r7
 8001a64:	e9cd 2300 	strd	r2, r3, [sp]
 8001a68:	4a92      	ldr	r2, [pc, #584]	; (8001cb4 <main+0x31c>)
 8001a6a:	211e      	movs	r1, #30
 8001a6c:	f002 f96e 	bl	8003d4c <snprintf>
			OLED_ShowString(0, 4, cur_weight, 12, 1);
 8001a70:	463a      	mov	r2, r7
 8001a72:	2301      	movs	r3, #1
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	230c      	movs	r3, #12
 8001a78:	2104      	movs	r1, #4
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fc80 	bl	8001380 <OLED_ShowString>
			OLED_Refresh();
 8001a80:	f7ff fad6 	bl	8001030 <OLED_Refresh>
			HX711_Tare();
 8001a84:	f7ff fe88 	bl	8001798 <HX711_Tare>
			grams = HX711_GetWeight();
 8001a88:	f7ff fe54 	bl	8001734 <HX711_GetWeight>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
 8001a90:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <main+0x320>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]
			if(grams > 100){
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <main+0x320>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001cbc <main+0x324>
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd31      	ble.n	8001b0e <main+0x176>

				HAL_Delay(500);
 8001aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aae:	f000 fbab 	bl	8002208 <HAL_Delay>
				if(grams > 100){
 8001ab2:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <main+0x320>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001cbc <main+0x324>
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd23      	ble.n	8001b0e <main+0x176>
					OLED_Clear();
 8001ac6:	f7ff fb0f 	bl	80010e8 <OLED_Clear>
					snprintf(cur_weight, sizeof(cur_weight), "%.2f g", grams);
 8001aca:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <main+0x320>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4638      	mov	r0, r7
 8001ada:	e9cd 2300 	strd	r2, r3, [sp]
 8001ade:	4a78      	ldr	r2, [pc, #480]	; (8001cc0 <main+0x328>)
 8001ae0:	211e      	movs	r1, #30
 8001ae2:	f002 f933 	bl	8003d4c <snprintf>
					OLED_ShowString(0, 20, (char*)cur_weight, 12, 1);
 8001ae6:	463a      	mov	r2, r7
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	230c      	movs	r3, #12
 8001aee:	2114      	movs	r1, #20
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fc45 	bl	8001380 <OLED_ShowString>
					OLED_Refresh();
 8001af6:	f7ff fa9b 	bl	8001030 <OLED_Refresh>
					grinding = 1;
 8001afa:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <main+0x32c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
					HX711_Tare();
 8001b00:	f7ff fe4a 	bl	8001798 <HX711_Tare>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2120      	movs	r1, #32
 8001b08:	486f      	ldr	r0, [pc, #444]	; (8001cc8 <main+0x330>)
 8001b0a:	f000 fe23 	bl	8002754 <HAL_GPIO_WritePin>
				}

			}
			while(grinding){
 8001b0e:	e056      	b.n	8001bbe <main+0x226>
				snprintf(cur_weight, sizeof(cur_weight), "%.2f g", grams);
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <main+0x320>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd1f 	bl	8000558 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4638      	mov	r0, r7
 8001b20:	e9cd 2300 	strd	r2, r3, [sp]
 8001b24:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <main+0x328>)
 8001b26:	211e      	movs	r1, #30
 8001b28:	f002 f910 	bl	8003d4c <snprintf>
				OLED_ShowString(0, 20, (char*)cur_weight, 12, 1);
 8001b2c:	463a      	mov	r2, r7
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	230c      	movs	r3, #12
 8001b34:	2114      	movs	r1, #20
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fc22 	bl	8001380 <OLED_ShowString>
				OLED_Refresh();
 8001b3c:	f7ff fa78 	bl	8001030 <OLED_Refresh>
				grams = HX711_GetWeight();
 8001b40:	f7ff fdf8 	bl	8001734 <HX711_GetWeight>
 8001b44:	eef0 7a40 	vmov.f32	s15, s0
 8001b48:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <main+0x320>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
				if(grams >= 17.9){
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <main+0x320>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd00 	bl	8000558 <__aeabi_f2d>
 8001b58:	a34f      	add	r3, pc, #316	; (adr r3, 8001c98 <main+0x300>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe ffd9 	bl	8000b14 <__aeabi_dcmpge>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d025      	beq.n	8001bb4 <main+0x21c>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	4856      	ldr	r0, [pc, #344]	; (8001cc8 <main+0x330>)
 8001b6e:	f000 fdf1 	bl	8002754 <HAL_GPIO_WritePin>
					snprintf(cur_weight, sizeof(cur_weight), "Done %.2f", grams);
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <main+0x320>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcee 	bl	8000558 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4638      	mov	r0, r7
 8001b82:	e9cd 2300 	strd	r2, r3, [sp]
 8001b86:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <main+0x334>)
 8001b88:	211e      	movs	r1, #30
 8001b8a:	f002 f8df 	bl	8003d4c <snprintf>
					OLED_ShowString(0, 20, (char*)cur_weight, 12, 1);
 8001b8e:	463a      	mov	r2, r7
 8001b90:	2301      	movs	r3, #1
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	230c      	movs	r3, #12
 8001b96:	2114      	movs	r1, #20
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fbf1 	bl	8001380 <OLED_ShowString>
					OLED_Refresh();
 8001b9e:	f7ff fa47 	bl	8001030 <OLED_Refresh>
					HAL_Delay(200);
 8001ba2:	20c8      	movs	r0, #200	; 0xc8
 8001ba4:	f000 fb30 	bl	8002208 <HAL_Delay>
					HX711_Tare();
 8001ba8:	f7ff fdf6 	bl	8001798 <HX711_Tare>
					grinding = 0;
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <main+0x32c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
					break;
 8001bb2:	e008      	b.n	8001bc6 <main+0x22e>
				}else{
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <main+0x330>)
 8001bba:	f000 fdcb 	bl	8002754 <HAL_GPIO_WritePin>
			while(grinding){
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <main+0x32c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1a4      	bne.n	8001b10 <main+0x178>
				}
			}
			HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	483f      	ldr	r0, [pc, #252]	; (8001cc8 <main+0x330>)
 8001bcc:	f000 fdc2 	bl	8002754 <HAL_GPIO_WritePin>
//			HAL_Delay(100);
			break;
 8001bd0:	e0d7      	b.n	8001d82 <main+0x3ea>
		case 1:
			snprintf(cur_weight, sizeof(cur_weight), "Calibrate   50g", target);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <main+0x318>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcbe 	bl	8000558 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4638      	mov	r0, r7
 8001be2:	e9cd 2300 	strd	r2, r3, [sp]
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <main+0x338>)
 8001be8:	211e      	movs	r1, #30
 8001bea:	f002 f8af 	bl	8003d4c <snprintf>
//			HX711_Calibrate();
			OLED_ShowString(0, 4, cur_weight, 12, 1);
 8001bee:	463a      	mov	r2, r7
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fbc1 	bl	8001380 <OLED_ShowString>
			OLED_Refresh();
 8001bfe:	f7ff fa17 	bl	8001030 <OLED_Refresh>
//			HAL_Delay(100);
			break;
 8001c02:	e0be      	b.n	8001d82 <main+0x3ea>
		case 2:
			OLED_ShowString(0, 4, "Change Weight", 12, 1);
 8001c04:	2301      	movs	r3, #1
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	230c      	movs	r3, #12
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <main+0x33c>)
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fbb6 	bl	8001380 <OLED_ShowString>
			snprintf(cur_weight, sizeof(cur_weight), "Target: %.2f", target);
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <main+0x318>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc9d 	bl	8000558 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4638      	mov	r0, r7
 8001c24:	e9cd 2300 	strd	r2, r3, [sp]
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <main+0x340>)
 8001c2a:	211e      	movs	r1, #30
 8001c2c:	f002 f88e 	bl	8003d4c <snprintf>
			OLED_ShowString(0, 20, cur_weight, 12, 1);
 8001c30:	463a      	mov	r2, r7
 8001c32:	2301      	movs	r3, #1
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	230c      	movs	r3, #12
 8001c38:	2114      	movs	r1, #20
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fba0 	bl	8001380 <OLED_ShowString>
			OLED_Refresh();
 8001c40:	f7ff f9f6 	bl	8001030 <OLED_Refresh>
//			HAL_Delay(100);
			if(HAL_GPIO_ReadPin(UP_PORT, UP_PIN) == GPIO_PIN_SET){
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c48:	4818      	ldr	r0, [pc, #96]	; (8001cac <main+0x314>)
 8001c4a:	f000 fd6b 	bl	8002724 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d143      	bne.n	8001cdc <main+0x344>
						// Debounce delay
				HAL_Delay(100);
 8001c54:	2064      	movs	r0, #100	; 0x64
 8001c56:	f000 fad7 	bl	8002208 <HAL_Delay>
				while(HAL_GPIO_ReadPin(UP_PORT, UP_PIN) == GPIO_PIN_SET); // Wait until button is released
 8001c5a:	bf00      	nop
 8001c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <main+0x314>)
 8001c62:	f000 fd5f 	bl	8002724 <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d0f7      	beq.n	8001c5c <main+0x2c4>

				target = target + 0.1;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <main+0x318>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc71 	bl	8000558 <__aeabi_f2d>
 8001c76:	a30a      	add	r3, pc, #40	; (adr r3, 8001ca0 <main+0x308>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fb0e 	bl	800029c <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff96 	bl	8000bb8 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <main+0x318>)
 8001c90:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
				while(HAL_GPIO_ReadPin(DOWN_PORT, DOWN_PIN) == GPIO_PIN_SET); // Wait until button is released

				target = target - 0.1;
			}
			break;
 8001c92:	e074      	b.n	8001d7e <main+0x3e6>
 8001c94:	f3af 8000 	nop.w
 8001c98:	66666666 	.word	0x66666666
 8001c9c:	4031e666 	.word	0x4031e666
 8001ca0:	9999999a 	.word	0x9999999a
 8001ca4:	3fb99999 	.word	0x3fb99999
 8001ca8:	2000097c 	.word	0x2000097c
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	080086e0 	.word	0x080086e0
 8001cb8:	20000978 	.word	0x20000978
 8001cbc:	42c80000 	.word	0x42c80000
 8001cc0:	080086f0 	.word	0x080086f0
 8001cc4:	20000980 	.word	0x20000980
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	080086f8 	.word	0x080086f8
 8001cd0:	08008704 	.word	0x08008704
 8001cd4:	08008714 	.word	0x08008714
 8001cd8:	08008724 	.word	0x08008724
			}else if(HAL_GPIO_ReadPin(DOWN_PORT, DOWN_PIN) == GPIO_PIN_SET){
 8001cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce0:	482b      	ldr	r0, [pc, #172]	; (8001d90 <main+0x3f8>)
 8001ce2:	f000 fd1f 	bl	8002724 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d148      	bne.n	8001d7e <main+0x3e6>
				HAL_Delay(100);
 8001cec:	2064      	movs	r0, #100	; 0x64
 8001cee:	f000 fa8b 	bl	8002208 <HAL_Delay>
				while(HAL_GPIO_ReadPin(DOWN_PORT, DOWN_PIN) == GPIO_PIN_SET); // Wait until button is released
 8001cf2:	bf00      	nop
 8001cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf8:	4825      	ldr	r0, [pc, #148]	; (8001d90 <main+0x3f8>)
 8001cfa:	f000 fd13 	bl	8002724 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d0f7      	beq.n	8001cf4 <main+0x35c>
				target = target - 0.1;
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <main+0x3fc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc25 	bl	8000558 <__aeabi_f2d>
 8001d0e:	a31e      	add	r3, pc, #120	; (adr r3, 8001d88 <main+0x3f0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fac0 	bl	8000298 <__aeabi_dsub>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff4a 	bl	8000bb8 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <main+0x3fc>)
 8001d28:	6013      	str	r3, [r2, #0]
			break;
 8001d2a:	e028      	b.n	8001d7e <main+0x3e6>
		case 3:
			snprintf(cur_weight, sizeof(cur_weight), "test 50g");
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <main+0x400>)
 8001d30:	211e      	movs	r1, #30
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 f80a 	bl	8003d4c <snprintf>
			OLED_ShowString(0, 4, (char*)cur_weight, 12, 1);
 8001d38:	463a      	mov	r2, r7
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	230c      	movs	r3, #12
 8001d40:	2104      	movs	r1, #4
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fb1c 	bl	8001380 <OLED_ShowString>
			float g = GetStableWeight();
 8001d48:	f7ff fdc4 	bl	80018d4 <GetStableWeight>
 8001d4c:	ed87 0a08 	vstr	s0, [r7, #32]
			snprintf(cur_weight, sizeof(cur_weight), "%.2f g", g);
 8001d50:	6a38      	ldr	r0, [r7, #32]
 8001d52:	f7fe fc01 	bl	8000558 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <main+0x404>)
 8001d62:	211e      	movs	r1, #30
 8001d64:	f001 fff2 	bl	8003d4c <snprintf>
			OLED_ShowString(0, 20, (char*)cur_weight, 12, 1);
 8001d68:	463a      	mov	r2, r7
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	230c      	movs	r3, #12
 8001d70:	2114      	movs	r1, #20
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fb04 	bl	8001380 <OLED_ShowString>
			OLED_Refresh();
 8001d78:	f7ff f95a 	bl	8001030 <OLED_Refresh>
 8001d7c:	e62e      	b.n	80019dc <main+0x44>
			break;
 8001d7e:	bf00      	nop
 8001d80:	e62c      	b.n	80019dc <main+0x44>
	{
 8001d82:	e62b      	b.n	80019dc <main+0x44>
 8001d84:	f3af 8000 	nop.w
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fb99999 	.word	0x3fb99999
 8001d90:	40020400 	.word	0x40020400
 8001d94:	20000004 	.word	0x20000004
 8001d98:	08008734 	.word	0x08008734
 8001d9c:	080086f0 	.word	0x080086f0

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 f843 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <SystemClock_Config+0xcc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <SystemClock_Config+0xcc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e10:	230c      	movs	r3, #12
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fa8b 	bl	8003340 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e30:	f000 f81e 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2103      	movs	r1, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fced 	bl	8003830 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e5c:	f000 f808 	bl	8001e70 <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f956 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_kill>:

int _kill(int pid, int sig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f3a:	f001 ffcd 	bl	8003ed8 <__errno>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2216      	movs	r2, #22
 8001f42:	601a      	str	r2, [r3, #0]
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_exit>:

void _exit (int status)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffe7 	bl	8001f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f62:	e7fe      	b.n	8001f62 <_exit+0x12>

08001f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00a      	b.n	8001f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f76:	f3af 8000 	nop.w
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	b2ca      	uxtb	r2, r1
 8001f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf0      	blt.n	8001f76 <_read+0x12>
  }

  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e009      	b.n	8001fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf1      	blt.n	8001fb0 <_write+0x12>
  }
  return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_close>:

int _close(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_isatty>:

int _isatty(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f001 ff32 	bl	8003ed8 <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20020000 	.word	0x20020000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	20000984 	.word	0x20000984
 80020a8:	20000c98 	.word	0x20000c98

080020ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020ec:	4c0b      	ldr	r4, [pc, #44]	; (800211c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020fa:	f7ff ffd7 	bl	80020ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f001 fef1 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7ff fc49 	bl	8001998 <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	200006c4 	.word	0x200006c4
  ldr r2, =_sidata
 8002114:	0800a4e0 	.word	0x0800a4e0
  ldr r2, =_sbss
 8002118:	200006c4 	.word	0x200006c4
  ldr r4, =_ebss
 800211c:	20000c98 	.word	0x20000c98

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_Init+0x40>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_Init+0x40>)
 800213a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x40>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f931 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fe90 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f93b 	bl	8002402 <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 f911 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000008 	.word	0x20000008
 80021c0:	20000010 	.word	0x20000010
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000010 	.word	0x20000010
 80021ec:	20000988 	.word	0x20000988

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000988 	.word	0x20000988

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000010 	.word	0x20000010

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff47 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff5c 	bl	8002298 <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8e 	bl	8002308 <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffb0 	bl	8002370 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e159      	b.n	80026ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8148 	bne.w	80026e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_GPIO_Init+0x2f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x202>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x1fe>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x1fa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x1f6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x300>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x1f2>
 800260a:	2304      	movs	r3, #4
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800260e:	2307      	movs	r3, #7
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_GPIO_Init+0x304>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268c:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x304>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f aea2 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e12b      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f848 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ec:	f001 f9d8 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a81      	ldr	r2, [pc, #516]	; (80029fc <HAL_I2C_Init+0x274>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d807      	bhi.n	800280c <HAL_I2C_Init+0x84>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_I2C_Init+0x278>)
 8002800:	4293      	cmp	r3, r2
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e006      	b.n	800281a <HAL_I2C_Init+0x92>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a7d      	ldr	r2, [pc, #500]	; (8002a04 <HAL_I2C_Init+0x27c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0e7      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <HAL_I2C_Init+0x280>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_I2C_Init+0x274>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d802      	bhi.n	800285c <HAL_I2C_Init+0xd4>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	e009      	b.n	8002870 <HAL_I2C_Init+0xe8>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_I2C_Init+0x284>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	3301      	adds	r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	430b      	orrs	r3, r1
 8002876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	495c      	ldr	r1, [pc, #368]	; (80029fc <HAL_I2C_Init+0x274>)
 800288c:	428b      	cmp	r3, r1
 800288e:	d819      	bhi.n	80028c4 <HAL_I2C_Init+0x13c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e59      	subs	r1, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fbb1 f3f3 	udiv	r3, r1, r3
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a4:	400b      	ands	r3, r1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_I2C_Init+0x138>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e59      	subs	r1, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	e051      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e04f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <HAL_I2C_Init+0x168>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	440b      	add	r3, r1
 80028da:	fbb0 f3f3 	udiv	r3, r0, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e012      	b.n	8002916 <HAL_I2C_Init+0x18e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e58      	subs	r0, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	0099      	lsls	r1, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Init+0x196>
 800291a:	2301      	movs	r3, #1
 800291c:	e022      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <HAL_I2C_Init+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e58      	subs	r0, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	440b      	add	r3, r1
 8002934:	fbb0 f3f3 	udiv	r3, r0, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	e00f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	6809      	ldr	r1, [r1, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6911      	ldr	r1, [r2, #16]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	000186a0 	.word	0x000186a0
 8002a00:	001e847f 	.word	0x001e847f
 8002a04:	003d08ff 	.word	0x003d08ff
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	4613      	mov	r3, r2
 8002a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff fbe4 	bl	80021f0 <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 80e0 	bne.w	8002bf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2319      	movs	r3, #25
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4970      	ldr	r1, [pc, #448]	; (8002c04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 faf4 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0d3      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x50>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0cc      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d007      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f996 	bl	8002e00 <I2C_MasterRequestWrite>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e08d      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002af4:	e066      	b.n	8002bc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fb6e 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x188>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	6a39      	ldr	r1, [r7, #32]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fb5e 	bl	800325e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d107      	bne.n	8002bc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e01a      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d194      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	00100002 	.word	0x00100002
 8002c08:	ffff0000 	.word	0xffff0000

08002c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c26:	f7ff fae3 	bl	80021f0 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 80d9 	bne.w	8002dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	496d      	ldr	r1, [pc, #436]	; (8002df8 <HAL_I2C_Mem_Write+0x1ec>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f9f3 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0cc      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x56>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0c5      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d007      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_I2C_Mem_Write+0x1f0>)
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cca:	88f8      	ldrh	r0, [r7, #6]
 8002ccc:	893a      	ldrh	r2, [r7, #8]
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4603      	mov	r3, r0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f912 	bl	8002f04 <I2C_RequestMemoryWrite>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d052      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e081      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fa74 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_I2C_Mem_Write+0x180>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1aa      	bne.n	8002cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fa60 	bl	800325e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d107      	bne.n	8002dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e016      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d006      	beq.n	8002e2a <I2C_MasterRequestWrite+0x2a>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d003      	beq.n	8002e2a <I2C_MasterRequestWrite+0x2a>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e28:	d108      	bne.n	8002e3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e00b      	b.n	8002e54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d107      	bne.n	8002e54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f8e5 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d103      	bne.n	8002e84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e035      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e90:	d108      	bne.n	8002ea4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e01b      	b.n	8002edc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	11db      	asrs	r3, r3, #7
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f063 030f 	orn	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <I2C_MasterRequestWrite+0xfc>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f90b 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e010      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <I2C_MasterRequestWrite+0x100>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8fb 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00010008 	.word	0x00010008
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	817b      	strh	r3, [r7, #10]
 8002f16:	460b      	mov	r3, r1
 8002f18:	813b      	strh	r3, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f878 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d103      	bne.n	8002f5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e05f      	b.n	8003022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <I2C_RequestMemoryWrite+0x128>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8b0 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e04c      	b.n	8003022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f91a 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02b      	b.n	8003022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd0:	893b      	ldrh	r3, [r7, #8]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e021      	b.n	8003020 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fec:	6a39      	ldr	r1, [r7, #32]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8f4 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d107      	bne.n	8003012 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e005      	b.n	8003022 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	00010002 	.word	0x00010002

08003030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	e025      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d021      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7ff f8d1 	bl	80021f0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e023      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10d      	bne.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	e00c      	b.n	80030ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d0b6      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ec:	e051      	b.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d123      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e046      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d021      	beq.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7ff f84f 	bl	80021f0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d116      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e020      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10c      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e00b      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d18d      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e8:	e02d      	b.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f878 	bl	80032e0 <I2C_IsAcknowledgeFailed>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02d      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d021      	beq.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fe fff5 	bl	80021f0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d1ca      	bne.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326a:	e02d      	b.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f837 	bl	80032e0 <I2C_IsAcknowledgeFailed>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e02d      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d021      	beq.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fe ffb4 	bl	80021f0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d1ca      	bne.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d11b      	bne.n	8003330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e267      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d075      	beq.n	800344a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b04      	cmp	r3, #4
 8003368:	d00c      	beq.n	8003384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d112      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x108>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e242      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x74>
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b70      	ldr	r3, [pc, #448]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6f      	ldr	r2, [pc, #444]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6c      	ldr	r2, [pc, #432]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033d8:	4b69      	ldr	r3, [pc, #420]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b66      	ldr	r3, [pc, #408]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a65      	ldr	r2, [pc, #404]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fefa 	bl	80021f0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fef6 	bl	80021f0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e207      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xc0>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fee6 	bl	80021f0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fee2 	bl	80021f0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1f3      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0xe8>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346a:	2b08      	cmp	r3, #8
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b44      	ldr	r3, [pc, #272]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x152>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1c7      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	e03a      	b.n	800351e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCC_OscConfig+0x244>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe fe9b 	bl	80021f0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034be:	f7fe fe97 	bl	80021f0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1a8      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4925      	ldr	r1, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x244>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fe7a 	bl	80021f0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fe76 	bl	80021f0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e187      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d036      	beq.n	8003598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x248>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fe5a 	bl	80021f0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe fe56 	bl	80021f0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e167      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x240>)
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x200>
 800355e:	e01b      	b.n	8003598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x248>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe fe43 	bl	80021f0 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e00e      	b.n	800358c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356e:	f7fe fe3f 	bl	80021f0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d907      	bls.n	800358c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e150      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
 8003580:	40023800 	.word	0x40023800
 8003584:	42470000 	.word	0x42470000
 8003588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ea      	bne.n	800356e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8097 	beq.w	80036d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b81      	ldr	r3, [pc, #516]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b7d      	ldr	r3, [pc, #500]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a7c      	ldr	r2, [pc, #496]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b77      	ldr	r3, [pc, #476]	; (80037b4 <HAL_RCC_OscConfig+0x474>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b74      	ldr	r3, [pc, #464]	; (80037b4 <HAL_RCC_OscConfig+0x474>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a73      	ldr	r2, [pc, #460]	; (80037b4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fdff 	bl	80021f0 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fe fdfb 	bl	80021f0 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e10c      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_OscConfig+0x474>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x2ea>
 800361c:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a63      	ldr	r2, [pc, #396]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x324>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x30c>
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a5e      	ldr	r2, [pc, #376]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003638:	f043 0304 	orr.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a5b      	ldr	r2, [pc, #364]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0x324>
 800364c:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fdc0 	bl	80021f0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	e00a      	b.n	800368a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fe fdbc 	bl	80021f0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0cb      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ee      	beq.n	8003674 <HAL_RCC_OscConfig+0x334>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fe fdaa 	bl	80021f0 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fda6 	bl	80021f0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0b5      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ee      	bne.n	80036a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a1 	beq.w	8003820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036de:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d05c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d141      	bne.n	8003776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe fd7a 	bl	80021f0 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fd76 	bl	80021f0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e087      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	491b      	ldr	r1, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x478>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe fd4f 	bl	80021f0 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe fd4b 	bl	80021f0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e05c      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x416>
 8003774:	e054      	b.n	8003820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_RCC_OscConfig+0x478>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fd38 	bl	80021f0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fd34 	bl	80021f0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e045      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_OscConfig+0x470>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x444>
 80037a2:	e03d      	b.n	8003820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e038      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40007000 	.word	0x40007000
 80037b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d028      	beq.n	800381c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d121      	bne.n	800381c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d11a      	bne.n	800381c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	3b01      	subs	r3, #1
 8003806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0cc      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d90c      	bls.n	800386c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d044      	beq.n	8003950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d119      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e067      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4934      	ldr	r1, [pc, #208]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fe fc66 	bl	80021f0 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fe fc62 	bl	80021f0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20c      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f821 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	490a      	ldr	r1, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fbc6 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	0800a128 	.word	0x0800a128
 80039f4:	20000008 	.word	0x20000008
 80039f8:	2000000c 	.word	0x2000000c

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b090      	sub	sp, #64	; 0x40
 8003a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
 8003a08:	2300      	movs	r3, #0
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d00d      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x40>
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	f200 80a1 	bhi.w	8003b68 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a2e:	e09b      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a34:	e09b      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a36:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a3a:	e098      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a46:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d028      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	2200      	movs	r2, #0
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a64:	2100      	movs	r1, #0
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a68:	fb03 f201 	mul.w	r2, r3, r1
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	fb00 f303 	mul.w	r3, r0, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a76:	fba0 1202 	umull	r1, r2, r0, r2
 8003a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a7c:	460a      	mov	r2, r1
 8003a7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a82:	4413      	add	r3, r2
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	2200      	movs	r2, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	61fa      	str	r2, [r7, #28]
 8003a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a96:	f7fd f8df 	bl	8000c58 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa2:	e053      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	2200      	movs	r2, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	617a      	str	r2, [r7, #20]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ab6:	f04f 0b00 	mov.w	fp, #0
 8003aba:	4652      	mov	r2, sl
 8003abc:	465b      	mov	r3, fp
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ad6:	eb63 090b 	sbc.w	r9, r3, fp
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ae6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003aea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aee:	ebb2 0408 	subs.w	r4, r2, r8
 8003af2:	eb63 0509 	sbc.w	r5, r3, r9
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	00eb      	lsls	r3, r5, #3
 8003b00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b04:	00e2      	lsls	r2, r4, #3
 8003b06:	4614      	mov	r4, r2
 8003b08:	461d      	mov	r5, r3
 8003b0a:	eb14 030a 	adds.w	r3, r4, sl
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	eb45 030b 	adc.w	r3, r5, fp
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b22:	4629      	mov	r1, r5
 8003b24:	028b      	lsls	r3, r1, #10
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	028a      	lsls	r2, r1, #10
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	2200      	movs	r2, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	60fa      	str	r2, [r7, #12]
 8003b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b40:	f7fd f88a 	bl	8000c58 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3740      	adds	r7, #64	; 0x40
 8003b74:	46bd      	mov	sp, r7
 8003b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	017d7840 	.word	0x017d7840

08003b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000008 	.word	0x20000008

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0a9b      	lsrs	r3, r3, #10
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4903      	ldr	r1, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	0800a138 	.word	0x0800a138

08003bc8 <std>:
 8003bc8:	2300      	movs	r3, #0
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	e9c0 3300 	strd	r3, r3, [r0]
 8003bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd6:	6083      	str	r3, [r0, #8]
 8003bd8:	8181      	strh	r1, [r0, #12]
 8003bda:	6643      	str	r3, [r0, #100]	; 0x64
 8003bdc:	81c2      	strh	r2, [r0, #14]
 8003bde:	6183      	str	r3, [r0, #24]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2208      	movs	r2, #8
 8003be4:	305c      	adds	r0, #92	; 0x5c
 8003be6:	f000 f928 	bl	8003e3a <memset>
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <std+0x58>)
 8003bec:	6223      	str	r3, [r4, #32]
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <std+0x5c>)
 8003bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <std+0x60>)
 8003bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <std+0x64>)
 8003bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <std+0x68>)
 8003bfc:	61e4      	str	r4, [r4, #28]
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	d006      	beq.n	8003c10 <std+0x48>
 8003c02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c06:	4294      	cmp	r4, r2
 8003c08:	d002      	beq.n	8003c10 <std+0x48>
 8003c0a:	33d0      	adds	r3, #208	; 0xd0
 8003c0c:	429c      	cmp	r4, r3
 8003c0e:	d105      	bne.n	8003c1c <std+0x54>
 8003c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c18:	f000 b988 	b.w	8003f2c <__retarget_lock_init_recursive>
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	bf00      	nop
 8003c20:	08003db5 	.word	0x08003db5
 8003c24:	08003dd7 	.word	0x08003dd7
 8003c28:	08003e0f 	.word	0x08003e0f
 8003c2c:	08003e33 	.word	0x08003e33
 8003c30:	2000098c 	.word	0x2000098c

08003c34 <stdio_exit_handler>:
 8003c34:	4a02      	ldr	r2, [pc, #8]	; (8003c40 <stdio_exit_handler+0xc>)
 8003c36:	4903      	ldr	r1, [pc, #12]	; (8003c44 <stdio_exit_handler+0x10>)
 8003c38:	4803      	ldr	r0, [pc, #12]	; (8003c48 <stdio_exit_handler+0x14>)
 8003c3a:	f000 b869 	b.w	8003d10 <_fwalk_sglue>
 8003c3e:	bf00      	nop
 8003c40:	20000014 	.word	0x20000014
 8003c44:	080059e5 	.word	0x080059e5
 8003c48:	20000020 	.word	0x20000020

08003c4c <cleanup_stdio>:
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <cleanup_stdio+0x34>)
 8003c50:	4299      	cmp	r1, r3
 8003c52:	b510      	push	{r4, lr}
 8003c54:	4604      	mov	r4, r0
 8003c56:	d001      	beq.n	8003c5c <cleanup_stdio+0x10>
 8003c58:	f001 fec4 	bl	80059e4 <_fclose_r>
 8003c5c:	68a1      	ldr	r1, [r4, #8]
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <cleanup_stdio+0x38>)
 8003c60:	4299      	cmp	r1, r3
 8003c62:	d002      	beq.n	8003c6a <cleanup_stdio+0x1e>
 8003c64:	4620      	mov	r0, r4
 8003c66:	f001 febd 	bl	80059e4 <_fclose_r>
 8003c6a:	68e1      	ldr	r1, [r4, #12]
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <cleanup_stdio+0x3c>)
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d004      	beq.n	8003c7c <cleanup_stdio+0x30>
 8003c72:	4620      	mov	r0, r4
 8003c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c78:	f001 beb4 	b.w	80059e4 <_fclose_r>
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000098c 	.word	0x2000098c
 8003c84:	200009f4 	.word	0x200009f4
 8003c88:	20000a5c 	.word	0x20000a5c

08003c8c <global_stdio_init.part.0>:
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <global_stdio_init.part.0+0x30>)
 8003c90:	4c0b      	ldr	r4, [pc, #44]	; (8003cc0 <global_stdio_init.part.0+0x34>)
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <global_stdio_init.part.0+0x38>)
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	4620      	mov	r0, r4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	f7ff ff94 	bl	8003bc8 <std>
 8003ca0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2109      	movs	r1, #9
 8003ca8:	f7ff ff8e 	bl	8003bc8 <std>
 8003cac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb6:	2112      	movs	r1, #18
 8003cb8:	f7ff bf86 	b.w	8003bc8 <std>
 8003cbc:	20000ac4 	.word	0x20000ac4
 8003cc0:	2000098c 	.word	0x2000098c
 8003cc4:	08003c35 	.word	0x08003c35

08003cc8 <__sfp_lock_acquire>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__sfp_lock_acquire+0x8>)
 8003cca:	f000 b931 	b.w	8003f30 <__retarget_lock_acquire_recursive>
 8003cce:	bf00      	nop
 8003cd0:	20000ace 	.word	0x20000ace

08003cd4 <__sfp_lock_release>:
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <__sfp_lock_release+0x8>)
 8003cd6:	f000 b92c 	b.w	8003f32 <__retarget_lock_release_recursive>
 8003cda:	bf00      	nop
 8003cdc:	20000ace 	.word	0x20000ace

08003ce0 <__sinit>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	f7ff fff0 	bl	8003cc8 <__sfp_lock_acquire>
 8003ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cea:	b11b      	cbz	r3, 8003cf4 <__sinit+0x14>
 8003cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf0:	f7ff bff0 	b.w	8003cd4 <__sfp_lock_release>
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <__sinit+0x28>)
 8003cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__sinit+0x2c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f5      	bne.n	8003cec <__sinit+0xc>
 8003d00:	f7ff ffc4 	bl	8003c8c <global_stdio_init.part.0>
 8003d04:	e7f2      	b.n	8003cec <__sinit+0xc>
 8003d06:	bf00      	nop
 8003d08:	08003c4d 	.word	0x08003c4d
 8003d0c:	20000ac4 	.word	0x20000ac4

08003d10 <_fwalk_sglue>:
 8003d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d14:	4607      	mov	r7, r0
 8003d16:	4688      	mov	r8, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d20:	f1b9 0901 	subs.w	r9, r9, #1
 8003d24:	d505      	bpl.n	8003d32 <_fwalk_sglue+0x22>
 8003d26:	6824      	ldr	r4, [r4, #0]
 8003d28:	2c00      	cmp	r4, #0
 8003d2a:	d1f7      	bne.n	8003d1c <_fwalk_sglue+0xc>
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d32:	89ab      	ldrh	r3, [r5, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d907      	bls.n	8003d48 <_fwalk_sglue+0x38>
 8003d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	d003      	beq.n	8003d48 <_fwalk_sglue+0x38>
 8003d40:	4629      	mov	r1, r5
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c0      	blx	r8
 8003d46:	4306      	orrs	r6, r0
 8003d48:	3568      	adds	r5, #104	; 0x68
 8003d4a:	e7e9      	b.n	8003d20 <_fwalk_sglue+0x10>

08003d4c <snprintf>:
 8003d4c:	b40c      	push	{r2, r3}
 8003d4e:	b530      	push	{r4, r5, lr}
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <snprintf+0x64>)
 8003d52:	1e0c      	subs	r4, r1, #0
 8003d54:	681d      	ldr	r5, [r3, #0]
 8003d56:	b09d      	sub	sp, #116	; 0x74
 8003d58:	da08      	bge.n	8003d6c <snprintf+0x20>
 8003d5a:	238b      	movs	r3, #139	; 0x8b
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	b01d      	add	sp, #116	; 0x74
 8003d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d68:	b002      	add	sp, #8
 8003d6a:	4770      	bx	lr
 8003d6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d74:	bf14      	ite	ne
 8003d76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d7a:	4623      	moveq	r3, r4
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	9307      	str	r3, [sp, #28]
 8003d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	9006      	str	r0, [sp, #24]
 8003d88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d8e:	ab21      	add	r3, sp, #132	; 0x84
 8003d90:	a902      	add	r1, sp, #8
 8003d92:	4628      	mov	r0, r5
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	f000 fc37 	bl	8004608 <_svfprintf_r>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	bfbc      	itt	lt
 8003d9e:	238b      	movlt	r3, #139	; 0x8b
 8003da0:	602b      	strlt	r3, [r5, #0]
 8003da2:	2c00      	cmp	r4, #0
 8003da4:	d0dd      	beq.n	8003d62 <snprintf+0x16>
 8003da6:	9b02      	ldr	r3, [sp, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e7d9      	b.n	8003d62 <snprintf+0x16>
 8003dae:	bf00      	nop
 8003db0:	20000140 	.word	0x20000140

08003db4 <__sread>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	460c      	mov	r4, r1
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	f000 f868 	bl	8003e90 <_read_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	bfab      	itete	ge
 8003dc4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8003dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc8:	181b      	addge	r3, r3, r0
 8003dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dce:	bfac      	ite	ge
 8003dd0:	6523      	strge	r3, [r4, #80]	; 0x50
 8003dd2:	81a3      	strhlt	r3, [r4, #12]
 8003dd4:	bd10      	pop	{r4, pc}

08003dd6 <__swrite>:
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	461f      	mov	r7, r3
 8003ddc:	898b      	ldrh	r3, [r1, #12]
 8003dde:	05db      	lsls	r3, r3, #23
 8003de0:	4605      	mov	r5, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	4616      	mov	r6, r2
 8003de6:	d505      	bpl.n	8003df4 <__swrite+0x1e>
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	2302      	movs	r3, #2
 8003dee:	2200      	movs	r2, #0
 8003df0:	f000 f83c 	bl	8003e6c <_lseek_r>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	4632      	mov	r2, r6
 8003e02:	463b      	mov	r3, r7
 8003e04:	4628      	mov	r0, r5
 8003e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0a:	f000 b853 	b.w	8003eb4 <_write_r>

08003e0e <__sseek>:
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	460c      	mov	r4, r1
 8003e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e16:	f000 f829 	bl	8003e6c <_lseek_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	bf15      	itete	ne
 8003e20:	6520      	strne	r0, [r4, #80]	; 0x50
 8003e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e2a:	81a3      	strheq	r3, [r4, #12]
 8003e2c:	bf18      	it	ne
 8003e2e:	81a3      	strhne	r3, [r4, #12]
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <__sclose>:
 8003e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e36:	f000 b809 	b.w	8003e4c <_close_r>

08003e3a <memset>:
 8003e3a:	4402      	add	r2, r0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <_close_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4d06      	ldr	r5, [pc, #24]	; (8003e68 <_close_r+0x1c>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fe f8bd 	bl	8001fd6 <_close>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_close_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_close_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000ac8 	.word	0x20000ac8

08003e6c <_lseek_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d07      	ldr	r5, [pc, #28]	; (8003e8c <_lseek_r+0x20>)
 8003e70:	4604      	mov	r4, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fe f8d2 	bl	8002024 <_lseek>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_lseek_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_lseek_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000ac8 	.word	0x20000ac8

08003e90 <_read_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4d07      	ldr	r5, [pc, #28]	; (8003eb0 <_read_r+0x20>)
 8003e94:	4604      	mov	r4, r0
 8003e96:	4608      	mov	r0, r1
 8003e98:	4611      	mov	r1, r2
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	602a      	str	r2, [r5, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f7fe f860 	bl	8001f64 <_read>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_read_r+0x1e>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_read_r+0x1e>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000ac8 	.word	0x20000ac8

08003eb4 <_write_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d07      	ldr	r5, [pc, #28]	; (8003ed4 <_write_r+0x20>)
 8003eb8:	4604      	mov	r4, r0
 8003eba:	4608      	mov	r0, r1
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fe f86b 	bl	8001f9e <_write>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_write_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_write_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000ac8 	.word	0x20000ac8

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000140 	.word	0x20000140

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4d0d      	ldr	r5, [pc, #52]	; (8003f1c <__libc_init_array+0x38>)
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <__libc_init_array+0x3c>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	2600      	movs	r6, #0
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	4d0b      	ldr	r5, [pc, #44]	; (8003f24 <__libc_init_array+0x40>)
 8003ef6:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <__libc_init_array+0x44>)
 8003ef8:	f004 fbe6 	bl	80086c8 <_init>
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	2600      	movs	r6, #0
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	0800a4d4 	.word	0x0800a4d4
 8003f20:	0800a4d4 	.word	0x0800a4d4
 8003f24:	0800a4d4 	.word	0x0800a4d4
 8003f28:	0800a4dc 	.word	0x0800a4dc

08003f2c <__retarget_lock_init_recursive>:
 8003f2c:	4770      	bx	lr

08003f2e <__retarget_lock_close_recursive>:
 8003f2e:	4770      	bx	lr

08003f30 <__retarget_lock_acquire_recursive>:
 8003f30:	4770      	bx	lr

08003f32 <__retarget_lock_release_recursive>:
 8003f32:	4770      	bx	lr

08003f34 <register_fini>:
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <register_fini+0xc>)
 8003f36:	b113      	cbz	r3, 8003f3e <register_fini+0xa>
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <register_fini+0x10>)
 8003f3a:	f000 b805 	b.w	8003f48 <atexit>
 8003f3e:	4770      	bx	lr
 8003f40:	00000000 	.word	0x00000000
 8003f44:	08005c49 	.word	0x08005c49

08003f48 <atexit>:
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 bed2 	b.w	8005cf8 <__register_exitproc>

08003f54 <_malloc_trim_r>:
 8003f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f58:	4606      	mov	r6, r0
 8003f5a:	2008      	movs	r0, #8
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	f001 fe87 	bl	8005c70 <sysconf>
 8003f62:	4f23      	ldr	r7, [pc, #140]	; (8003ff0 <_malloc_trim_r+0x9c>)
 8003f64:	4680      	mov	r8, r0
 8003f66:	4630      	mov	r0, r6
 8003f68:	f000 fb42 	bl	80045f0 <__malloc_lock>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	685d      	ldr	r5, [r3, #4]
 8003f70:	f025 0503 	bic.w	r5, r5, #3
 8003f74:	1b2c      	subs	r4, r5, r4
 8003f76:	3c11      	subs	r4, #17
 8003f78:	4444      	add	r4, r8
 8003f7a:	fbb4 f4f8 	udiv	r4, r4, r8
 8003f7e:	3c01      	subs	r4, #1
 8003f80:	fb08 f404 	mul.w	r4, r8, r4
 8003f84:	45a0      	cmp	r8, r4
 8003f86:	dd05      	ble.n	8003f94 <_malloc_trim_r+0x40>
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f000 fb37 	bl	80045fc <__malloc_unlock>
 8003f8e:	2000      	movs	r0, #0
 8003f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f94:	2100      	movs	r1, #0
 8003f96:	4630      	mov	r0, r6
 8003f98:	f001 fe46 	bl	8005c28 <_sbrk_r>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	442b      	add	r3, r5
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	d1f1      	bne.n	8003f88 <_malloc_trim_r+0x34>
 8003fa4:	4261      	negs	r1, r4
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f001 fe3e 	bl	8005c28 <_sbrk_r>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d110      	bne.n	8003fd2 <_malloc_trim_r+0x7e>
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f001 fe38 	bl	8005c28 <_sbrk_r>
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	1a83      	subs	r3, r0, r2
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	dde3      	ble.n	8003f88 <_malloc_trim_r+0x34>
 8003fc0:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <_malloc_trim_r+0xa0>)
 8003fc2:	6809      	ldr	r1, [r1, #0]
 8003fc4:	1a40      	subs	r0, r0, r1
 8003fc6:	490c      	ldr	r1, [pc, #48]	; (8003ff8 <_malloc_trim_r+0xa4>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6008      	str	r0, [r1, #0]
 8003fce:	6053      	str	r3, [r2, #4]
 8003fd0:	e7da      	b.n	8003f88 <_malloc_trim_r+0x34>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <_malloc_trim_r+0xa4>)
 8003fd6:	1b2d      	subs	r5, r5, r4
 8003fd8:	f045 0501 	orr.w	r5, r5, #1
 8003fdc:	605d      	str	r5, [r3, #4]
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	1b1b      	subs	r3, r3, r4
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	f000 fb09 	bl	80045fc <__malloc_unlock>
 8003fea:	2001      	movs	r0, #1
 8003fec:	e7d0      	b.n	8003f90 <_malloc_trim_r+0x3c>
 8003fee:	bf00      	nop
 8003ff0:	20000148 	.word	0x20000148
 8003ff4:	20000550 	.word	0x20000550
 8003ff8:	20000ad4 	.word	0x20000ad4

08003ffc <_free_r>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	460f      	mov	r7, r1
 8004002:	2900      	cmp	r1, #0
 8004004:	f000 80b1 	beq.w	800416a <_free_r+0x16e>
 8004008:	f000 faf2 	bl	80045f0 <__malloc_lock>
 800400c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8004010:	4856      	ldr	r0, [pc, #344]	; (800416c <_free_r+0x170>)
 8004012:	f022 0401 	bic.w	r4, r2, #1
 8004016:	f1a7 0308 	sub.w	r3, r7, #8
 800401a:	eb03 0c04 	add.w	ip, r3, r4
 800401e:	6881      	ldr	r1, [r0, #8]
 8004020:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004024:	4561      	cmp	r1, ip
 8004026:	f026 0603 	bic.w	r6, r6, #3
 800402a:	f002 0201 	and.w	r2, r2, #1
 800402e:	d11b      	bne.n	8004068 <_free_r+0x6c>
 8004030:	4426      	add	r6, r4
 8004032:	b93a      	cbnz	r2, 8004044 <_free_r+0x48>
 8004034:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	4416      	add	r6, r2
 800403c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004040:	60ca      	str	r2, [r1, #12]
 8004042:	6091      	str	r1, [r2, #8]
 8004044:	f046 0201 	orr.w	r2, r6, #1
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	6083      	str	r3, [r0, #8]
 800404c:	4b48      	ldr	r3, [pc, #288]	; (8004170 <_free_r+0x174>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	42b3      	cmp	r3, r6
 8004052:	d804      	bhi.n	800405e <_free_r+0x62>
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <_free_r+0x178>)
 8004056:	4628      	mov	r0, r5
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	f7ff ff7b 	bl	8003f54 <_malloc_trim_r>
 800405e:	4628      	mov	r0, r5
 8004060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004064:	f000 baca 	b.w	80045fc <__malloc_unlock>
 8004068:	f8cc 6004 	str.w	r6, [ip, #4]
 800406c:	2a00      	cmp	r2, #0
 800406e:	d138      	bne.n	80040e2 <_free_r+0xe6>
 8004070:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8004074:	1a5b      	subs	r3, r3, r1
 8004076:	440c      	add	r4, r1
 8004078:	6899      	ldr	r1, [r3, #8]
 800407a:	f100 0708 	add.w	r7, r0, #8
 800407e:	42b9      	cmp	r1, r7
 8004080:	d031      	beq.n	80040e6 <_free_r+0xea>
 8004082:	68df      	ldr	r7, [r3, #12]
 8004084:	60cf      	str	r7, [r1, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	eb0c 0106 	add.w	r1, ip, r6
 800408c:	6849      	ldr	r1, [r1, #4]
 800408e:	07c9      	lsls	r1, r1, #31
 8004090:	d40b      	bmi.n	80040aa <_free_r+0xae>
 8004092:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004096:	4434      	add	r4, r6
 8004098:	bb3a      	cbnz	r2, 80040ea <_free_r+0xee>
 800409a:	4e37      	ldr	r6, [pc, #220]	; (8004178 <_free_r+0x17c>)
 800409c:	42b1      	cmp	r1, r6
 800409e:	d124      	bne.n	80040ea <_free_r+0xee>
 80040a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040a4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f044 0101 	orr.w	r1, r4, #1
 80040ae:	6059      	str	r1, [r3, #4]
 80040b0:	511c      	str	r4, [r3, r4]
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	d1d3      	bne.n	800405e <_free_r+0x62>
 80040b6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80040ba:	d21b      	bcs.n	80040f4 <_free_r+0xf8>
 80040bc:	08e2      	lsrs	r2, r4, #3
 80040be:	2101      	movs	r1, #1
 80040c0:	0964      	lsrs	r4, r4, #5
 80040c2:	40a1      	lsls	r1, r4
 80040c4:	6844      	ldr	r4, [r0, #4]
 80040c6:	3201      	adds	r2, #1
 80040c8:	4321      	orrs	r1, r4
 80040ca:	6041      	str	r1, [r0, #4]
 80040cc:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80040d0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80040d4:	3908      	subs	r1, #8
 80040d6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80040da:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80040de:	60e3      	str	r3, [r4, #12]
 80040e0:	e7bd      	b.n	800405e <_free_r+0x62>
 80040e2:	2200      	movs	r2, #0
 80040e4:	e7d0      	b.n	8004088 <_free_r+0x8c>
 80040e6:	2201      	movs	r2, #1
 80040e8:	e7ce      	b.n	8004088 <_free_r+0x8c>
 80040ea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80040ee:	60ce      	str	r6, [r1, #12]
 80040f0:	60b1      	str	r1, [r6, #8]
 80040f2:	e7da      	b.n	80040aa <_free_r+0xae>
 80040f4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80040f8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80040fc:	d214      	bcs.n	8004128 <_free_r+0x12c>
 80040fe:	09a2      	lsrs	r2, r4, #6
 8004100:	3238      	adds	r2, #56	; 0x38
 8004102:	1c51      	adds	r1, r2, #1
 8004104:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8004108:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800410c:	428e      	cmp	r6, r1
 800410e:	d125      	bne.n	800415c <_free_r+0x160>
 8004110:	2401      	movs	r4, #1
 8004112:	1092      	asrs	r2, r2, #2
 8004114:	fa04 f202 	lsl.w	r2, r4, r2
 8004118:	6844      	ldr	r4, [r0, #4]
 800411a:	4322      	orrs	r2, r4
 800411c:	6042      	str	r2, [r0, #4]
 800411e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004122:	60b3      	str	r3, [r6, #8]
 8004124:	60cb      	str	r3, [r1, #12]
 8004126:	e79a      	b.n	800405e <_free_r+0x62>
 8004128:	2a14      	cmp	r2, #20
 800412a:	d801      	bhi.n	8004130 <_free_r+0x134>
 800412c:	325b      	adds	r2, #91	; 0x5b
 800412e:	e7e8      	b.n	8004102 <_free_r+0x106>
 8004130:	2a54      	cmp	r2, #84	; 0x54
 8004132:	d802      	bhi.n	800413a <_free_r+0x13e>
 8004134:	0b22      	lsrs	r2, r4, #12
 8004136:	326e      	adds	r2, #110	; 0x6e
 8004138:	e7e3      	b.n	8004102 <_free_r+0x106>
 800413a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800413e:	d802      	bhi.n	8004146 <_free_r+0x14a>
 8004140:	0be2      	lsrs	r2, r4, #15
 8004142:	3277      	adds	r2, #119	; 0x77
 8004144:	e7dd      	b.n	8004102 <_free_r+0x106>
 8004146:	f240 5154 	movw	r1, #1364	; 0x554
 800414a:	428a      	cmp	r2, r1
 800414c:	bf9a      	itte	ls
 800414e:	0ca2      	lsrls	r2, r4, #18
 8004150:	327c      	addls	r2, #124	; 0x7c
 8004152:	227e      	movhi	r2, #126	; 0x7e
 8004154:	e7d5      	b.n	8004102 <_free_r+0x106>
 8004156:	6889      	ldr	r1, [r1, #8]
 8004158:	428e      	cmp	r6, r1
 800415a:	d004      	beq.n	8004166 <_free_r+0x16a>
 800415c:	684a      	ldr	r2, [r1, #4]
 800415e:	f022 0203 	bic.w	r2, r2, #3
 8004162:	42a2      	cmp	r2, r4
 8004164:	d8f7      	bhi.n	8004156 <_free_r+0x15a>
 8004166:	68ce      	ldr	r6, [r1, #12]
 8004168:	e7d9      	b.n	800411e <_free_r+0x122>
 800416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416c:	20000148 	.word	0x20000148
 8004170:	20000554 	.word	0x20000554
 8004174:	20000b04 	.word	0x20000b04
 8004178:	20000150 	.word	0x20000150

0800417c <_malloc_r>:
 800417c:	f101 030b 	add.w	r3, r1, #11
 8004180:	2b16      	cmp	r3, #22
 8004182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	d906      	bls.n	8004198 <_malloc_r+0x1c>
 800418a:	f033 0707 	bics.w	r7, r3, #7
 800418e:	d504      	bpl.n	800419a <_malloc_r+0x1e>
 8004190:	230c      	movs	r3, #12
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	2400      	movs	r4, #0
 8004196:	e1a3      	b.n	80044e0 <_malloc_r+0x364>
 8004198:	2710      	movs	r7, #16
 800419a:	42b9      	cmp	r1, r7
 800419c:	d8f8      	bhi.n	8004190 <_malloc_r+0x14>
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fa26 	bl	80045f0 <__malloc_lock>
 80041a4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80041a8:	4eaf      	ldr	r6, [pc, #700]	; (8004468 <_malloc_r+0x2ec>)
 80041aa:	d237      	bcs.n	800421c <_malloc_r+0xa0>
 80041ac:	f107 0208 	add.w	r2, r7, #8
 80041b0:	4432      	add	r2, r6
 80041b2:	f1a2 0108 	sub.w	r1, r2, #8
 80041b6:	6854      	ldr	r4, [r2, #4]
 80041b8:	428c      	cmp	r4, r1
 80041ba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80041be:	d102      	bne.n	80041c6 <_malloc_r+0x4a>
 80041c0:	68d4      	ldr	r4, [r2, #12]
 80041c2:	42a2      	cmp	r2, r4
 80041c4:	d010      	beq.n	80041e8 <_malloc_r+0x6c>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80041cc:	f023 0303 	bic.w	r3, r3, #3
 80041d0:	60ca      	str	r2, [r1, #12]
 80041d2:	4423      	add	r3, r4
 80041d4:	6091      	str	r1, [r2, #8]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 fa0c 	bl	80045fc <__malloc_unlock>
 80041e4:	3408      	adds	r4, #8
 80041e6:	e17b      	b.n	80044e0 <_malloc_r+0x364>
 80041e8:	3302      	adds	r3, #2
 80041ea:	6934      	ldr	r4, [r6, #16]
 80041ec:	499f      	ldr	r1, [pc, #636]	; (800446c <_malloc_r+0x2f0>)
 80041ee:	428c      	cmp	r4, r1
 80041f0:	d077      	beq.n	80042e2 <_malloc_r+0x166>
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	f022 0c03 	bic.w	ip, r2, #3
 80041f8:	ebac 0007 	sub.w	r0, ip, r7
 80041fc:	280f      	cmp	r0, #15
 80041fe:	dd48      	ble.n	8004292 <_malloc_r+0x116>
 8004200:	19e2      	adds	r2, r4, r7
 8004202:	f040 0301 	orr.w	r3, r0, #1
 8004206:	f047 0701 	orr.w	r7, r7, #1
 800420a:	6067      	str	r7, [r4, #4]
 800420c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8004210:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8004214:	6053      	str	r3, [r2, #4]
 8004216:	f844 000c 	str.w	r0, [r4, ip]
 800421a:	e7e0      	b.n	80041de <_malloc_r+0x62>
 800421c:	0a7b      	lsrs	r3, r7, #9
 800421e:	d02a      	beq.n	8004276 <_malloc_r+0xfa>
 8004220:	2b04      	cmp	r3, #4
 8004222:	d812      	bhi.n	800424a <_malloc_r+0xce>
 8004224:	09bb      	lsrs	r3, r7, #6
 8004226:	3338      	adds	r3, #56	; 0x38
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800422e:	f1a2 0c08 	sub.w	ip, r2, #8
 8004232:	6854      	ldr	r4, [r2, #4]
 8004234:	4564      	cmp	r4, ip
 8004236:	d006      	beq.n	8004246 <_malloc_r+0xca>
 8004238:	6862      	ldr	r2, [r4, #4]
 800423a:	f022 0203 	bic.w	r2, r2, #3
 800423e:	1bd0      	subs	r0, r2, r7
 8004240:	280f      	cmp	r0, #15
 8004242:	dd1c      	ble.n	800427e <_malloc_r+0x102>
 8004244:	3b01      	subs	r3, #1
 8004246:	3301      	adds	r3, #1
 8004248:	e7cf      	b.n	80041ea <_malloc_r+0x6e>
 800424a:	2b14      	cmp	r3, #20
 800424c:	d801      	bhi.n	8004252 <_malloc_r+0xd6>
 800424e:	335b      	adds	r3, #91	; 0x5b
 8004250:	e7ea      	b.n	8004228 <_malloc_r+0xac>
 8004252:	2b54      	cmp	r3, #84	; 0x54
 8004254:	d802      	bhi.n	800425c <_malloc_r+0xe0>
 8004256:	0b3b      	lsrs	r3, r7, #12
 8004258:	336e      	adds	r3, #110	; 0x6e
 800425a:	e7e5      	b.n	8004228 <_malloc_r+0xac>
 800425c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004260:	d802      	bhi.n	8004268 <_malloc_r+0xec>
 8004262:	0bfb      	lsrs	r3, r7, #15
 8004264:	3377      	adds	r3, #119	; 0x77
 8004266:	e7df      	b.n	8004228 <_malloc_r+0xac>
 8004268:	f240 5254 	movw	r2, #1364	; 0x554
 800426c:	4293      	cmp	r3, r2
 800426e:	d804      	bhi.n	800427a <_malloc_r+0xfe>
 8004270:	0cbb      	lsrs	r3, r7, #18
 8004272:	337c      	adds	r3, #124	; 0x7c
 8004274:	e7d8      	b.n	8004228 <_malloc_r+0xac>
 8004276:	233f      	movs	r3, #63	; 0x3f
 8004278:	e7d6      	b.n	8004228 <_malloc_r+0xac>
 800427a:	237e      	movs	r3, #126	; 0x7e
 800427c:	e7d4      	b.n	8004228 <_malloc_r+0xac>
 800427e:	2800      	cmp	r0, #0
 8004280:	68e1      	ldr	r1, [r4, #12]
 8004282:	db04      	blt.n	800428e <_malloc_r+0x112>
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	60d9      	str	r1, [r3, #12]
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	18a3      	adds	r3, r4, r2
 800428c:	e7a3      	b.n	80041d6 <_malloc_r+0x5a>
 800428e:	460c      	mov	r4, r1
 8004290:	e7d0      	b.n	8004234 <_malloc_r+0xb8>
 8004292:	2800      	cmp	r0, #0
 8004294:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8004298:	db07      	blt.n	80042aa <_malloc_r+0x12e>
 800429a:	44a4      	add	ip, r4
 800429c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	f8cc 3004 	str.w	r3, [ip, #4]
 80042a8:	e799      	b.n	80041de <_malloc_r+0x62>
 80042aa:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80042ae:	6870      	ldr	r0, [r6, #4]
 80042b0:	f080 8095 	bcs.w	80043de <_malloc_r+0x262>
 80042b4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80042b8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80042bc:	f04f 0c01 	mov.w	ip, #1
 80042c0:	3201      	adds	r2, #1
 80042c2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80042c6:	ea4c 0000 	orr.w	r0, ip, r0
 80042ca:	6070      	str	r0, [r6, #4]
 80042cc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80042d0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80042d4:	3808      	subs	r0, #8
 80042d6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80042da:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80042de:	f8cc 400c 	str.w	r4, [ip, #12]
 80042e2:	1098      	asrs	r0, r3, #2
 80042e4:	2201      	movs	r2, #1
 80042e6:	4082      	lsls	r2, r0
 80042e8:	6870      	ldr	r0, [r6, #4]
 80042ea:	4290      	cmp	r0, r2
 80042ec:	d326      	bcc.n	800433c <_malloc_r+0x1c0>
 80042ee:	4210      	tst	r0, r2
 80042f0:	d106      	bne.n	8004300 <_malloc_r+0x184>
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	0052      	lsls	r2, r2, #1
 80042f8:	4210      	tst	r0, r2
 80042fa:	f103 0304 	add.w	r3, r3, #4
 80042fe:	d0fa      	beq.n	80042f6 <_malloc_r+0x17a>
 8004300:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8004304:	46c1      	mov	r9, r8
 8004306:	469e      	mov	lr, r3
 8004308:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800430c:	454c      	cmp	r4, r9
 800430e:	f040 80b9 	bne.w	8004484 <_malloc_r+0x308>
 8004312:	f10e 0e01 	add.w	lr, lr, #1
 8004316:	f01e 0f03 	tst.w	lr, #3
 800431a:	f109 0908 	add.w	r9, r9, #8
 800431e:	d1f3      	bne.n	8004308 <_malloc_r+0x18c>
 8004320:	0798      	lsls	r0, r3, #30
 8004322:	f040 80e3 	bne.w	80044ec <_malloc_r+0x370>
 8004326:	6873      	ldr	r3, [r6, #4]
 8004328:	ea23 0302 	bic.w	r3, r3, r2
 800432c:	6073      	str	r3, [r6, #4]
 800432e:	6870      	ldr	r0, [r6, #4]
 8004330:	0052      	lsls	r2, r2, #1
 8004332:	4290      	cmp	r0, r2
 8004334:	d302      	bcc.n	800433c <_malloc_r+0x1c0>
 8004336:	2a00      	cmp	r2, #0
 8004338:	f040 80e5 	bne.w	8004506 <_malloc_r+0x38a>
 800433c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8004340:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004344:	f023 0903 	bic.w	r9, r3, #3
 8004348:	45b9      	cmp	r9, r7
 800434a:	d304      	bcc.n	8004356 <_malloc_r+0x1da>
 800434c:	eba9 0207 	sub.w	r2, r9, r7
 8004350:	2a0f      	cmp	r2, #15
 8004352:	f300 8141 	bgt.w	80045d8 <_malloc_r+0x45c>
 8004356:	4b46      	ldr	r3, [pc, #280]	; (8004470 <_malloc_r+0x2f4>)
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	3110      	adds	r1, #16
 800435c:	4439      	add	r1, r7
 800435e:	2008      	movs	r0, #8
 8004360:	9101      	str	r1, [sp, #4]
 8004362:	f001 fc85 	bl	8005c70 <sysconf>
 8004366:	4a43      	ldr	r2, [pc, #268]	; (8004474 <_malloc_r+0x2f8>)
 8004368:	9901      	ldr	r1, [sp, #4]
 800436a:	6813      	ldr	r3, [r2, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	bf1f      	itttt	ne
 8004370:	f101 31ff 	addne.w	r1, r1, #4294967295
 8004374:	1809      	addne	r1, r1, r0
 8004376:	4243      	negne	r3, r0
 8004378:	4019      	andne	r1, r3
 800437a:	4680      	mov	r8, r0
 800437c:	4628      	mov	r0, r5
 800437e:	9101      	str	r1, [sp, #4]
 8004380:	f001 fc52 	bl	8005c28 <_sbrk_r>
 8004384:	1c42      	adds	r2, r0, #1
 8004386:	eb0a 0b09 	add.w	fp, sl, r9
 800438a:	4604      	mov	r4, r0
 800438c:	f000 80f7 	beq.w	800457e <_malloc_r+0x402>
 8004390:	4583      	cmp	fp, r0
 8004392:	9901      	ldr	r1, [sp, #4]
 8004394:	4a37      	ldr	r2, [pc, #220]	; (8004474 <_malloc_r+0x2f8>)
 8004396:	d902      	bls.n	800439e <_malloc_r+0x222>
 8004398:	45b2      	cmp	sl, r6
 800439a:	f040 80f0 	bne.w	800457e <_malloc_r+0x402>
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <_malloc_r+0x2fc>)
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	45a3      	cmp	fp, r4
 80043a4:	eb00 0e01 	add.w	lr, r0, r1
 80043a8:	f8c3 e000 	str.w	lr, [r3]
 80043ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80043b0:	f040 80ab 	bne.w	800450a <_malloc_r+0x38e>
 80043b4:	ea1b 0f0c 	tst.w	fp, ip
 80043b8:	f040 80a7 	bne.w	800450a <_malloc_r+0x38e>
 80043bc:	68b2      	ldr	r2, [r6, #8]
 80043be:	4449      	add	r1, r9
 80043c0:	f041 0101 	orr.w	r1, r1, #1
 80043c4:	6051      	str	r1, [r2, #4]
 80043c6:	4a2d      	ldr	r2, [pc, #180]	; (800447c <_malloc_r+0x300>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6811      	ldr	r1, [r2, #0]
 80043cc:	428b      	cmp	r3, r1
 80043ce:	bf88      	it	hi
 80043d0:	6013      	strhi	r3, [r2, #0]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <_malloc_r+0x304>)
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	428b      	cmp	r3, r1
 80043d8:	bf88      	it	hi
 80043da:	6013      	strhi	r3, [r2, #0]
 80043dc:	e0cf      	b.n	800457e <_malloc_r+0x402>
 80043de:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80043e2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80043e6:	d218      	bcs.n	800441a <_malloc_r+0x29e>
 80043e8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80043ec:	3238      	adds	r2, #56	; 0x38
 80043ee:	f102 0e01 	add.w	lr, r2, #1
 80043f2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80043f6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80043fa:	45f0      	cmp	r8, lr
 80043fc:	d12b      	bne.n	8004456 <_malloc_r+0x2da>
 80043fe:	1092      	asrs	r2, r2, #2
 8004400:	f04f 0c01 	mov.w	ip, #1
 8004404:	fa0c f202 	lsl.w	r2, ip, r2
 8004408:	4302      	orrs	r2, r0
 800440a:	6072      	str	r2, [r6, #4]
 800440c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8004410:	f8c8 4008 	str.w	r4, [r8, #8]
 8004414:	f8ce 400c 	str.w	r4, [lr, #12]
 8004418:	e763      	b.n	80042e2 <_malloc_r+0x166>
 800441a:	2a14      	cmp	r2, #20
 800441c:	d801      	bhi.n	8004422 <_malloc_r+0x2a6>
 800441e:	325b      	adds	r2, #91	; 0x5b
 8004420:	e7e5      	b.n	80043ee <_malloc_r+0x272>
 8004422:	2a54      	cmp	r2, #84	; 0x54
 8004424:	d803      	bhi.n	800442e <_malloc_r+0x2b2>
 8004426:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800442a:	326e      	adds	r2, #110	; 0x6e
 800442c:	e7df      	b.n	80043ee <_malloc_r+0x272>
 800442e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004432:	d803      	bhi.n	800443c <_malloc_r+0x2c0>
 8004434:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8004438:	3277      	adds	r2, #119	; 0x77
 800443a:	e7d8      	b.n	80043ee <_malloc_r+0x272>
 800443c:	f240 5e54 	movw	lr, #1364	; 0x554
 8004440:	4572      	cmp	r2, lr
 8004442:	bf9a      	itte	ls
 8004444:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8004448:	327c      	addls	r2, #124	; 0x7c
 800444a:	227e      	movhi	r2, #126	; 0x7e
 800444c:	e7cf      	b.n	80043ee <_malloc_r+0x272>
 800444e:	f8de e008 	ldr.w	lr, [lr, #8]
 8004452:	45f0      	cmp	r8, lr
 8004454:	d005      	beq.n	8004462 <_malloc_r+0x2e6>
 8004456:	f8de 2004 	ldr.w	r2, [lr, #4]
 800445a:	f022 0203 	bic.w	r2, r2, #3
 800445e:	4562      	cmp	r2, ip
 8004460:	d8f5      	bhi.n	800444e <_malloc_r+0x2d2>
 8004462:	f8de 800c 	ldr.w	r8, [lr, #12]
 8004466:	e7d1      	b.n	800440c <_malloc_r+0x290>
 8004468:	20000148 	.word	0x20000148
 800446c:	20000150 	.word	0x20000150
 8004470:	20000b04 	.word	0x20000b04
 8004474:	20000550 	.word	0x20000550
 8004478:	20000ad4 	.word	0x20000ad4
 800447c:	20000afc 	.word	0x20000afc
 8004480:	20000b00 	.word	0x20000b00
 8004484:	6860      	ldr	r0, [r4, #4]
 8004486:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800448a:	f020 0003 	bic.w	r0, r0, #3
 800448e:	eba0 0a07 	sub.w	sl, r0, r7
 8004492:	f1ba 0f0f 	cmp.w	sl, #15
 8004496:	dd12      	ble.n	80044be <_malloc_r+0x342>
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	19e2      	adds	r2, r4, r7
 800449c:	f047 0701 	orr.w	r7, r7, #1
 80044a0:	6067      	str	r7, [r4, #4]
 80044a2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80044a6:	f8cc 3008 	str.w	r3, [ip, #8]
 80044aa:	f04a 0301 	orr.w	r3, sl, #1
 80044ae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80044b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80044b6:	6053      	str	r3, [r2, #4]
 80044b8:	f844 a000 	str.w	sl, [r4, r0]
 80044bc:	e68f      	b.n	80041de <_malloc_r+0x62>
 80044be:	f1ba 0f00 	cmp.w	sl, #0
 80044c2:	db11      	blt.n	80044e8 <_malloc_r+0x36c>
 80044c4:	4420      	add	r0, r4
 80044c6:	6843      	ldr	r3, [r0, #4]
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6043      	str	r3, [r0, #4]
 80044ce:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80044d2:	4628      	mov	r0, r5
 80044d4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80044d8:	f8cc 3008 	str.w	r3, [ip, #8]
 80044dc:	f000 f88e 	bl	80045fc <__malloc_unlock>
 80044e0:	4620      	mov	r0, r4
 80044e2:	b003      	add	sp, #12
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	4664      	mov	r4, ip
 80044ea:	e70f      	b.n	800430c <_malloc_r+0x190>
 80044ec:	f858 0908 	ldr.w	r0, [r8], #-8
 80044f0:	4540      	cmp	r0, r8
 80044f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044f6:	f43f af13 	beq.w	8004320 <_malloc_r+0x1a4>
 80044fa:	e718      	b.n	800432e <_malloc_r+0x1b2>
 80044fc:	3304      	adds	r3, #4
 80044fe:	0052      	lsls	r2, r2, #1
 8004500:	4210      	tst	r0, r2
 8004502:	d0fb      	beq.n	80044fc <_malloc_r+0x380>
 8004504:	e6fc      	b.n	8004300 <_malloc_r+0x184>
 8004506:	4673      	mov	r3, lr
 8004508:	e7fa      	b.n	8004500 <_malloc_r+0x384>
 800450a:	6810      	ldr	r0, [r2, #0]
 800450c:	3001      	adds	r0, #1
 800450e:	bf1b      	ittet	ne
 8004510:	eba4 0b0b 	subne.w	fp, r4, fp
 8004514:	eb0b 020e 	addne.w	r2, fp, lr
 8004518:	6014      	streq	r4, [r2, #0]
 800451a:	601a      	strne	r2, [r3, #0]
 800451c:	f014 0b07 	ands.w	fp, r4, #7
 8004520:	bf1a      	itte	ne
 8004522:	f1cb 0008 	rsbne	r0, fp, #8
 8004526:	1824      	addne	r4, r4, r0
 8004528:	4658      	moveq	r0, fp
 800452a:	1862      	adds	r2, r4, r1
 800452c:	ea02 010c 	and.w	r1, r2, ip
 8004530:	4480      	add	r8, r0
 8004532:	eba8 0801 	sub.w	r8, r8, r1
 8004536:	ea08 080c 	and.w	r8, r8, ip
 800453a:	4641      	mov	r1, r8
 800453c:	4628      	mov	r0, r5
 800453e:	9201      	str	r2, [sp, #4]
 8004540:	f001 fb72 	bl	8005c28 <_sbrk_r>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	9a01      	ldr	r2, [sp, #4]
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <_malloc_r+0x470>)
 800454a:	d107      	bne.n	800455c <_malloc_r+0x3e0>
 800454c:	f1bb 0f00 	cmp.w	fp, #0
 8004550:	d023      	beq.n	800459a <_malloc_r+0x41e>
 8004552:	f1ab 0008 	sub.w	r0, fp, #8
 8004556:	4410      	add	r0, r2
 8004558:	f04f 0800 	mov.w	r8, #0
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	60b4      	str	r4, [r6, #8]
 8004560:	1b00      	subs	r0, r0, r4
 8004562:	4440      	add	r0, r8
 8004564:	4442      	add	r2, r8
 8004566:	f040 0001 	orr.w	r0, r0, #1
 800456a:	45b2      	cmp	sl, r6
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	6060      	str	r0, [r4, #4]
 8004570:	f43f af29 	beq.w	80043c6 <_malloc_r+0x24a>
 8004574:	f1b9 0f0f 	cmp.w	r9, #15
 8004578:	d812      	bhi.n	80045a0 <_malloc_r+0x424>
 800457a:	2301      	movs	r3, #1
 800457c:	6063      	str	r3, [r4, #4]
 800457e:	68b3      	ldr	r3, [r6, #8]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	42bb      	cmp	r3, r7
 8004588:	eba3 0207 	sub.w	r2, r3, r7
 800458c:	d301      	bcc.n	8004592 <_malloc_r+0x416>
 800458e:	2a0f      	cmp	r2, #15
 8004590:	dc22      	bgt.n	80045d8 <_malloc_r+0x45c>
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f832 	bl	80045fc <__malloc_unlock>
 8004598:	e5fc      	b.n	8004194 <_malloc_r+0x18>
 800459a:	4610      	mov	r0, r2
 800459c:	46d8      	mov	r8, fp
 800459e:	e7dd      	b.n	800455c <_malloc_r+0x3e0>
 80045a0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80045a4:	f1a9 090c 	sub.w	r9, r9, #12
 80045a8:	f029 0907 	bic.w	r9, r9, #7
 80045ac:	f002 0201 	and.w	r2, r2, #1
 80045b0:	ea42 0209 	orr.w	r2, r2, r9
 80045b4:	f8ca 2004 	str.w	r2, [sl, #4]
 80045b8:	2105      	movs	r1, #5
 80045ba:	eb0a 0209 	add.w	r2, sl, r9
 80045be:	f1b9 0f0f 	cmp.w	r9, #15
 80045c2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80045c6:	f67f aefe 	bls.w	80043c6 <_malloc_r+0x24a>
 80045ca:	f10a 0108 	add.w	r1, sl, #8
 80045ce:	4628      	mov	r0, r5
 80045d0:	f7ff fd14 	bl	8003ffc <_free_r>
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_malloc_r+0x470>)
 80045d6:	e6f6      	b.n	80043c6 <_malloc_r+0x24a>
 80045d8:	68b4      	ldr	r4, [r6, #8]
 80045da:	f047 0301 	orr.w	r3, r7, #1
 80045de:	4427      	add	r7, r4
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	60b7      	str	r7, [r6, #8]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	e5f8      	b.n	80041de <_malloc_r+0x62>
 80045ec:	20000ad4 	.word	0x20000ad4

080045f0 <__malloc_lock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__malloc_lock+0x8>)
 80045f2:	f7ff bc9d 	b.w	8003f30 <__retarget_lock_acquire_recursive>
 80045f6:	bf00      	nop
 80045f8:	20000acd 	.word	0x20000acd

080045fc <__malloc_unlock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_unlock+0x8>)
 80045fe:	f7ff bc98 	b.w	8003f32 <__retarget_lock_release_recursive>
 8004602:	bf00      	nop
 8004604:	20000acd 	.word	0x20000acd

08004608 <_svfprintf_r>:
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	ed2d 8b04 	vpush	{d8-d9}
 8004610:	b0cf      	sub	sp, #316	; 0x13c
 8004612:	4689      	mov	r9, r1
 8004614:	9203      	str	r2, [sp, #12]
 8004616:	461d      	mov	r5, r3
 8004618:	4682      	mov	sl, r0
 800461a:	f001 fb01 	bl	8005c20 <_localeconv_r>
 800461e:	6803      	ldr	r3, [r0, #0]
 8004620:	9313      	str	r3, [sp, #76]	; 0x4c
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb fe2c 	bl	8000280 <strlen>
 8004628:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800462c:	900e      	str	r0, [sp, #56]	; 0x38
 800462e:	0619      	lsls	r1, r3, #24
 8004630:	d51a      	bpl.n	8004668 <_svfprintf_r+0x60>
 8004632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004636:	b9bb      	cbnz	r3, 8004668 <_svfprintf_r+0x60>
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	4650      	mov	r0, sl
 800463c:	f7ff fd9e 	bl	800417c <_malloc_r>
 8004640:	f8c9 0000 	str.w	r0, [r9]
 8004644:	f8c9 0010 	str.w	r0, [r9, #16]
 8004648:	b958      	cbnz	r0, 8004662 <_svfprintf_r+0x5a>
 800464a:	230c      	movs	r3, #12
 800464c:	f8ca 3000 	str.w	r3, [sl]
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	930b      	str	r3, [sp, #44]	; 0x2c
 8004656:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004658:	b04f      	add	sp, #316	; 0x13c
 800465a:	ecbd 8b04 	vpop	{d8-d9}
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	f8c9 3014 	str.w	r3, [r9, #20]
 8004668:	ed9f 7b91 	vldr	d7, [pc, #580]	; 80048b0 <_svfprintf_r+0x2a8>
 800466c:	2300      	movs	r3, #0
 800466e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8004672:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004676:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800467a:	ac25      	add	r4, sp, #148	; 0x94
 800467c:	9422      	str	r4, [sp, #136]	; 0x88
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
 8004682:	9311      	str	r3, [sp, #68]	; 0x44
 8004684:	9314      	str	r3, [sp, #80]	; 0x50
 8004686:	930b      	str	r3, [sp, #44]	; 0x2c
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	461e      	mov	r6, r3
 800468c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004690:	b10a      	cbz	r2, 8004696 <_svfprintf_r+0x8e>
 8004692:	2a25      	cmp	r2, #37	; 0x25
 8004694:	d1f9      	bne.n	800468a <_svfprintf_r+0x82>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1af7      	subs	r7, r6, r3
 800469a:	d00d      	beq.n	80046b8 <_svfprintf_r+0xb0>
 800469c:	e9c4 3700 	strd	r3, r7, [r4]
 80046a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046a2:	443b      	add	r3, r7
 80046a4:	9324      	str	r3, [sp, #144]	; 0x90
 80046a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046a8:	3301      	adds	r3, #1
 80046aa:	2b07      	cmp	r3, #7
 80046ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80046ae:	dc78      	bgt.n	80047a2 <_svfprintf_r+0x19a>
 80046b0:	3408      	adds	r4, #8
 80046b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b4:	443b      	add	r3, r7
 80046b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b8:	7833      	ldrb	r3, [r6, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f001 815a 	beq.w	8005974 <_svfprintf_r+0x136c>
 80046c0:	2300      	movs	r3, #0
 80046c2:	3601      	adds	r6, #1
 80046c4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80046c8:	f04f 38ff 	mov.w	r8, #4294967295
 80046cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80046ce:	469b      	mov	fp, r3
 80046d0:	270a      	movs	r7, #10
 80046d2:	212b      	movs	r1, #43	; 0x2b
 80046d4:	4633      	mov	r3, r6
 80046d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046da:	9207      	str	r2, [sp, #28]
 80046dc:	930a      	str	r3, [sp, #40]	; 0x28
 80046de:	9b07      	ldr	r3, [sp, #28]
 80046e0:	3b20      	subs	r3, #32
 80046e2:	2b5a      	cmp	r3, #90	; 0x5a
 80046e4:	f200 85c6 	bhi.w	8005274 <_svfprintf_r+0xc6c>
 80046e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046ec:	05c4007e 	.word	0x05c4007e
 80046f0:	008605c4 	.word	0x008605c4
 80046f4:	05c405c4 	.word	0x05c405c4
 80046f8:	006505c4 	.word	0x006505c4
 80046fc:	05c405c4 	.word	0x05c405c4
 8004700:	00930089 	.word	0x00930089
 8004704:	009005c4 	.word	0x009005c4
 8004708:	05c40096 	.word	0x05c40096
 800470c:	00b200af 	.word	0x00b200af
 8004710:	00b200b2 	.word	0x00b200b2
 8004714:	00b200b2 	.word	0x00b200b2
 8004718:	00b200b2 	.word	0x00b200b2
 800471c:	00b200b2 	.word	0x00b200b2
 8004720:	05c405c4 	.word	0x05c405c4
 8004724:	05c405c4 	.word	0x05c405c4
 8004728:	05c405c4 	.word	0x05c405c4
 800472c:	012905c4 	.word	0x012905c4
 8004730:	00e605c4 	.word	0x00e605c4
 8004734:	012900f9 	.word	0x012900f9
 8004738:	01290129 	.word	0x01290129
 800473c:	05c405c4 	.word	0x05c405c4
 8004740:	05c405c4 	.word	0x05c405c4
 8004744:	05c400c2 	.word	0x05c400c2
 8004748:	049105c4 	.word	0x049105c4
 800474c:	05c405c4 	.word	0x05c405c4
 8004750:	04db05c4 	.word	0x04db05c4
 8004754:	050105c4 	.word	0x050105c4
 8004758:	05c405c4 	.word	0x05c405c4
 800475c:	05c40523 	.word	0x05c40523
 8004760:	05c405c4 	.word	0x05c405c4
 8004764:	05c405c4 	.word	0x05c405c4
 8004768:	05c405c4 	.word	0x05c405c4
 800476c:	012905c4 	.word	0x012905c4
 8004770:	00e605c4 	.word	0x00e605c4
 8004774:	012900fb 	.word	0x012900fb
 8004778:	01290129 	.word	0x01290129
 800477c:	00fb00c5 	.word	0x00fb00c5
 8004780:	05c400d9 	.word	0x05c400d9
 8004784:	05c400d2 	.word	0x05c400d2
 8004788:	0493046c 	.word	0x0493046c
 800478c:	00d904ca 	.word	0x00d904ca
 8004790:	04db05c4 	.word	0x04db05c4
 8004794:	0503007c 	.word	0x0503007c
 8004798:	05c405c4 	.word	0x05c405c4
 800479c:	05c40542 	.word	0x05c40542
 80047a0:	007c      	.short	0x007c
 80047a2:	aa22      	add	r2, sp, #136	; 0x88
 80047a4:	4649      	mov	r1, r9
 80047a6:	4650      	mov	r0, sl
 80047a8:	f002 fc72 	bl	8007090 <__ssprint_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f040 8137 	bne.w	8004a20 <_svfprintf_r+0x418>
 80047b2:	ac25      	add	r4, sp, #148	; 0x94
 80047b4:	e77d      	b.n	80046b2 <_svfprintf_r+0xaa>
 80047b6:	4650      	mov	r0, sl
 80047b8:	f001 fa32 	bl	8005c20 <_localeconv_r>
 80047bc:	6843      	ldr	r3, [r0, #4]
 80047be:	9314      	str	r3, [sp, #80]	; 0x50
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb fd5d 	bl	8000280 <strlen>
 80047c6:	9011      	str	r0, [sp, #68]	; 0x44
 80047c8:	4650      	mov	r0, sl
 80047ca:	f001 fa29 	bl	8005c20 <_localeconv_r>
 80047ce:	6883      	ldr	r3, [r0, #8]
 80047d0:	9309      	str	r3, [sp, #36]	; 0x24
 80047d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047d4:	212b      	movs	r1, #43	; 0x2b
 80047d6:	b12b      	cbz	r3, 80047e4 <_svfprintf_r+0x1dc>
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	b11b      	cbz	r3, 80047e4 <_svfprintf_r+0x1dc>
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b10b      	cbz	r3, 80047e4 <_svfprintf_r+0x1dc>
 80047e0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80047e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80047e6:	e775      	b.n	80046d4 <_svfprintf_r+0xcc>
 80047e8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f9      	bne.n	80047e4 <_svfprintf_r+0x1dc>
 80047f0:	2320      	movs	r3, #32
 80047f2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80047f6:	e7f5      	b.n	80047e4 <_svfprintf_r+0x1dc>
 80047f8:	f04b 0b01 	orr.w	fp, fp, #1
 80047fc:	e7f2      	b.n	80047e4 <_svfprintf_r+0x1dc>
 80047fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004802:	930f      	str	r3, [sp, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	daed      	bge.n	80047e4 <_svfprintf_r+0x1dc>
 8004808:	425b      	negs	r3, r3
 800480a:	930f      	str	r3, [sp, #60]	; 0x3c
 800480c:	f04b 0b04 	orr.w	fp, fp, #4
 8004810:	e7e8      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004812:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8004816:	e7e5      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800481e:	9207      	str	r2, [sp, #28]
 8004820:	2a2a      	cmp	r2, #42	; 0x2a
 8004822:	d10f      	bne.n	8004844 <_svfprintf_r+0x23c>
 8004824:	f855 2b04 	ldr.w	r2, [r5], #4
 8004828:	930a      	str	r3, [sp, #40]	; 0x28
 800482a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800482e:	e7d9      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004830:	fb07 2808 	mla	r8, r7, r8, r2
 8004834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004838:	9207      	str	r2, [sp, #28]
 800483a:	9a07      	ldr	r2, [sp, #28]
 800483c:	3a30      	subs	r2, #48	; 0x30
 800483e:	2a09      	cmp	r2, #9
 8004840:	d9f6      	bls.n	8004830 <_svfprintf_r+0x228>
 8004842:	e74b      	b.n	80046dc <_svfprintf_r+0xd4>
 8004844:	f04f 0800 	mov.w	r8, #0
 8004848:	e7f7      	b.n	800483a <_svfprintf_r+0x232>
 800484a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800484e:	e7c9      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004850:	2200      	movs	r2, #0
 8004852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004854:	920f      	str	r2, [sp, #60]	; 0x3c
 8004856:	9a07      	ldr	r2, [sp, #28]
 8004858:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800485a:	3a30      	subs	r2, #48	; 0x30
 800485c:	fb07 2200 	mla	r2, r7, r0, r2
 8004860:	920f      	str	r2, [sp, #60]	; 0x3c
 8004862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004866:	9207      	str	r2, [sp, #28]
 8004868:	3a30      	subs	r2, #48	; 0x30
 800486a:	2a09      	cmp	r2, #9
 800486c:	d9f3      	bls.n	8004856 <_svfprintf_r+0x24e>
 800486e:	e735      	b.n	80046dc <_svfprintf_r+0xd4>
 8004870:	f04b 0b08 	orr.w	fp, fp, #8
 8004874:	e7b6      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b68      	cmp	r3, #104	; 0x68
 800487c:	bf01      	itttt	eq
 800487e:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8004880:	3301      	addeq	r3, #1
 8004882:	930a      	streq	r3, [sp, #40]	; 0x28
 8004884:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8004888:	bf18      	it	ne
 800488a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800488e:	e7a9      	b.n	80047e4 <_svfprintf_r+0x1dc>
 8004890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b6c      	cmp	r3, #108	; 0x6c
 8004896:	d105      	bne.n	80048a4 <_svfprintf_r+0x29c>
 8004898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489a:	3301      	adds	r3, #1
 800489c:	930a      	str	r3, [sp, #40]	; 0x28
 800489e:	f04b 0b20 	orr.w	fp, fp, #32
 80048a2:	e79f      	b.n	80047e4 <_svfprintf_r+0x1dc>
 80048a4:	f04b 0b10 	orr.w	fp, fp, #16
 80048a8:	e79c      	b.n	80047e4 <_svfprintf_r+0x1dc>
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w
	...
 80048b8:	462a      	mov	r2, r5
 80048ba:	f852 3b04 	ldr.w	r3, [r2], #4
 80048be:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80048c2:	2300      	movs	r3, #0
 80048c4:	9206      	str	r2, [sp, #24]
 80048c6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	461f      	mov	r7, r3
 80048ce:	461e      	mov	r6, r3
 80048d0:	9308      	str	r3, [sp, #32]
 80048d2:	461d      	mov	r5, r3
 80048d4:	ab35      	add	r3, sp, #212	; 0xd4
 80048d6:	f04f 0801 	mov.w	r8, #1
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	e1b9      	b.n	8004c52 <_svfprintf_r+0x64a>
 80048de:	f04b 0b10 	orr.w	fp, fp, #16
 80048e2:	f01b 0f20 	tst.w	fp, #32
 80048e6:	d012      	beq.n	800490e <_svfprintf_r+0x306>
 80048e8:	3507      	adds	r5, #7
 80048ea:	f025 0307 	bic.w	r3, r5, #7
 80048ee:	461a      	mov	r2, r3
 80048f0:	685e      	ldr	r6, [r3, #4]
 80048f2:	f852 5b08 	ldr.w	r5, [r2], #8
 80048f6:	9206      	str	r2, [sp, #24]
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	da06      	bge.n	800490a <_svfprintf_r+0x302>
 80048fc:	426d      	negs	r5, r5
 80048fe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004902:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8004906:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800490a:	2301      	movs	r3, #1
 800490c:	e392      	b.n	8005034 <_svfprintf_r+0xa2c>
 800490e:	462b      	mov	r3, r5
 8004910:	f01b 0f10 	tst.w	fp, #16
 8004914:	f853 6b04 	ldr.w	r6, [r3], #4
 8004918:	9306      	str	r3, [sp, #24]
 800491a:	d002      	beq.n	8004922 <_svfprintf_r+0x31a>
 800491c:	4635      	mov	r5, r6
 800491e:	17f6      	asrs	r6, r6, #31
 8004920:	e7ea      	b.n	80048f8 <_svfprintf_r+0x2f0>
 8004922:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004926:	d003      	beq.n	8004930 <_svfprintf_r+0x328>
 8004928:	b235      	sxth	r5, r6
 800492a:	f346 36c0 	sbfx	r6, r6, #15, #1
 800492e:	e7e3      	b.n	80048f8 <_svfprintf_r+0x2f0>
 8004930:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8004934:	d0f2      	beq.n	800491c <_svfprintf_r+0x314>
 8004936:	b275      	sxtb	r5, r6
 8004938:	f346 16c0 	sbfx	r6, r6, #7, #1
 800493c:	e7dc      	b.n	80048f8 <_svfprintf_r+0x2f0>
 800493e:	3507      	adds	r5, #7
 8004940:	f025 0307 	bic.w	r3, r5, #7
 8004944:	ecb3 7b02 	vldmia	r3!, {d7}
 8004948:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800494c:	9306      	str	r3, [sp, #24]
 800494e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004950:	ee09 3a10 	vmov	s18, r3
 8004954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800495a:	ee09 3a90 	vmov	s19, r3
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <_svfprintf_r+0x42c>)
 8004964:	ec51 0b19 	vmov	r0, r1, d9
 8004968:	f7fc f8e8 	bl	8000b3c <__aeabi_dcmpun>
 800496c:	bb18      	cbnz	r0, 80049b6 <_svfprintf_r+0x3ae>
 800496e:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <_svfprintf_r+0x42c>)
 8004970:	ec51 0b19 	vmov	r0, r1, d9
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	f7fc f8c2 	bl	8000b00 <__aeabi_dcmple>
 800497c:	b9d8      	cbnz	r0, 80049b6 <_svfprintf_r+0x3ae>
 800497e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	2300      	movs	r3, #0
 8004986:	f7fc f8b1 	bl	8000aec <__aeabi_dcmplt>
 800498a:	b110      	cbz	r0, 8004992 <_svfprintf_r+0x38a>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <_svfprintf_r+0x430>)
 8004994:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <_svfprintf_r+0x434>)
 8004996:	9907      	ldr	r1, [sp, #28]
 8004998:	2947      	cmp	r1, #71	; 0x47
 800499a:	bfc8      	it	gt
 800499c:	461a      	movgt	r2, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	9203      	str	r2, [sp, #12]
 80049a2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	f04f 0803 	mov.w	r8, #3
 80049ac:	461f      	mov	r7, r3
 80049ae:	461e      	mov	r6, r3
 80049b0:	9308      	str	r3, [sp, #32]
 80049b2:	461d      	mov	r5, r3
 80049b4:	e14d      	b.n	8004c52 <_svfprintf_r+0x64a>
 80049b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7fc f8bd 	bl	8000b3c <__aeabi_dcmpun>
 80049c2:	b140      	cbz	r0, 80049d6 <_svfprintf_r+0x3ce>
 80049c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <_svfprintf_r+0x438>)
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bfbc      	itt	lt
 80049cc:	232d      	movlt	r3, #45	; 0x2d
 80049ce:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <_svfprintf_r+0x43c>)
 80049d4:	e7df      	b.n	8004996 <_svfprintf_r+0x38e>
 80049d6:	9b07      	ldr	r3, [sp, #28]
 80049d8:	f023 0320 	bic.w	r3, r3, #32
 80049dc:	2b41      	cmp	r3, #65	; 0x41
 80049de:	9308      	str	r3, [sp, #32]
 80049e0:	d132      	bne.n	8004a48 <_svfprintf_r+0x440>
 80049e2:	2330      	movs	r3, #48	; 0x30
 80049e4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	2b61      	cmp	r3, #97	; 0x61
 80049ec:	bf0c      	ite	eq
 80049ee:	2378      	moveq	r3, #120	; 0x78
 80049f0:	2358      	movne	r3, #88	; 0x58
 80049f2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80049f6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80049fa:	f04b 0b02 	orr.w	fp, fp, #2
 80049fe:	f340 8204 	ble.w	8004e0a <_svfprintf_r+0x802>
 8004a02:	f108 0101 	add.w	r1, r8, #1
 8004a06:	4650      	mov	r0, sl
 8004a08:	f7ff fbb8 	bl	800417c <_malloc_r>
 8004a0c:	9003      	str	r0, [sp, #12]
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f040 81ff 	bne.w	8004e12 <_svfprintf_r+0x80a>
 8004a14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004a20:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004a24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a2a:	bf18      	it	ne
 8004a2c:	f04f 33ff 	movne.w	r3, #4294967295
 8004a30:	e610      	b.n	8004654 <_svfprintf_r+0x4c>
 8004a32:	bf00      	nop
 8004a34:	7fefffff 	.word	0x7fefffff
 8004a38:	0800a140 	.word	0x0800a140
 8004a3c:	0800a144 	.word	0x0800a144
 8004a40:	0800a148 	.word	0x0800a148
 8004a44:	0800a14c 	.word	0x0800a14c
 8004a48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004a4c:	f000 81e4 	beq.w	8004e18 <_svfprintf_r+0x810>
 8004a50:	9b08      	ldr	r3, [sp, #32]
 8004a52:	2b47      	cmp	r3, #71	; 0x47
 8004a54:	f040 81e4 	bne.w	8004e20 <_svfprintf_r+0x818>
 8004a58:	f1b8 0f00 	cmp.w	r8, #0
 8004a5c:	f040 81e0 	bne.w	8004e20 <_svfprintf_r+0x818>
 8004a60:	f8cd 8010 	str.w	r8, [sp, #16]
 8004a64:	f04f 0801 	mov.w	r8, #1
 8004a68:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8004a6c:	9310      	str	r3, [sp, #64]	; 0x40
 8004a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f280 81d7 	bge.w	8004e24 <_svfprintf_r+0x81c>
 8004a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a78:	ee08 3a10 	vmov	s16, r3
 8004a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	ee08 3a90 	vmov	s17, r3
 8004a86:	232d      	movs	r3, #45	; 0x2d
 8004a88:	9318      	str	r3, [sp, #96]	; 0x60
 8004a8a:	9b08      	ldr	r3, [sp, #32]
 8004a8c:	2b41      	cmp	r3, #65	; 0x41
 8004a8e:	f040 81e7 	bne.w	8004e60 <_svfprintf_r+0x858>
 8004a92:	eeb0 0a48 	vmov.f32	s0, s16
 8004a96:	eef0 0a68 	vmov.f32	s1, s17
 8004a9a:	a81c      	add	r0, sp, #112	; 0x70
 8004a9c:	f001 f8f4 	bl	8005c88 <frexp>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004aa6:	ec51 0b10 	vmov	r0, r1, d0
 8004aaa:	f7fb fdad 	bl	8000608 <__aeabi_dmul>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	f7fc f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aba:	b108      	cbz	r0, 8004ac0 <_svfprintf_r+0x4b8>
 8004abc:	2301      	movs	r3, #1
 8004abe:	931c      	str	r3, [sp, #112]	; 0x70
 8004ac0:	4bac      	ldr	r3, [pc, #688]	; (8004d74 <_svfprintf_r+0x76c>)
 8004ac2:	4aad      	ldr	r2, [pc, #692]	; (8004d78 <_svfprintf_r+0x770>)
 8004ac4:	9907      	ldr	r1, [sp, #28]
 8004ac6:	9d03      	ldr	r5, [sp, #12]
 8004ac8:	2961      	cmp	r1, #97	; 0x61
 8004aca:	bf18      	it	ne
 8004acc:	461a      	movne	r2, r3
 8004ace:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ad2:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ad4:	9305      	str	r3, [sp, #20]
 8004ad6:	4ba9      	ldr	r3, [pc, #676]	; (8004d7c <_svfprintf_r+0x774>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fd93 	bl	8000608 <__aeabi_dmul>
 8004ae2:	460f      	mov	r7, r1
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	f7fc f83f 	bl	8000b68 <__aeabi_d2iz>
 8004aea:	9019      	str	r0, [sp, #100]	; 0x64
 8004aec:	f7fb fd22 	bl	8000534 <__aeabi_i2d>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4630      	mov	r0, r6
 8004af6:	4639      	mov	r1, r7
 8004af8:	f7fb fbce 	bl	8000298 <__aeabi_dsub>
 8004afc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004afe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	f805 3b01 	strb.w	r3, [r5], #1
 8004b06:	9b05      	ldr	r3, [sp, #20]
 8004b08:	9312      	str	r3, [sp, #72]	; 0x48
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	4606      	mov	r6, r0
 8004b0e:	460f      	mov	r7, r1
 8004b10:	d007      	beq.n	8004b22 <_svfprintf_r+0x51a>
 8004b12:	3b01      	subs	r3, #1
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f7fb ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0d9      	beq.n	8004ad6 <_svfprintf_r+0x4ce>
 8004b22:	4b97      	ldr	r3, [pc, #604]	; (8004d80 <_svfprintf_r+0x778>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	4630      	mov	r0, r6
 8004b28:	4639      	mov	r1, r7
 8004b2a:	f7fb fffd 	bl	8000b28 <__aeabi_dcmpgt>
 8004b2e:	b960      	cbnz	r0, 8004b4a <_svfprintf_r+0x542>
 8004b30:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <_svfprintf_r+0x778>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	4630      	mov	r0, r6
 8004b36:	4639      	mov	r1, r7
 8004b38:	f7fb ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f000 818a 	beq.w	8004e56 <_svfprintf_r+0x84e>
 8004b42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b44:	07de      	lsls	r6, r3, #31
 8004b46:	f140 8186 	bpl.w	8004e56 <_svfprintf_r+0x84e>
 8004b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b4c:	9520      	str	r5, [sp, #128]	; 0x80
 8004b4e:	7bd9      	ldrb	r1, [r3, #15]
 8004b50:	2030      	movs	r0, #48	; 0x30
 8004b52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b54:	1e53      	subs	r3, r2, #1
 8004b56:	9320      	str	r3, [sp, #128]	; 0x80
 8004b58:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	f000 8169 	beq.w	8004e34 <_svfprintf_r+0x82c>
 8004b62:	2b39      	cmp	r3, #57	; 0x39
 8004b64:	bf0b      	itete	eq
 8004b66:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8004b68:	3301      	addne	r3, #1
 8004b6a:	7a9b      	ldrbeq	r3, [r3, #10]
 8004b6c:	b2db      	uxtbne	r3, r3
 8004b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	1aeb      	subs	r3, r5, r3
 8004b76:	9305      	str	r3, [sp, #20]
 8004b78:	9b08      	ldr	r3, [sp, #32]
 8004b7a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004b7c:	2b47      	cmp	r3, #71	; 0x47
 8004b7e:	f040 81b9 	bne.w	8004ef4 <_svfprintf_r+0x8ec>
 8004b82:	1ce8      	adds	r0, r5, #3
 8004b84:	db02      	blt.n	8004b8c <_svfprintf_r+0x584>
 8004b86:	45a8      	cmp	r8, r5
 8004b88:	f280 81d7 	bge.w	8004f3a <_svfprintf_r+0x932>
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	3b02      	subs	r3, #2
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	9907      	ldr	r1, [sp, #28]
 8004b94:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8004b98:	f021 0120 	bic.w	r1, r1, #32
 8004b9c:	2941      	cmp	r1, #65	; 0x41
 8004b9e:	bf08      	it	eq
 8004ba0:	320f      	addeq	r2, #15
 8004ba2:	f105 33ff 	add.w	r3, r5, #4294967295
 8004ba6:	bf06      	itte	eq
 8004ba8:	b2d2      	uxtbeq	r2, r2
 8004baa:	2101      	moveq	r1, #1
 8004bac:	2100      	movne	r1, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	931c      	str	r3, [sp, #112]	; 0x70
 8004bb2:	bfb8      	it	lt
 8004bb4:	f1c5 0301 	rsblt	r3, r5, #1
 8004bb8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8004bbc:	bfb4      	ite	lt
 8004bbe:	222d      	movlt	r2, #45	; 0x2d
 8004bc0:	222b      	movge	r2, #43	; 0x2b
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8004bc8:	f340 81aa 	ble.w	8004f20 <_svfprintf_r+0x918>
 8004bcc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8004bd0:	260a      	movs	r6, #10
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	fb93 f5f6 	sdiv	r5, r3, r6
 8004bd8:	fb06 3115 	mls	r1, r6, r5, r3
 8004bdc:	3130      	adds	r1, #48	; 0x30
 8004bde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004be2:	4619      	mov	r1, r3
 8004be4:	2963      	cmp	r1, #99	; 0x63
 8004be6:	f100 30ff 	add.w	r0, r0, #4294967295
 8004bea:	462b      	mov	r3, r5
 8004bec:	dcf1      	bgt.n	8004bd2 <_svfprintf_r+0x5ca>
 8004bee:	3330      	adds	r3, #48	; 0x30
 8004bf0:	1e91      	subs	r1, r2, #2
 8004bf2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004bf6:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8004c00:	4283      	cmp	r3, r0
 8004c02:	f0c0 8188 	bcc.w	8004f16 <_svfprintf_r+0x90e>
 8004c06:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	4281      	cmp	r1, r0
 8004c0e:	bf88      	it	hi
 8004c10:	2300      	movhi	r3, #0
 8004c12:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8004c16:	441a      	add	r2, r3
 8004c18:	ab1e      	add	r3, sp, #120	; 0x78
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	9a05      	ldr	r2, [sp, #20]
 8004c1e:	9315      	str	r3, [sp, #84]	; 0x54
 8004c20:	2a01      	cmp	r2, #1
 8004c22:	eb03 0802 	add.w	r8, r3, r2
 8004c26:	dc02      	bgt.n	8004c2e <_svfprintf_r+0x626>
 8004c28:	f01b 0f01 	tst.w	fp, #1
 8004c2c:	d001      	beq.n	8004c32 <_svfprintf_r+0x62a>
 8004c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c30:	4498      	add	r8, r3
 8004c32:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8004c36:	2600      	movs	r6, #0
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8004c3e:	9608      	str	r6, [sp, #32]
 8004c40:	4635      	mov	r5, r6
 8004c42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004c44:	b113      	cbz	r3, 8004c4c <_svfprintf_r+0x644>
 8004c46:	232d      	movs	r3, #45	; 0x2d
 8004c48:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004c4c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8004c50:	2700      	movs	r7, #0
 8004c52:	4547      	cmp	r7, r8
 8004c54:	463b      	mov	r3, r7
 8004c56:	bfb8      	it	lt
 8004c58:	4643      	movlt	r3, r8
 8004c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8004c5c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004c60:	b113      	cbz	r3, 8004c68 <_svfprintf_r+0x660>
 8004c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c64:	3301      	adds	r3, #1
 8004c66:	9310      	str	r3, [sp, #64]	; 0x40
 8004c68:	f01b 0302 	ands.w	r3, fp, #2
 8004c6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c6e:	bf1e      	ittt	ne
 8004c70:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 8004c72:	3302      	addne	r3, #2
 8004c74:	9310      	strne	r3, [sp, #64]	; 0x40
 8004c76:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8004c7a:	9318      	str	r3, [sp, #96]	; 0x60
 8004c7c:	d122      	bne.n	8004cc4 <_svfprintf_r+0x6bc>
 8004c7e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	9312      	str	r3, [sp, #72]	; 0x48
 8004c88:	dd1c      	ble.n	8004cc4 <_svfprintf_r+0x6bc>
 8004c8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004c8c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8004c90:	2810      	cmp	r0, #16
 8004c92:	483c      	ldr	r0, [pc, #240]	; (8004d84 <_svfprintf_r+0x77c>)
 8004c94:	6020      	str	r0, [r4, #0]
 8004c96:	f102 0201 	add.w	r2, r2, #1
 8004c9a:	f104 0108 	add.w	r1, r4, #8
 8004c9e:	f300 82f7 	bgt.w	8005290 <_svfprintf_r+0xc88>
 8004ca2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	4403      	add	r3, r0
 8004ca8:	2a07      	cmp	r2, #7
 8004caa:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8004cae:	f340 8304 	ble.w	80052ba <_svfprintf_r+0xcb2>
 8004cb2:	aa22      	add	r2, sp, #136	; 0x88
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f002 f9ea 	bl	8007090 <__ssprint_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f040 8637 	bne.w	8005930 <_svfprintf_r+0x1328>
 8004cc2:	ac25      	add	r4, sp, #148	; 0x94
 8004cc4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8004cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004cca:	b16a      	cbz	r2, 8004ce8 <_svfprintf_r+0x6e0>
 8004ccc:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	9324      	str	r3, [sp, #144]	; 0x90
 8004cd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cda:	6062      	str	r2, [r4, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	2b07      	cmp	r3, #7
 8004ce0:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ce2:	f300 82ec 	bgt.w	80052be <_svfprintf_r+0xcb6>
 8004ce6:	3408      	adds	r4, #8
 8004ce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004cec:	b162      	cbz	r2, 8004d08 <_svfprintf_r+0x700>
 8004cee:	aa1b      	add	r2, sp, #108	; 0x6c
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	9324      	str	r3, [sp, #144]	; 0x90
 8004cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cfa:	6062      	str	r2, [r4, #4]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	2b07      	cmp	r3, #7
 8004d00:	9323      	str	r3, [sp, #140]	; 0x8c
 8004d02:	f300 82e6 	bgt.w	80052d2 <_svfprintf_r+0xcca>
 8004d06:	3408      	adds	r4, #8
 8004d08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d122      	bne.n	8004d54 <_svfprintf_r+0x74c>
 8004d0e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	9312      	str	r3, [sp, #72]	; 0x48
 8004d18:	dd1c      	ble.n	8004d54 <_svfprintf_r+0x74c>
 8004d1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004d1c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8004d20:	2810      	cmp	r0, #16
 8004d22:	4819      	ldr	r0, [pc, #100]	; (8004d88 <_svfprintf_r+0x780>)
 8004d24:	6020      	str	r0, [r4, #0]
 8004d26:	f102 0201 	add.w	r2, r2, #1
 8004d2a:	f104 0108 	add.w	r1, r4, #8
 8004d2e:	f300 82da 	bgt.w	80052e6 <_svfprintf_r+0xcde>
 8004d32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004d34:	6060      	str	r0, [r4, #4]
 8004d36:	4403      	add	r3, r0
 8004d38:	2a07      	cmp	r2, #7
 8004d3a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8004d3e:	f340 82e7 	ble.w	8005310 <_svfprintf_r+0xd08>
 8004d42:	aa22      	add	r2, sp, #136	; 0x88
 8004d44:	4649      	mov	r1, r9
 8004d46:	4650      	mov	r0, sl
 8004d48:	f002 f9a2 	bl	8007090 <__ssprint_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f040 85ef 	bne.w	8005930 <_svfprintf_r+0x1328>
 8004d52:	ac25      	add	r4, sp, #148	; 0x94
 8004d54:	eba7 0708 	sub.w	r7, r7, r8
 8004d58:	2f00      	cmp	r7, #0
 8004d5a:	dd27      	ble.n	8004dac <_svfprintf_r+0x7a4>
 8004d5c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <_svfprintf_r+0x780>)
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	2f10      	cmp	r7, #16
 8004d66:	f103 0301 	add.w	r3, r3, #1
 8004d6a:	f104 0108 	add.w	r1, r4, #8
 8004d6e:	f300 82d1 	bgt.w	8005314 <_svfprintf_r+0xd0c>
 8004d72:	e00b      	b.n	8004d8c <_svfprintf_r+0x784>
 8004d74:	0800a161 	.word	0x0800a161
 8004d78:	0800a150 	.word	0x0800a150
 8004d7c:	40300000 	.word	0x40300000
 8004d80:	3fe00000 	.word	0x3fe00000
 8004d84:	0800a174 	.word	0x0800a174
 8004d88:	0800a184 	.word	0x0800a184
 8004d8c:	6067      	str	r7, [r4, #4]
 8004d8e:	2b07      	cmp	r3, #7
 8004d90:	4417      	add	r7, r2
 8004d92:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8004d96:	f340 82d0 	ble.w	800533a <_svfprintf_r+0xd32>
 8004d9a:	aa22      	add	r2, sp, #136	; 0x88
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	4650      	mov	r0, sl
 8004da0:	f002 f976 	bl	8007090 <__ssprint_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	f040 85c3 	bne.w	8005930 <_svfprintf_r+0x1328>
 8004daa:	ac25      	add	r4, sp, #148	; 0x94
 8004dac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004db0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8004db2:	f040 82c9 	bne.w	8005348 <_svfprintf_r+0xd40>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	e9c4 3800 	strd	r3, r8, [r4]
 8004dbc:	4447      	add	r7, r8
 8004dbe:	9724      	str	r7, [sp, #144]	; 0x90
 8004dc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	2b07      	cmp	r3, #7
 8004dc6:	9323      	str	r3, [sp, #140]	; 0x8c
 8004dc8:	f300 8303 	bgt.w	80053d2 <_svfprintf_r+0xdca>
 8004dcc:	3408      	adds	r4, #8
 8004dce:	f01b 0f04 	tst.w	fp, #4
 8004dd2:	f040 858f 	bne.w	80058f4 <_svfprintf_r+0x12ec>
 8004dd6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8004dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	bfac      	ite	ge
 8004de0:	189b      	addge	r3, r3, r2
 8004de2:	185b      	addlt	r3, r3, r1
 8004de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004de8:	b13b      	cbz	r3, 8004dfa <_svfprintf_r+0x7f2>
 8004dea:	aa22      	add	r2, sp, #136	; 0x88
 8004dec:	4649      	mov	r1, r9
 8004dee:	4650      	mov	r0, sl
 8004df0:	f002 f94e 	bl	8007090 <__ssprint_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f040 859b 	bne.w	8005930 <_svfprintf_r+0x1328>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9323      	str	r3, [sp, #140]	; 0x8c
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 85b1 	bne.w	8005968 <_svfprintf_r+0x1360>
 8004e06:	ac25      	add	r4, sp, #148	; 0x94
 8004e08:	e0e7      	b.n	8004fda <_svfprintf_r+0x9d2>
 8004e0a:	ab35      	add	r3, sp, #212	; 0xd4
 8004e0c:	9004      	str	r0, [sp, #16]
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	e62a      	b.n	8004a68 <_svfprintf_r+0x460>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	e627      	b.n	8004a68 <_svfprintf_r+0x460>
 8004e18:	9004      	str	r0, [sp, #16]
 8004e1a:	f04f 0806 	mov.w	r8, #6
 8004e1e:	e623      	b.n	8004a68 <_svfprintf_r+0x460>
 8004e20:	9004      	str	r0, [sp, #16]
 8004e22:	e621      	b.n	8004a68 <_svfprintf_r+0x460>
 8004e24:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8004e28:	2300      	movs	r3, #0
 8004e2a:	eeb0 8a47 	vmov.f32	s16, s14
 8004e2e:	eef0 8a67 	vmov.f32	s17, s15
 8004e32:	e629      	b.n	8004a88 <_svfprintf_r+0x480>
 8004e34:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004e38:	e68b      	b.n	8004b52 <_svfprintf_r+0x54a>
 8004e3a:	f803 0b01 	strb.w	r0, [r3], #1
 8004e3e:	1aca      	subs	r2, r1, r3
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	dafa      	bge.n	8004e3a <_svfprintf_r+0x832>
 8004e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e48:	3201      	adds	r2, #1
 8004e4a:	f103 0301 	add.w	r3, r3, #1
 8004e4e:	bfb8      	it	lt
 8004e50:	2300      	movlt	r3, #0
 8004e52:	441d      	add	r5, r3
 8004e54:	e68d      	b.n	8004b72 <_svfprintf_r+0x56a>
 8004e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e58:	462b      	mov	r3, r5
 8004e5a:	18a9      	adds	r1, r5, r2
 8004e5c:	2030      	movs	r0, #48	; 0x30
 8004e5e:	e7ee      	b.n	8004e3e <_svfprintf_r+0x836>
 8004e60:	9b08      	ldr	r3, [sp, #32]
 8004e62:	2b46      	cmp	r3, #70	; 0x46
 8004e64:	d005      	beq.n	8004e72 <_svfprintf_r+0x86a>
 8004e66:	2b45      	cmp	r3, #69	; 0x45
 8004e68:	d11d      	bne.n	8004ea6 <_svfprintf_r+0x89e>
 8004e6a:	f108 0501 	add.w	r5, r8, #1
 8004e6e:	2102      	movs	r1, #2
 8004e70:	e001      	b.n	8004e76 <_svfprintf_r+0x86e>
 8004e72:	4645      	mov	r5, r8
 8004e74:	2103      	movs	r1, #3
 8004e76:	ab20      	add	r3, sp, #128	; 0x80
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	462a      	mov	r2, r5
 8004e80:	ab1c      	add	r3, sp, #112	; 0x70
 8004e82:	4650      	mov	r0, sl
 8004e84:	eeb0 0a48 	vmov.f32	s0, s16
 8004e88:	eef0 0a68 	vmov.f32	s1, s17
 8004e8c:	f000 fffc 	bl	8005e88 <_dtoa_r>
 8004e90:	9b08      	ldr	r3, [sp, #32]
 8004e92:	9003      	str	r0, [sp, #12]
 8004e94:	2b47      	cmp	r3, #71	; 0x47
 8004e96:	d108      	bne.n	8004eaa <_svfprintf_r+0x8a2>
 8004e98:	f01b 0f01 	tst.w	fp, #1
 8004e9c:	d105      	bne.n	8004eaa <_svfprintf_r+0x8a2>
 8004e9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ea0:	9a03      	ldr	r2, [sp, #12]
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	e667      	b.n	8004b76 <_svfprintf_r+0x56e>
 8004ea6:	4645      	mov	r5, r8
 8004ea8:	e7e1      	b.n	8004e6e <_svfprintf_r+0x866>
 8004eaa:	9b03      	ldr	r3, [sp, #12]
 8004eac:	195e      	adds	r6, r3, r5
 8004eae:	9b08      	ldr	r3, [sp, #32]
 8004eb0:	2b46      	cmp	r3, #70	; 0x46
 8004eb2:	d10f      	bne.n	8004ed4 <_svfprintf_r+0x8cc>
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b30      	cmp	r3, #48	; 0x30
 8004eba:	d109      	bne.n	8004ed0 <_svfprintf_r+0x8c8>
 8004ebc:	ec51 0b18 	vmov	r0, r1, d8
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f7fb fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec8:	b910      	cbnz	r0, 8004ed0 <_svfprintf_r+0x8c8>
 8004eca:	f1c5 0501 	rsb	r5, r5, #1
 8004ece:	951c      	str	r5, [sp, #112]	; 0x70
 8004ed0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004ed2:	441e      	add	r6, r3
 8004ed4:	ec51 0b18 	vmov	r0, r1, d8
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2300      	movs	r3, #0
 8004edc:	f7fb fdfc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee0:	b100      	cbz	r0, 8004ee4 <_svfprintf_r+0x8dc>
 8004ee2:	9620      	str	r6, [sp, #128]	; 0x80
 8004ee4:	2230      	movs	r2, #48	; 0x30
 8004ee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ee8:	429e      	cmp	r6, r3
 8004eea:	d9d8      	bls.n	8004e9e <_svfprintf_r+0x896>
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	9120      	str	r1, [sp, #128]	; 0x80
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e7f8      	b.n	8004ee6 <_svfprintf_r+0x8de>
 8004ef4:	9b08      	ldr	r3, [sp, #32]
 8004ef6:	2b46      	cmp	r3, #70	; 0x46
 8004ef8:	f47f ae4b 	bne.w	8004b92 <_svfprintf_r+0x58a>
 8004efc:	f00b 0301 	and.w	r3, fp, #1
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	ea43 0308 	orr.w	r3, r3, r8
 8004f06:	dd25      	ble.n	8004f54 <_svfprintf_r+0x94c>
 8004f08:	b383      	cbz	r3, 8004f6c <_svfprintf_r+0x964>
 8004f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f0c:	18eb      	adds	r3, r5, r3
 8004f0e:	4498      	add	r8, r3
 8004f10:	2366      	movs	r3, #102	; 0x66
 8004f12:	9307      	str	r3, [sp, #28]
 8004f14:	e030      	b.n	8004f78 <_svfprintf_r+0x970>
 8004f16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f1a:	f805 6f01 	strb.w	r6, [r5, #1]!
 8004f1e:	e66f      	b.n	8004c00 <_svfprintf_r+0x5f8>
 8004f20:	b941      	cbnz	r1, 8004f34 <_svfprintf_r+0x92c>
 8004f22:	2230      	movs	r2, #48	; 0x30
 8004f24:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8004f28:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004f2c:	3330      	adds	r3, #48	; 0x30
 8004f2e:	f802 3b01 	strb.w	r3, [r2], #1
 8004f32:	e671      	b.n	8004c18 <_svfprintf_r+0x610>
 8004f34:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8004f38:	e7f8      	b.n	8004f2c <_svfprintf_r+0x924>
 8004f3a:	9b05      	ldr	r3, [sp, #20]
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dd0d      	ble.n	8004f5c <_svfprintf_r+0x954>
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	eb03 0802 	add.w	r8, r3, r2
 8004f4a:	dc0d      	bgt.n	8004f68 <_svfprintf_r+0x960>
 8004f4c:	f1c5 0301 	rsb	r3, r5, #1
 8004f50:	4498      	add	r8, r3
 8004f52:	e009      	b.n	8004f68 <_svfprintf_r+0x960>
 8004f54:	b163      	cbz	r3, 8004f70 <_svfprintf_r+0x968>
 8004f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e7d8      	b.n	8004f0e <_svfprintf_r+0x906>
 8004f5c:	f01b 0f01 	tst.w	fp, #1
 8004f60:	d01d      	beq.n	8004f9e <_svfprintf_r+0x996>
 8004f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f64:	eb05 0803 	add.w	r8, r5, r3
 8004f68:	2367      	movs	r3, #103	; 0x67
 8004f6a:	e7d2      	b.n	8004f12 <_svfprintf_r+0x90a>
 8004f6c:	46a8      	mov	r8, r5
 8004f6e:	e7cf      	b.n	8004f10 <_svfprintf_r+0x908>
 8004f70:	2366      	movs	r3, #102	; 0x66
 8004f72:	9307      	str	r3, [sp, #28]
 8004f74:	f04f 0801 	mov.w	r8, #1
 8004f78:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8004f7c:	9308      	str	r3, [sp, #32]
 8004f7e:	d01f      	beq.n	8004fc0 <_svfprintf_r+0x9b8>
 8004f80:	2600      	movs	r6, #0
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	9608      	str	r6, [sp, #32]
 8004f86:	f77f ae5c 	ble.w	8004c42 <_svfprintf_r+0x63a>
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2bff      	cmp	r3, #255	; 0xff
 8004f90:	d107      	bne.n	8004fa2 <_svfprintf_r+0x99a>
 8004f92:	9b08      	ldr	r3, [sp, #32]
 8004f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f96:	4433      	add	r3, r6
 8004f98:	fb02 8803 	mla	r8, r2, r3, r8
 8004f9c:	e651      	b.n	8004c42 <_svfprintf_r+0x63a>
 8004f9e:	46a8      	mov	r8, r5
 8004fa0:	e7e2      	b.n	8004f68 <_svfprintf_r+0x960>
 8004fa2:	42ab      	cmp	r3, r5
 8004fa4:	daf5      	bge.n	8004f92 <_svfprintf_r+0x98a>
 8004fa6:	1aed      	subs	r5, r5, r3
 8004fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	b133      	cbz	r3, 8004fbc <_svfprintf_r+0x9b4>
 8004fae:	9b08      	ldr	r3, [sp, #32]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	9308      	str	r3, [sp, #32]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	e7e6      	b.n	8004f8a <_svfprintf_r+0x982>
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7e4      	b.n	8004f8a <_svfprintf_r+0x982>
 8004fc0:	9e08      	ldr	r6, [sp, #32]
 8004fc2:	e63e      	b.n	8004c42 <_svfprintf_r+0x63a>
 8004fc4:	1d2b      	adds	r3, r5, #4
 8004fc6:	f01b 0f20 	tst.w	fp, #32
 8004fca:	9306      	str	r3, [sp, #24]
 8004fcc:	d00a      	beq.n	8004fe4 <_svfprintf_r+0x9dc>
 8004fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fd4:	17d2      	asrs	r2, r2, #31
 8004fd6:	e9c3 1200 	strd	r1, r2, [r3]
 8004fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fdc:	9d06      	ldr	r5, [sp, #24]
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	f7ff bb52 	b.w	8004688 <_svfprintf_r+0x80>
 8004fe4:	f01b 0f10 	tst.w	fp, #16
 8004fe8:	d003      	beq.n	8004ff2 <_svfprintf_r+0x9ea>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e7f3      	b.n	8004fda <_svfprintf_r+0x9d2>
 8004ff2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004ff6:	d003      	beq.n	8005000 <_svfprintf_r+0x9f8>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	e7ec      	b.n	8004fda <_svfprintf_r+0x9d2>
 8005000:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005004:	d0f1      	beq.n	8004fea <_svfprintf_r+0x9e2>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e7e5      	b.n	8004fda <_svfprintf_r+0x9d2>
 800500e:	f04b 0b10 	orr.w	fp, fp, #16
 8005012:	f01b 0320 	ands.w	r3, fp, #32
 8005016:	d020      	beq.n	800505a <_svfprintf_r+0xa52>
 8005018:	3507      	adds	r5, #7
 800501a:	f025 0307 	bic.w	r3, r5, #7
 800501e:	461a      	mov	r2, r3
 8005020:	685e      	ldr	r6, [r3, #4]
 8005022:	f852 5b08 	ldr.w	r5, [r2], #8
 8005026:	9206      	str	r2, [sp, #24]
 8005028:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800502c:	2300      	movs	r3, #0
 800502e:	2200      	movs	r2, #0
 8005030:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8005034:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005038:	f000 84a7 	beq.w	800598a <_svfprintf_r+0x1382>
 800503c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8005040:	9204      	str	r2, [sp, #16]
 8005042:	ea55 0206 	orrs.w	r2, r5, r6
 8005046:	f040 84a6 	bne.w	8005996 <_svfprintf_r+0x138e>
 800504a:	f1b8 0f00 	cmp.w	r8, #0
 800504e:	f000 8107 	beq.w	8005260 <_svfprintf_r+0xc58>
 8005052:	2b01      	cmp	r3, #1
 8005054:	f040 84a2 	bne.w	800599c <_svfprintf_r+0x1394>
 8005058:	e0a3      	b.n	80051a2 <_svfprintf_r+0xb9a>
 800505a:	462a      	mov	r2, r5
 800505c:	f01b 0610 	ands.w	r6, fp, #16
 8005060:	f852 5b04 	ldr.w	r5, [r2], #4
 8005064:	9206      	str	r2, [sp, #24]
 8005066:	d001      	beq.n	800506c <_svfprintf_r+0xa64>
 8005068:	461e      	mov	r6, r3
 800506a:	e7dd      	b.n	8005028 <_svfprintf_r+0xa20>
 800506c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005070:	d001      	beq.n	8005076 <_svfprintf_r+0xa6e>
 8005072:	b2ad      	uxth	r5, r5
 8005074:	e7d8      	b.n	8005028 <_svfprintf_r+0xa20>
 8005076:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800507a:	d0d5      	beq.n	8005028 <_svfprintf_r+0xa20>
 800507c:	b2ed      	uxtb	r5, r5
 800507e:	e7f3      	b.n	8005068 <_svfprintf_r+0xa60>
 8005080:	462b      	mov	r3, r5
 8005082:	2278      	movs	r2, #120	; 0x78
 8005084:	f853 5b04 	ldr.w	r5, [r3], #4
 8005088:	9306      	str	r3, [sp, #24]
 800508a:	f647 0330 	movw	r3, #30768	; 0x7830
 800508e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8005092:	4bab      	ldr	r3, [pc, #684]	; (8005340 <_svfprintf_r+0xd38>)
 8005094:	9316      	str	r3, [sp, #88]	; 0x58
 8005096:	2600      	movs	r6, #0
 8005098:	f04b 0b02 	orr.w	fp, fp, #2
 800509c:	2302      	movs	r3, #2
 800509e:	9207      	str	r2, [sp, #28]
 80050a0:	e7c5      	b.n	800502e <_svfprintf_r+0xa26>
 80050a2:	462b      	mov	r3, r5
 80050a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80050a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ac:	9203      	str	r2, [sp, #12]
 80050ae:	f04f 0500 	mov.w	r5, #0
 80050b2:	9306      	str	r3, [sp, #24]
 80050b4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80050b8:	d010      	beq.n	80050dc <_svfprintf_r+0xad4>
 80050ba:	9803      	ldr	r0, [sp, #12]
 80050bc:	4642      	mov	r2, r8
 80050be:	4629      	mov	r1, r5
 80050c0:	f7fb f88e 	bl	80001e0 <memchr>
 80050c4:	9004      	str	r0, [sp, #16]
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f000 80e0 	beq.w	800528c <_svfprintf_r+0xc84>
 80050cc:	9a03      	ldr	r2, [sp, #12]
 80050ce:	9504      	str	r5, [sp, #16]
 80050d0:	eba0 0802 	sub.w	r8, r0, r2
 80050d4:	462f      	mov	r7, r5
 80050d6:	462e      	mov	r6, r5
 80050d8:	9508      	str	r5, [sp, #32]
 80050da:	e5ba      	b.n	8004c52 <_svfprintf_r+0x64a>
 80050dc:	9803      	ldr	r0, [sp, #12]
 80050de:	f7fb f8cf 	bl	8000280 <strlen>
 80050e2:	462f      	mov	r7, r5
 80050e4:	4680      	mov	r8, r0
 80050e6:	9504      	str	r5, [sp, #16]
 80050e8:	463e      	mov	r6, r7
 80050ea:	463b      	mov	r3, r7
 80050ec:	e460      	b.n	80049b0 <_svfprintf_r+0x3a8>
 80050ee:	f04b 0b10 	orr.w	fp, fp, #16
 80050f2:	f01b 0320 	ands.w	r3, fp, #32
 80050f6:	d009      	beq.n	800510c <_svfprintf_r+0xb04>
 80050f8:	3507      	adds	r5, #7
 80050fa:	f025 0307 	bic.w	r3, r5, #7
 80050fe:	461a      	mov	r2, r3
 8005100:	685e      	ldr	r6, [r3, #4]
 8005102:	f852 5b08 	ldr.w	r5, [r2], #8
 8005106:	9206      	str	r2, [sp, #24]
 8005108:	2301      	movs	r3, #1
 800510a:	e790      	b.n	800502e <_svfprintf_r+0xa26>
 800510c:	462a      	mov	r2, r5
 800510e:	f01b 0610 	ands.w	r6, fp, #16
 8005112:	f852 5b04 	ldr.w	r5, [r2], #4
 8005116:	9206      	str	r2, [sp, #24]
 8005118:	d001      	beq.n	800511e <_svfprintf_r+0xb16>
 800511a:	461e      	mov	r6, r3
 800511c:	e7f4      	b.n	8005108 <_svfprintf_r+0xb00>
 800511e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005122:	d001      	beq.n	8005128 <_svfprintf_r+0xb20>
 8005124:	b2ad      	uxth	r5, r5
 8005126:	e7ef      	b.n	8005108 <_svfprintf_r+0xb00>
 8005128:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800512c:	d0ec      	beq.n	8005108 <_svfprintf_r+0xb00>
 800512e:	b2ed      	uxtb	r5, r5
 8005130:	e7f3      	b.n	800511a <_svfprintf_r+0xb12>
 8005132:	4b84      	ldr	r3, [pc, #528]	; (8005344 <_svfprintf_r+0xd3c>)
 8005134:	9316      	str	r3, [sp, #88]	; 0x58
 8005136:	f01b 0320 	ands.w	r3, fp, #32
 800513a:	d01b      	beq.n	8005174 <_svfprintf_r+0xb6c>
 800513c:	3507      	adds	r5, #7
 800513e:	f025 0307 	bic.w	r3, r5, #7
 8005142:	461a      	mov	r2, r3
 8005144:	685e      	ldr	r6, [r3, #4]
 8005146:	f852 5b08 	ldr.w	r5, [r2], #8
 800514a:	9206      	str	r2, [sp, #24]
 800514c:	f01b 0f01 	tst.w	fp, #1
 8005150:	d00a      	beq.n	8005168 <_svfprintf_r+0xb60>
 8005152:	ea55 0306 	orrs.w	r3, r5, r6
 8005156:	d007      	beq.n	8005168 <_svfprintf_r+0xb60>
 8005158:	2330      	movs	r3, #48	; 0x30
 800515a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800515e:	9b07      	ldr	r3, [sp, #28]
 8005160:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8005164:	f04b 0b02 	orr.w	fp, fp, #2
 8005168:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800516c:	2302      	movs	r3, #2
 800516e:	e75e      	b.n	800502e <_svfprintf_r+0xa26>
 8005170:	4b73      	ldr	r3, [pc, #460]	; (8005340 <_svfprintf_r+0xd38>)
 8005172:	e7df      	b.n	8005134 <_svfprintf_r+0xb2c>
 8005174:	462a      	mov	r2, r5
 8005176:	f01b 0610 	ands.w	r6, fp, #16
 800517a:	f852 5b04 	ldr.w	r5, [r2], #4
 800517e:	9206      	str	r2, [sp, #24]
 8005180:	d001      	beq.n	8005186 <_svfprintf_r+0xb7e>
 8005182:	461e      	mov	r6, r3
 8005184:	e7e2      	b.n	800514c <_svfprintf_r+0xb44>
 8005186:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800518a:	d001      	beq.n	8005190 <_svfprintf_r+0xb88>
 800518c:	b2ad      	uxth	r5, r5
 800518e:	e7dd      	b.n	800514c <_svfprintf_r+0xb44>
 8005190:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8005194:	d0da      	beq.n	800514c <_svfprintf_r+0xb44>
 8005196:	b2ed      	uxtb	r5, r5
 8005198:	e7f3      	b.n	8005182 <_svfprintf_r+0xb7a>
 800519a:	2d0a      	cmp	r5, #10
 800519c:	f176 0300 	sbcs.w	r3, r6, #0
 80051a0:	d206      	bcs.n	80051b0 <_svfprintf_r+0xba8>
 80051a2:	3530      	adds	r5, #48	; 0x30
 80051a4:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 80051a8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 80051ac:	f000 bc16 	b.w	80059dc <_svfprintf_r+0x13d4>
 80051b0:	2300      	movs	r3, #0
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	af4e      	add	r7, sp, #312	; 0x138
 80051bc:	9308      	str	r3, [sp, #32]
 80051be:	220a      	movs	r2, #10
 80051c0:	2300      	movs	r3, #0
 80051c2:	4628      	mov	r0, r5
 80051c4:	4631      	mov	r1, r6
 80051c6:	f7fb fd47 	bl	8000c58 <__aeabi_uldivmod>
 80051ca:	1e7b      	subs	r3, r7, #1
 80051cc:	9303      	str	r3, [sp, #12]
 80051ce:	9b05      	ldr	r3, [sp, #20]
 80051d0:	9010      	str	r0, [sp, #64]	; 0x40
 80051d2:	3301      	adds	r3, #1
 80051d4:	9305      	str	r3, [sp, #20]
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	3230      	adds	r2, #48	; 0x30
 80051da:	468b      	mov	fp, r1
 80051dc:	f807 2c01 	strb.w	r2, [r7, #-1]
 80051e0:	b1d3      	cbz	r3, 8005218 <_svfprintf_r+0xc10>
 80051e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e4:	9a05      	ldr	r2, [sp, #20]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d115      	bne.n	8005218 <_svfprintf_r+0xc10>
 80051ec:	2aff      	cmp	r2, #255	; 0xff
 80051ee:	d013      	beq.n	8005218 <_svfprintf_r+0xc10>
 80051f0:	2d0a      	cmp	r5, #10
 80051f2:	f176 0300 	sbcs.w	r3, r6, #0
 80051f6:	d30f      	bcc.n	8005218 <_svfprintf_r+0xc10>
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051fc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	4618      	mov	r0, r3
 8005202:	9303      	str	r3, [sp, #12]
 8005204:	f000 fcf9 	bl	8005bfa <strncpy>
 8005208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	b11b      	cbz	r3, 8005216 <_svfprintf_r+0xc0e>
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	3301      	adds	r3, #1
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	2300      	movs	r3, #0
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	2d0a      	cmp	r5, #10
 800521a:	f176 0600 	sbcs.w	r6, r6, #0
 800521e:	d20b      	bcs.n	8005238 <_svfprintf_r+0xc30>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005226:	aa4e      	add	r2, sp, #312	; 0x138
 8005228:	4647      	mov	r7, r8
 800522a:	eba2 0803 	sub.w	r8, r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	9304      	str	r3, [sp, #16]
 8005232:	461e      	mov	r6, r3
 8005234:	f7ff bbbc 	b.w	80049b0 <_svfprintf_r+0x3a8>
 8005238:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800523a:	9f03      	ldr	r7, [sp, #12]
 800523c:	465e      	mov	r6, fp
 800523e:	e7be      	b.n	80051be <_svfprintf_r+0xbb6>
 8005240:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005242:	f005 030f 	and.w	r3, r5, #15
 8005246:	092d      	lsrs	r5, r5, #4
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	9a03      	ldr	r2, [sp, #12]
 800524c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8005250:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005254:	0936      	lsrs	r6, r6, #4
 8005256:	ea55 0306 	orrs.w	r3, r5, r6
 800525a:	9203      	str	r2, [sp, #12]
 800525c:	d1f0      	bne.n	8005240 <_svfprintf_r+0xc38>
 800525e:	e7df      	b.n	8005220 <_svfprintf_r+0xc18>
 8005260:	b933      	cbnz	r3, 8005270 <_svfprintf_r+0xc68>
 8005262:	f01b 0f01 	tst.w	fp, #1
 8005266:	d003      	beq.n	8005270 <_svfprintf_r+0xc68>
 8005268:	2330      	movs	r3, #48	; 0x30
 800526a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800526e:	e79b      	b.n	80051a8 <_svfprintf_r+0xba0>
 8005270:	ab4e      	add	r3, sp, #312	; 0x138
 8005272:	e3b3      	b.n	80059dc <_svfprintf_r+0x13d4>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 837c 	beq.w	8005974 <_svfprintf_r+0x136c>
 800527c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005280:	2300      	movs	r3, #0
 8005282:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005286:	9506      	str	r5, [sp, #24]
 8005288:	f7ff bb1f 	b.w	80048ca <_svfprintf_r+0x2c2>
 800528c:	9f04      	ldr	r7, [sp, #16]
 800528e:	e72b      	b.n	80050e8 <_svfprintf_r+0xae0>
 8005290:	2010      	movs	r0, #16
 8005292:	4403      	add	r3, r0
 8005294:	2a07      	cmp	r2, #7
 8005296:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800529a:	6060      	str	r0, [r4, #4]
 800529c:	dd08      	ble.n	80052b0 <_svfprintf_r+0xca8>
 800529e:	aa22      	add	r2, sp, #136	; 0x88
 80052a0:	4649      	mov	r1, r9
 80052a2:	4650      	mov	r0, sl
 80052a4:	f001 fef4 	bl	8007090 <__ssprint_r>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f040 8341 	bne.w	8005930 <_svfprintf_r+0x1328>
 80052ae:	a925      	add	r1, sp, #148	; 0x94
 80052b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b2:	3b10      	subs	r3, #16
 80052b4:	9312      	str	r3, [sp, #72]	; 0x48
 80052b6:	460c      	mov	r4, r1
 80052b8:	e4e7      	b.n	8004c8a <_svfprintf_r+0x682>
 80052ba:	460c      	mov	r4, r1
 80052bc:	e502      	b.n	8004cc4 <_svfprintf_r+0x6bc>
 80052be:	aa22      	add	r2, sp, #136	; 0x88
 80052c0:	4649      	mov	r1, r9
 80052c2:	4650      	mov	r0, sl
 80052c4:	f001 fee4 	bl	8007090 <__ssprint_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	f040 8331 	bne.w	8005930 <_svfprintf_r+0x1328>
 80052ce:	ac25      	add	r4, sp, #148	; 0x94
 80052d0:	e50a      	b.n	8004ce8 <_svfprintf_r+0x6e0>
 80052d2:	aa22      	add	r2, sp, #136	; 0x88
 80052d4:	4649      	mov	r1, r9
 80052d6:	4650      	mov	r0, sl
 80052d8:	f001 feda 	bl	8007090 <__ssprint_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	f040 8327 	bne.w	8005930 <_svfprintf_r+0x1328>
 80052e2:	ac25      	add	r4, sp, #148	; 0x94
 80052e4:	e510      	b.n	8004d08 <_svfprintf_r+0x700>
 80052e6:	2010      	movs	r0, #16
 80052e8:	4403      	add	r3, r0
 80052ea:	2a07      	cmp	r2, #7
 80052ec:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	dd08      	ble.n	8005306 <_svfprintf_r+0xcfe>
 80052f4:	aa22      	add	r2, sp, #136	; 0x88
 80052f6:	4649      	mov	r1, r9
 80052f8:	4650      	mov	r0, sl
 80052fa:	f001 fec9 	bl	8007090 <__ssprint_r>
 80052fe:	2800      	cmp	r0, #0
 8005300:	f040 8316 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005304:	a925      	add	r1, sp, #148	; 0x94
 8005306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005308:	3b10      	subs	r3, #16
 800530a:	9312      	str	r3, [sp, #72]	; 0x48
 800530c:	460c      	mov	r4, r1
 800530e:	e504      	b.n	8004d1a <_svfprintf_r+0x712>
 8005310:	460c      	mov	r4, r1
 8005312:	e51f      	b.n	8004d54 <_svfprintf_r+0x74c>
 8005314:	2010      	movs	r0, #16
 8005316:	4402      	add	r2, r0
 8005318:	2b07      	cmp	r3, #7
 800531a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800531e:	6060      	str	r0, [r4, #4]
 8005320:	dd08      	ble.n	8005334 <_svfprintf_r+0xd2c>
 8005322:	aa22      	add	r2, sp, #136	; 0x88
 8005324:	4649      	mov	r1, r9
 8005326:	4650      	mov	r0, sl
 8005328:	f001 feb2 	bl	8007090 <__ssprint_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	f040 82ff 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005332:	a925      	add	r1, sp, #148	; 0x94
 8005334:	3f10      	subs	r7, #16
 8005336:	460c      	mov	r4, r1
 8005338:	e510      	b.n	8004d5c <_svfprintf_r+0x754>
 800533a:	460c      	mov	r4, r1
 800533c:	e536      	b.n	8004dac <_svfprintf_r+0x7a4>
 800533e:	bf00      	nop
 8005340:	0800a150 	.word	0x0800a150
 8005344:	0800a161 	.word	0x0800a161
 8005348:	9b07      	ldr	r3, [sp, #28]
 800534a:	2b65      	cmp	r3, #101	; 0x65
 800534c:	f340 823a 	ble.w	80057c4 <_svfprintf_r+0x11bc>
 8005350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	f7fb fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800535c:	2800      	cmp	r0, #0
 800535e:	d068      	beq.n	8005432 <_svfprintf_r+0xe2a>
 8005360:	4b6d      	ldr	r3, [pc, #436]	; (8005518 <_svfprintf_r+0xf10>)
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	2301      	movs	r3, #1
 8005366:	441f      	add	r7, r3
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800536c:	9724      	str	r7, [sp, #144]	; 0x90
 800536e:	3301      	adds	r3, #1
 8005370:	2b07      	cmp	r3, #7
 8005372:	9323      	str	r3, [sp, #140]	; 0x8c
 8005374:	dc37      	bgt.n	80053e6 <_svfprintf_r+0xdde>
 8005376:	3408      	adds	r4, #8
 8005378:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800537a:	9a05      	ldr	r2, [sp, #20]
 800537c:	4293      	cmp	r3, r2
 800537e:	db03      	blt.n	8005388 <_svfprintf_r+0xd80>
 8005380:	f01b 0f01 	tst.w	fp, #1
 8005384:	f43f ad23 	beq.w	8004dce <_svfprintf_r+0x7c6>
 8005388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800538e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005390:	6063      	str	r3, [r4, #4]
 8005392:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005394:	4413      	add	r3, r2
 8005396:	9324      	str	r3, [sp, #144]	; 0x90
 8005398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800539a:	3301      	adds	r3, #1
 800539c:	2b07      	cmp	r3, #7
 800539e:	9323      	str	r3, [sp, #140]	; 0x8c
 80053a0:	dc2b      	bgt.n	80053fa <_svfprintf_r+0xdf2>
 80053a2:	3408      	adds	r4, #8
 80053a4:	9b05      	ldr	r3, [sp, #20]
 80053a6:	1e5d      	subs	r5, r3, #1
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	f77f ad10 	ble.w	8004dce <_svfprintf_r+0x7c6>
 80053ae:	4e5b      	ldr	r6, [pc, #364]	; (800551c <_svfprintf_r+0xf14>)
 80053b0:	2710      	movs	r7, #16
 80053b2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80053b6:	2d10      	cmp	r5, #16
 80053b8:	f103 0301 	add.w	r3, r3, #1
 80053bc:	f104 0108 	add.w	r1, r4, #8
 80053c0:	6026      	str	r6, [r4, #0]
 80053c2:	dc24      	bgt.n	800540e <_svfprintf_r+0xe06>
 80053c4:	6065      	str	r5, [r4, #4]
 80053c6:	4415      	add	r5, r2
 80053c8:	9524      	str	r5, [sp, #144]	; 0x90
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80053ce:	f340 828e 	ble.w	80058ee <_svfprintf_r+0x12e6>
 80053d2:	aa22      	add	r2, sp, #136	; 0x88
 80053d4:	4649      	mov	r1, r9
 80053d6:	4650      	mov	r0, sl
 80053d8:	f001 fe5a 	bl	8007090 <__ssprint_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f040 82a7 	bne.w	8005930 <_svfprintf_r+0x1328>
 80053e2:	ac25      	add	r4, sp, #148	; 0x94
 80053e4:	e4f3      	b.n	8004dce <_svfprintf_r+0x7c6>
 80053e6:	aa22      	add	r2, sp, #136	; 0x88
 80053e8:	4649      	mov	r1, r9
 80053ea:	4650      	mov	r0, sl
 80053ec:	f001 fe50 	bl	8007090 <__ssprint_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f040 829d 	bne.w	8005930 <_svfprintf_r+0x1328>
 80053f6:	ac25      	add	r4, sp, #148	; 0x94
 80053f8:	e7be      	b.n	8005378 <_svfprintf_r+0xd70>
 80053fa:	aa22      	add	r2, sp, #136	; 0x88
 80053fc:	4649      	mov	r1, r9
 80053fe:	4650      	mov	r0, sl
 8005400:	f001 fe46 	bl	8007090 <__ssprint_r>
 8005404:	2800      	cmp	r0, #0
 8005406:	f040 8293 	bne.w	8005930 <_svfprintf_r+0x1328>
 800540a:	ac25      	add	r4, sp, #148	; 0x94
 800540c:	e7ca      	b.n	80053a4 <_svfprintf_r+0xd9c>
 800540e:	3210      	adds	r2, #16
 8005410:	2b07      	cmp	r3, #7
 8005412:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005416:	6067      	str	r7, [r4, #4]
 8005418:	dd08      	ble.n	800542c <_svfprintf_r+0xe24>
 800541a:	aa22      	add	r2, sp, #136	; 0x88
 800541c:	4649      	mov	r1, r9
 800541e:	4650      	mov	r0, sl
 8005420:	f001 fe36 	bl	8007090 <__ssprint_r>
 8005424:	2800      	cmp	r0, #0
 8005426:	f040 8283 	bne.w	8005930 <_svfprintf_r+0x1328>
 800542a:	a925      	add	r1, sp, #148	; 0x94
 800542c:	3d10      	subs	r5, #16
 800542e:	460c      	mov	r4, r1
 8005430:	e7bf      	b.n	80053b2 <_svfprintf_r+0xdaa>
 8005432:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005434:	2b00      	cmp	r3, #0
 8005436:	dc73      	bgt.n	8005520 <_svfprintf_r+0xf18>
 8005438:	4b37      	ldr	r3, [pc, #220]	; (8005518 <_svfprintf_r+0xf10>)
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	441f      	add	r7, r3
 8005440:	6063      	str	r3, [r4, #4]
 8005442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005444:	9724      	str	r7, [sp, #144]	; 0x90
 8005446:	3301      	adds	r3, #1
 8005448:	2b07      	cmp	r3, #7
 800544a:	9323      	str	r3, [sp, #140]	; 0x8c
 800544c:	dc3d      	bgt.n	80054ca <_svfprintf_r+0xec2>
 800544e:	3408      	adds	r4, #8
 8005450:	9905      	ldr	r1, [sp, #20]
 8005452:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005454:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005456:	430b      	orrs	r3, r1
 8005458:	f00b 0101 	and.w	r1, fp, #1
 800545c:	430b      	orrs	r3, r1
 800545e:	f43f acb6 	beq.w	8004dce <_svfprintf_r+0x7c6>
 8005462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005468:	6063      	str	r3, [r4, #4]
 800546a:	441a      	add	r2, r3
 800546c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800546e:	9224      	str	r2, [sp, #144]	; 0x90
 8005470:	3301      	adds	r3, #1
 8005472:	2b07      	cmp	r3, #7
 8005474:	9323      	str	r3, [sp, #140]	; 0x8c
 8005476:	dc32      	bgt.n	80054de <_svfprintf_r+0xed6>
 8005478:	3408      	adds	r4, #8
 800547a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800547c:	2d00      	cmp	r5, #0
 800547e:	da1b      	bge.n	80054b8 <_svfprintf_r+0xeb0>
 8005480:	4e26      	ldr	r6, [pc, #152]	; (800551c <_svfprintf_r+0xf14>)
 8005482:	426d      	negs	r5, r5
 8005484:	4623      	mov	r3, r4
 8005486:	2710      	movs	r7, #16
 8005488:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800548c:	2d10      	cmp	r5, #16
 800548e:	f102 0201 	add.w	r2, r2, #1
 8005492:	f104 0408 	add.w	r4, r4, #8
 8005496:	601e      	str	r6, [r3, #0]
 8005498:	dc2b      	bgt.n	80054f2 <_svfprintf_r+0xeea>
 800549a:	605d      	str	r5, [r3, #4]
 800549c:	2a07      	cmp	r2, #7
 800549e:	440d      	add	r5, r1
 80054a0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80054a4:	dd08      	ble.n	80054b8 <_svfprintf_r+0xeb0>
 80054a6:	aa22      	add	r2, sp, #136	; 0x88
 80054a8:	4649      	mov	r1, r9
 80054aa:	4650      	mov	r0, sl
 80054ac:	f001 fdf0 	bl	8007090 <__ssprint_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	f040 823d 	bne.w	8005930 <_svfprintf_r+0x1328>
 80054b6:	ac25      	add	r4, sp, #148	; 0x94
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	9a05      	ldr	r2, [sp, #20]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054c4:	4413      	add	r3, r2
 80054c6:	9324      	str	r3, [sp, #144]	; 0x90
 80054c8:	e47a      	b.n	8004dc0 <_svfprintf_r+0x7b8>
 80054ca:	aa22      	add	r2, sp, #136	; 0x88
 80054cc:	4649      	mov	r1, r9
 80054ce:	4650      	mov	r0, sl
 80054d0:	f001 fdde 	bl	8007090 <__ssprint_r>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f040 822b 	bne.w	8005930 <_svfprintf_r+0x1328>
 80054da:	ac25      	add	r4, sp, #148	; 0x94
 80054dc:	e7b8      	b.n	8005450 <_svfprintf_r+0xe48>
 80054de:	aa22      	add	r2, sp, #136	; 0x88
 80054e0:	4649      	mov	r1, r9
 80054e2:	4650      	mov	r0, sl
 80054e4:	f001 fdd4 	bl	8007090 <__ssprint_r>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f040 8221 	bne.w	8005930 <_svfprintf_r+0x1328>
 80054ee:	ac25      	add	r4, sp, #148	; 0x94
 80054f0:	e7c3      	b.n	800547a <_svfprintf_r+0xe72>
 80054f2:	3110      	adds	r1, #16
 80054f4:	2a07      	cmp	r2, #7
 80054f6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80054fa:	605f      	str	r7, [r3, #4]
 80054fc:	dd08      	ble.n	8005510 <_svfprintf_r+0xf08>
 80054fe:	aa22      	add	r2, sp, #136	; 0x88
 8005500:	4649      	mov	r1, r9
 8005502:	4650      	mov	r0, sl
 8005504:	f001 fdc4 	bl	8007090 <__ssprint_r>
 8005508:	2800      	cmp	r0, #0
 800550a:	f040 8211 	bne.w	8005930 <_svfprintf_r+0x1328>
 800550e:	ac25      	add	r4, sp, #148	; 0x94
 8005510:	3d10      	subs	r5, #16
 8005512:	4623      	mov	r3, r4
 8005514:	e7b8      	b.n	8005488 <_svfprintf_r+0xe80>
 8005516:	bf00      	nop
 8005518:	0800a172 	.word	0x0800a172
 800551c:	0800a184 	.word	0x0800a184
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	42ab      	cmp	r3, r5
 8005524:	bfa8      	it	ge
 8005526:	462b      	movge	r3, r5
 8005528:	2b00      	cmp	r3, #0
 800552a:	4698      	mov	r8, r3
 800552c:	dd0a      	ble.n	8005544 <_svfprintf_r+0xf3c>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	e9c4 3800 	strd	r3, r8, [r4]
 8005534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005536:	3301      	adds	r3, #1
 8005538:	4447      	add	r7, r8
 800553a:	2b07      	cmp	r3, #7
 800553c:	9724      	str	r7, [sp, #144]	; 0x90
 800553e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005540:	dc7b      	bgt.n	800563a <_svfprintf_r+0x1032>
 8005542:	3408      	adds	r4, #8
 8005544:	f1b8 0f00 	cmp.w	r8, #0
 8005548:	bfac      	ite	ge
 800554a:	eba5 0708 	subge.w	r7, r5, r8
 800554e:	462f      	movlt	r7, r5
 8005550:	2f00      	cmp	r7, #0
 8005552:	dd1a      	ble.n	800558a <_svfprintf_r+0xf82>
 8005554:	f8df 8368 	ldr.w	r8, [pc, #872]	; 80058c0 <_svfprintf_r+0x12b8>
 8005558:	f8c4 8000 	str.w	r8, [r4]
 800555c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005560:	2f10      	cmp	r7, #16
 8005562:	f103 0301 	add.w	r3, r3, #1
 8005566:	f104 0108 	add.w	r1, r4, #8
 800556a:	dc70      	bgt.n	800564e <_svfprintf_r+0x1046>
 800556c:	6067      	str	r7, [r4, #4]
 800556e:	2b07      	cmp	r3, #7
 8005570:	4417      	add	r7, r2
 8005572:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8005576:	dd7d      	ble.n	8005674 <_svfprintf_r+0x106c>
 8005578:	aa22      	add	r2, sp, #136	; 0x88
 800557a:	4649      	mov	r1, r9
 800557c:	4650      	mov	r0, sl
 800557e:	f001 fd87 	bl	8007090 <__ssprint_r>
 8005582:	2800      	cmp	r0, #0
 8005584:	f040 81d4 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005588:	ac25      	add	r4, sp, #148	; 0x94
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8005590:	441d      	add	r5, r3
 8005592:	d00a      	beq.n	80055aa <_svfprintf_r+0xfa2>
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d16e      	bne.n	8005678 <_svfprintf_r+0x1070>
 800559a:	2e00      	cmp	r6, #0
 800559c:	d16e      	bne.n	800567c <_svfprintf_r+0x1074>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	9a05      	ldr	r2, [sp, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	429d      	cmp	r5, r3
 80055a6:	bf28      	it	cs
 80055a8:	461d      	movcs	r5, r3
 80055aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80055ac:	9a05      	ldr	r2, [sp, #20]
 80055ae:	4293      	cmp	r3, r2
 80055b0:	db02      	blt.n	80055b8 <_svfprintf_r+0xfb0>
 80055b2:	f01b 0f01 	tst.w	fp, #1
 80055b6:	d00e      	beq.n	80055d6 <_svfprintf_r+0xfce>
 80055b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055c4:	4413      	add	r3, r2
 80055c6:	9324      	str	r3, [sp, #144]	; 0x90
 80055c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ca:	3301      	adds	r3, #1
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80055d0:	f300 80d2 	bgt.w	8005778 <_svfprintf_r+0x1170>
 80055d4:	3408      	adds	r4, #8
 80055d6:	9b05      	ldr	r3, [sp, #20]
 80055d8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80055da:	9a05      	ldr	r2, [sp, #20]
 80055dc:	1b9e      	subs	r6, r3, r6
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	1b5b      	subs	r3, r3, r5
 80055e4:	429e      	cmp	r6, r3
 80055e6:	bfa8      	it	ge
 80055e8:	461e      	movge	r6, r3
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055ee:	dd0a      	ble.n	8005606 <_svfprintf_r+0xffe>
 80055f0:	4433      	add	r3, r6
 80055f2:	9324      	str	r3, [sp, #144]	; 0x90
 80055f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f6:	3301      	adds	r3, #1
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	e9c4 5600 	strd	r5, r6, [r4]
 80055fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005600:	f300 80c4 	bgt.w	800578c <_svfprintf_r+0x1184>
 8005604:	3408      	adds	r4, #8
 8005606:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005608:	9b05      	ldr	r3, [sp, #20]
 800560a:	2e00      	cmp	r6, #0
 800560c:	eba3 0505 	sub.w	r5, r3, r5
 8005610:	bfa8      	it	ge
 8005612:	1bad      	subge	r5, r5, r6
 8005614:	2d00      	cmp	r5, #0
 8005616:	f77f abda 	ble.w	8004dce <_svfprintf_r+0x7c6>
 800561a:	4ea9      	ldr	r6, [pc, #676]	; (80058c0 <_svfprintf_r+0x12b8>)
 800561c:	2710      	movs	r7, #16
 800561e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005622:	2d10      	cmp	r5, #16
 8005624:	f103 0301 	add.w	r3, r3, #1
 8005628:	f104 0108 	add.w	r1, r4, #8
 800562c:	6026      	str	r6, [r4, #0]
 800562e:	f300 80b7 	bgt.w	80057a0 <_svfprintf_r+0x1198>
 8005632:	442a      	add	r2, r5
 8005634:	6065      	str	r5, [r4, #4]
 8005636:	9224      	str	r2, [sp, #144]	; 0x90
 8005638:	e6c7      	b.n	80053ca <_svfprintf_r+0xdc2>
 800563a:	aa22      	add	r2, sp, #136	; 0x88
 800563c:	4649      	mov	r1, r9
 800563e:	4650      	mov	r0, sl
 8005640:	f001 fd26 	bl	8007090 <__ssprint_r>
 8005644:	2800      	cmp	r0, #0
 8005646:	f040 8173 	bne.w	8005930 <_svfprintf_r+0x1328>
 800564a:	ac25      	add	r4, sp, #148	; 0x94
 800564c:	e77a      	b.n	8005544 <_svfprintf_r+0xf3c>
 800564e:	2010      	movs	r0, #16
 8005650:	4402      	add	r2, r0
 8005652:	2b07      	cmp	r3, #7
 8005654:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005658:	6060      	str	r0, [r4, #4]
 800565a:	dd08      	ble.n	800566e <_svfprintf_r+0x1066>
 800565c:	aa22      	add	r2, sp, #136	; 0x88
 800565e:	4649      	mov	r1, r9
 8005660:	4650      	mov	r0, sl
 8005662:	f001 fd15 	bl	8007090 <__ssprint_r>
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 8162 	bne.w	8005930 <_svfprintf_r+0x1328>
 800566c:	a925      	add	r1, sp, #148	; 0x94
 800566e:	3f10      	subs	r7, #16
 8005670:	460c      	mov	r4, r1
 8005672:	e771      	b.n	8005558 <_svfprintf_r+0xf50>
 8005674:	460c      	mov	r4, r1
 8005676:	e788      	b.n	800558a <_svfprintf_r+0xf82>
 8005678:	2e00      	cmp	r6, #0
 800567a:	d04d      	beq.n	8005718 <_svfprintf_r+0x1110>
 800567c:	3e01      	subs	r6, #1
 800567e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800568a:	4413      	add	r3, r2
 800568c:	9324      	str	r3, [sp, #144]	; 0x90
 800568e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005690:	3301      	adds	r3, #1
 8005692:	2b07      	cmp	r3, #7
 8005694:	9323      	str	r3, [sp, #140]	; 0x8c
 8005696:	dc46      	bgt.n	8005726 <_svfprintf_r+0x111e>
 8005698:	3408      	adds	r4, #8
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	9a05      	ldr	r2, [sp, #20]
 800569e:	eb03 0802 	add.w	r8, r3, r2
 80056a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	eba8 0805 	sub.w	r8, r8, r5
 80056aa:	4598      	cmp	r8, r3
 80056ac:	bfa8      	it	ge
 80056ae:	4698      	movge	r8, r3
 80056b0:	f1b8 0f00 	cmp.w	r8, #0
 80056b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056b6:	dd09      	ble.n	80056cc <_svfprintf_r+0x10c4>
 80056b8:	4443      	add	r3, r8
 80056ba:	9324      	str	r3, [sp, #144]	; 0x90
 80056bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056be:	3301      	adds	r3, #1
 80056c0:	2b07      	cmp	r3, #7
 80056c2:	e9c4 5800 	strd	r5, r8, [r4]
 80056c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80056c8:	dc37      	bgt.n	800573a <_svfprintf_r+0x1132>
 80056ca:	3408      	adds	r4, #8
 80056cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ce:	781f      	ldrb	r7, [r3, #0]
 80056d0:	f1b8 0f00 	cmp.w	r8, #0
 80056d4:	bfa8      	it	ge
 80056d6:	eba7 0708 	subge.w	r7, r7, r8
 80056da:	2f00      	cmp	r7, #0
 80056dc:	dd18      	ble.n	8005710 <_svfprintf_r+0x1108>
 80056de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80056e2:	4877      	ldr	r0, [pc, #476]	; (80058c0 <_svfprintf_r+0x12b8>)
 80056e4:	6020      	str	r0, [r4, #0]
 80056e6:	2f10      	cmp	r7, #16
 80056e8:	f103 0301 	add.w	r3, r3, #1
 80056ec:	f104 0108 	add.w	r1, r4, #8
 80056f0:	dc2d      	bgt.n	800574e <_svfprintf_r+0x1146>
 80056f2:	443a      	add	r2, r7
 80056f4:	2b07      	cmp	r3, #7
 80056f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80056fa:	6067      	str	r7, [r4, #4]
 80056fc:	dd3a      	ble.n	8005774 <_svfprintf_r+0x116c>
 80056fe:	aa22      	add	r2, sp, #136	; 0x88
 8005700:	4649      	mov	r1, r9
 8005702:	4650      	mov	r0, sl
 8005704:	f001 fcc4 	bl	8007090 <__ssprint_r>
 8005708:	2800      	cmp	r0, #0
 800570a:	f040 8111 	bne.w	8005930 <_svfprintf_r+0x1328>
 800570e:	ac25      	add	r4, sp, #148	; 0x94
 8005710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	441d      	add	r5, r3
 8005716:	e73d      	b.n	8005594 <_svfprintf_r+0xf8c>
 8005718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571a:	3b01      	subs	r3, #1
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	9b08      	ldr	r3, [sp, #32]
 8005720:	3b01      	subs	r3, #1
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	e7ab      	b.n	800567e <_svfprintf_r+0x1076>
 8005726:	aa22      	add	r2, sp, #136	; 0x88
 8005728:	4649      	mov	r1, r9
 800572a:	4650      	mov	r0, sl
 800572c:	f001 fcb0 	bl	8007090 <__ssprint_r>
 8005730:	2800      	cmp	r0, #0
 8005732:	f040 80fd 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005736:	ac25      	add	r4, sp, #148	; 0x94
 8005738:	e7af      	b.n	800569a <_svfprintf_r+0x1092>
 800573a:	aa22      	add	r2, sp, #136	; 0x88
 800573c:	4649      	mov	r1, r9
 800573e:	4650      	mov	r0, sl
 8005740:	f001 fca6 	bl	8007090 <__ssprint_r>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 80f3 	bne.w	8005930 <_svfprintf_r+0x1328>
 800574a:	ac25      	add	r4, sp, #148	; 0x94
 800574c:	e7be      	b.n	80056cc <_svfprintf_r+0x10c4>
 800574e:	2010      	movs	r0, #16
 8005750:	4402      	add	r2, r0
 8005752:	2b07      	cmp	r3, #7
 8005754:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005758:	6060      	str	r0, [r4, #4]
 800575a:	dd08      	ble.n	800576e <_svfprintf_r+0x1166>
 800575c:	aa22      	add	r2, sp, #136	; 0x88
 800575e:	4649      	mov	r1, r9
 8005760:	4650      	mov	r0, sl
 8005762:	f001 fc95 	bl	8007090 <__ssprint_r>
 8005766:	2800      	cmp	r0, #0
 8005768:	f040 80e2 	bne.w	8005930 <_svfprintf_r+0x1328>
 800576c:	a925      	add	r1, sp, #148	; 0x94
 800576e:	3f10      	subs	r7, #16
 8005770:	460c      	mov	r4, r1
 8005772:	e7b4      	b.n	80056de <_svfprintf_r+0x10d6>
 8005774:	460c      	mov	r4, r1
 8005776:	e7cb      	b.n	8005710 <_svfprintf_r+0x1108>
 8005778:	aa22      	add	r2, sp, #136	; 0x88
 800577a:	4649      	mov	r1, r9
 800577c:	4650      	mov	r0, sl
 800577e:	f001 fc87 	bl	8007090 <__ssprint_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	f040 80d4 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005788:	ac25      	add	r4, sp, #148	; 0x94
 800578a:	e724      	b.n	80055d6 <_svfprintf_r+0xfce>
 800578c:	aa22      	add	r2, sp, #136	; 0x88
 800578e:	4649      	mov	r1, r9
 8005790:	4650      	mov	r0, sl
 8005792:	f001 fc7d 	bl	8007090 <__ssprint_r>
 8005796:	2800      	cmp	r0, #0
 8005798:	f040 80ca 	bne.w	8005930 <_svfprintf_r+0x1328>
 800579c:	ac25      	add	r4, sp, #148	; 0x94
 800579e:	e732      	b.n	8005606 <_svfprintf_r+0xffe>
 80057a0:	3210      	adds	r2, #16
 80057a2:	2b07      	cmp	r3, #7
 80057a4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80057a8:	6067      	str	r7, [r4, #4]
 80057aa:	dd08      	ble.n	80057be <_svfprintf_r+0x11b6>
 80057ac:	aa22      	add	r2, sp, #136	; 0x88
 80057ae:	4649      	mov	r1, r9
 80057b0:	4650      	mov	r0, sl
 80057b2:	f001 fc6d 	bl	8007090 <__ssprint_r>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f040 80ba 	bne.w	8005930 <_svfprintf_r+0x1328>
 80057bc:	a925      	add	r1, sp, #148	; 0x94
 80057be:	3d10      	subs	r5, #16
 80057c0:	460c      	mov	r4, r1
 80057c2:	e72c      	b.n	800561e <_svfprintf_r+0x1016>
 80057c4:	9a05      	ldr	r2, [sp, #20]
 80057c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057c8:	2a01      	cmp	r2, #1
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	f107 0701 	add.w	r7, r7, #1
 80057d2:	f103 0301 	add.w	r3, r3, #1
 80057d6:	f04f 0201 	mov.w	r2, #1
 80057da:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80057de:	f104 0508 	add.w	r5, r4, #8
 80057e2:	6062      	str	r2, [r4, #4]
 80057e4:	dc02      	bgt.n	80057ec <_svfprintf_r+0x11e4>
 80057e6:	f01b 0f01 	tst.w	fp, #1
 80057ea:	d07b      	beq.n	80058e4 <_svfprintf_r+0x12dc>
 80057ec:	2b07      	cmp	r3, #7
 80057ee:	dd08      	ble.n	8005802 <_svfprintf_r+0x11fa>
 80057f0:	aa22      	add	r2, sp, #136	; 0x88
 80057f2:	4649      	mov	r1, r9
 80057f4:	4650      	mov	r0, sl
 80057f6:	f001 fc4b 	bl	8007090 <__ssprint_r>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 8098 	bne.w	8005930 <_svfprintf_r+0x1328>
 8005800:	ad25      	add	r5, sp, #148	; 0x94
 8005802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800580a:	606b      	str	r3, [r5, #4]
 800580c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800580e:	4413      	add	r3, r2
 8005810:	9324      	str	r3, [sp, #144]	; 0x90
 8005812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005814:	3301      	adds	r3, #1
 8005816:	2b07      	cmp	r3, #7
 8005818:	9323      	str	r3, [sp, #140]	; 0x8c
 800581a:	dc32      	bgt.n	8005882 <_svfprintf_r+0x127a>
 800581c:	3508      	adds	r5, #8
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005824:	1e5c      	subs	r4, r3, #1
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800582e:	f7fb f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8005832:	2800      	cmp	r0, #0
 8005834:	d12e      	bne.n	8005894 <_svfprintf_r+0x128c>
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	e9c5 3400 	strd	r3, r4, [r5]
 800583e:	9b05      	ldr	r3, [sp, #20]
 8005840:	3701      	adds	r7, #1
 8005842:	3e01      	subs	r6, #1
 8005844:	441e      	add	r6, r3
 8005846:	2f07      	cmp	r7, #7
 8005848:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800584c:	dd4d      	ble.n	80058ea <_svfprintf_r+0x12e2>
 800584e:	aa22      	add	r2, sp, #136	; 0x88
 8005850:	4649      	mov	r1, r9
 8005852:	4650      	mov	r0, sl
 8005854:	f001 fc1c 	bl	8007090 <__ssprint_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	d169      	bne.n	8005930 <_svfprintf_r+0x1328>
 800585c:	ad25      	add	r5, sp, #148	; 0x94
 800585e:	ab1e      	add	r3, sp, #120	; 0x78
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005864:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005866:	606b      	str	r3, [r5, #4]
 8005868:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800586a:	4413      	add	r3, r2
 800586c:	9324      	str	r3, [sp, #144]	; 0x90
 800586e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005870:	3301      	adds	r3, #1
 8005872:	2b07      	cmp	r3, #7
 8005874:	9323      	str	r3, [sp, #140]	; 0x8c
 8005876:	f73f adac 	bgt.w	80053d2 <_svfprintf_r+0xdca>
 800587a:	f105 0408 	add.w	r4, r5, #8
 800587e:	f7ff baa6 	b.w	8004dce <_svfprintf_r+0x7c6>
 8005882:	aa22      	add	r2, sp, #136	; 0x88
 8005884:	4649      	mov	r1, r9
 8005886:	4650      	mov	r0, sl
 8005888:	f001 fc02 	bl	8007090 <__ssprint_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	d14f      	bne.n	8005930 <_svfprintf_r+0x1328>
 8005890:	ad25      	add	r5, sp, #148	; 0x94
 8005892:	e7c4      	b.n	800581e <_svfprintf_r+0x1216>
 8005894:	2c00      	cmp	r4, #0
 8005896:	dde2      	ble.n	800585e <_svfprintf_r+0x1256>
 8005898:	4e09      	ldr	r6, [pc, #36]	; (80058c0 <_svfprintf_r+0x12b8>)
 800589a:	2710      	movs	r7, #16
 800589c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80058a0:	2c10      	cmp	r4, #16
 80058a2:	f103 0301 	add.w	r3, r3, #1
 80058a6:	f105 0108 	add.w	r1, r5, #8
 80058aa:	602e      	str	r6, [r5, #0]
 80058ac:	dc0a      	bgt.n	80058c4 <_svfprintf_r+0x12bc>
 80058ae:	606c      	str	r4, [r5, #4]
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	4414      	add	r4, r2
 80058b4:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80058b8:	dcc9      	bgt.n	800584e <_svfprintf_r+0x1246>
 80058ba:	460d      	mov	r5, r1
 80058bc:	e7cf      	b.n	800585e <_svfprintf_r+0x1256>
 80058be:	bf00      	nop
 80058c0:	0800a184 	.word	0x0800a184
 80058c4:	3210      	adds	r2, #16
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80058cc:	606f      	str	r7, [r5, #4]
 80058ce:	dd06      	ble.n	80058de <_svfprintf_r+0x12d6>
 80058d0:	aa22      	add	r2, sp, #136	; 0x88
 80058d2:	4649      	mov	r1, r9
 80058d4:	4650      	mov	r0, sl
 80058d6:	f001 fbdb 	bl	8007090 <__ssprint_r>
 80058da:	bb48      	cbnz	r0, 8005930 <_svfprintf_r+0x1328>
 80058dc:	a925      	add	r1, sp, #148	; 0x94
 80058de:	3c10      	subs	r4, #16
 80058e0:	460d      	mov	r5, r1
 80058e2:	e7db      	b.n	800589c <_svfprintf_r+0x1294>
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	ddba      	ble.n	800585e <_svfprintf_r+0x1256>
 80058e8:	e7b1      	b.n	800584e <_svfprintf_r+0x1246>
 80058ea:	3508      	adds	r5, #8
 80058ec:	e7b7      	b.n	800585e <_svfprintf_r+0x1256>
 80058ee:	460c      	mov	r4, r1
 80058f0:	f7ff ba6d 	b.w	8004dce <_svfprintf_r+0x7c6>
 80058f4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80058f8:	1a9d      	subs	r5, r3, r2
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	f77f aa6b 	ble.w	8004dd6 <_svfprintf_r+0x7ce>
 8005900:	4e37      	ldr	r6, [pc, #220]	; (80059e0 <_svfprintf_r+0x13d8>)
 8005902:	2710      	movs	r7, #16
 8005904:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005908:	2d10      	cmp	r5, #16
 800590a:	f103 0301 	add.w	r3, r3, #1
 800590e:	6026      	str	r6, [r4, #0]
 8005910:	dc18      	bgt.n	8005944 <_svfprintf_r+0x133c>
 8005912:	6065      	str	r5, [r4, #4]
 8005914:	2b07      	cmp	r3, #7
 8005916:	4415      	add	r5, r2
 8005918:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800591c:	f77f aa5b 	ble.w	8004dd6 <_svfprintf_r+0x7ce>
 8005920:	aa22      	add	r2, sp, #136	; 0x88
 8005922:	4649      	mov	r1, r9
 8005924:	4650      	mov	r0, sl
 8005926:	f001 fbb3 	bl	8007090 <__ssprint_r>
 800592a:	2800      	cmp	r0, #0
 800592c:	f43f aa53 	beq.w	8004dd6 <_svfprintf_r+0x7ce>
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f43f a874 	beq.w	8004a20 <_svfprintf_r+0x418>
 8005938:	4619      	mov	r1, r3
 800593a:	4650      	mov	r0, sl
 800593c:	f7fe fb5e 	bl	8003ffc <_free_r>
 8005940:	f7ff b86e 	b.w	8004a20 <_svfprintf_r+0x418>
 8005944:	3210      	adds	r2, #16
 8005946:	2b07      	cmp	r3, #7
 8005948:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800594c:	6067      	str	r7, [r4, #4]
 800594e:	dc02      	bgt.n	8005956 <_svfprintf_r+0x134e>
 8005950:	3408      	adds	r4, #8
 8005952:	3d10      	subs	r5, #16
 8005954:	e7d6      	b.n	8005904 <_svfprintf_r+0x12fc>
 8005956:	aa22      	add	r2, sp, #136	; 0x88
 8005958:	4649      	mov	r1, r9
 800595a:	4650      	mov	r0, sl
 800595c:	f001 fb98 	bl	8007090 <__ssprint_r>
 8005960:	2800      	cmp	r0, #0
 8005962:	d1e5      	bne.n	8005930 <_svfprintf_r+0x1328>
 8005964:	ac25      	add	r4, sp, #148	; 0x94
 8005966:	e7f4      	b.n	8005952 <_svfprintf_r+0x134a>
 8005968:	9904      	ldr	r1, [sp, #16]
 800596a:	4650      	mov	r0, sl
 800596c:	f7fe fb46 	bl	8003ffc <_free_r>
 8005970:	f7ff ba49 	b.w	8004e06 <_svfprintf_r+0x7fe>
 8005974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005976:	2b00      	cmp	r3, #0
 8005978:	f43f a852 	beq.w	8004a20 <_svfprintf_r+0x418>
 800597c:	aa22      	add	r2, sp, #136	; 0x88
 800597e:	4649      	mov	r1, r9
 8005980:	4650      	mov	r0, sl
 8005982:	f001 fb85 	bl	8007090 <__ssprint_r>
 8005986:	f7ff b84b 	b.w	8004a20 <_svfprintf_r+0x418>
 800598a:	ea55 0206 	orrs.w	r2, r5, r6
 800598e:	f8cd b010 	str.w	fp, [sp, #16]
 8005992:	f43f ab5e 	beq.w	8005052 <_svfprintf_r+0xa4a>
 8005996:	2b01      	cmp	r3, #1
 8005998:	f43f abff 	beq.w	800519a <_svfprintf_r+0xb92>
 800599c:	2b02      	cmp	r3, #2
 800599e:	ab4e      	add	r3, sp, #312	; 0x138
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	f43f ac4d 	beq.w	8005240 <_svfprintf_r+0xc38>
 80059a6:	9a03      	ldr	r2, [sp, #12]
 80059a8:	f005 0307 	and.w	r3, r5, #7
 80059ac:	4611      	mov	r1, r2
 80059ae:	3330      	adds	r3, #48	; 0x30
 80059b0:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80059b4:	08ed      	lsrs	r5, r5, #3
 80059b6:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 80059ba:	08f6      	lsrs	r6, r6, #3
 80059bc:	9103      	str	r1, [sp, #12]
 80059be:	ea55 0106 	orrs.w	r1, r5, r6
 80059c2:	d1f0      	bne.n	80059a6 <_svfprintf_r+0x139e>
 80059c4:	9904      	ldr	r1, [sp, #16]
 80059c6:	07c9      	lsls	r1, r1, #31
 80059c8:	f57f ac2a 	bpl.w	8005220 <_svfprintf_r+0xc18>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	f43f ac27 	beq.w	8005220 <_svfprintf_r+0xc18>
 80059d2:	9903      	ldr	r1, [sp, #12]
 80059d4:	2330      	movs	r3, #48	; 0x30
 80059d6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80059da:	1e93      	subs	r3, r2, #2
 80059dc:	9303      	str	r3, [sp, #12]
 80059de:	e41f      	b.n	8005220 <_svfprintf_r+0xc18>
 80059e0:	0800a174 	.word	0x0800a174

080059e4 <_fclose_r>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4606      	mov	r6, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	b911      	cbnz	r1, 80059f2 <_fclose_r+0xe>
 80059ec:	2500      	movs	r5, #0
 80059ee:	4628      	mov	r0, r5
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	b118      	cbz	r0, 80059fc <_fclose_r+0x18>
 80059f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059f6:	b90b      	cbnz	r3, 80059fc <_fclose_r+0x18>
 80059f8:	f7fe f972 	bl	8003ce0 <__sinit>
 80059fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059fe:	07d8      	lsls	r0, r3, #31
 8005a00:	d405      	bmi.n	8005a0e <_fclose_r+0x2a>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	0599      	lsls	r1, r3, #22
 8005a06:	d402      	bmi.n	8005a0e <_fclose_r+0x2a>
 8005a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0a:	f7fe fa91 	bl	8003f30 <__retarget_lock_acquire_recursive>
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	b93b      	cbnz	r3, 8005a24 <_fclose_r+0x40>
 8005a14:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005a16:	f015 0501 	ands.w	r5, r5, #1
 8005a1a:	d1e7      	bne.n	80059ec <_fclose_r+0x8>
 8005a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1e:	f7fe fa88 	bl	8003f32 <__retarget_lock_release_recursive>
 8005a22:	e7e4      	b.n	80059ee <_fclose_r+0xa>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 f834 	bl	8005a94 <__sflush_r>
 8005a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a2e:	4605      	mov	r5, r0
 8005a30:	b133      	cbz	r3, 8005a40 <_fclose_r+0x5c>
 8005a32:	69e1      	ldr	r1, [r4, #28]
 8005a34:	4630      	mov	r0, r6
 8005a36:	4798      	blx	r3
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	bfb8      	it	lt
 8005a3c:	f04f 35ff 	movlt.w	r5, #4294967295
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	061a      	lsls	r2, r3, #24
 8005a44:	d503      	bpl.n	8005a4e <_fclose_r+0x6a>
 8005a46:	6921      	ldr	r1, [r4, #16]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f7fe fad7 	bl	8003ffc <_free_r>
 8005a4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a50:	b141      	cbz	r1, 8005a64 <_fclose_r+0x80>
 8005a52:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005a56:	4299      	cmp	r1, r3
 8005a58:	d002      	beq.n	8005a60 <_fclose_r+0x7c>
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7fe face 	bl	8003ffc <_free_r>
 8005a60:	2300      	movs	r3, #0
 8005a62:	6323      	str	r3, [r4, #48]	; 0x30
 8005a64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005a66:	b121      	cbz	r1, 8005a72 <_fclose_r+0x8e>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7fe fac7 	bl	8003ffc <_free_r>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6463      	str	r3, [r4, #68]	; 0x44
 8005a72:	f7fe f929 	bl	8003cc8 <__sfp_lock_acquire>
 8005a76:	2300      	movs	r3, #0
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7c:	07db      	lsls	r3, r3, #31
 8005a7e:	d402      	bmi.n	8005a86 <_fclose_r+0xa2>
 8005a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a82:	f7fe fa56 	bl	8003f32 <__retarget_lock_release_recursive>
 8005a86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a88:	f7fe fa51 	bl	8003f2e <__retarget_lock_close_recursive>
 8005a8c:	f7fe f922 	bl	8003cd4 <__sfp_lock_release>
 8005a90:	e7ad      	b.n	80059ee <_fclose_r+0xa>
	...

08005a94 <__sflush_r>:
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	0718      	lsls	r0, r3, #28
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	d45f      	bmi.n	8005b66 <__sflush_r+0xd2>
 8005aa6:	684b      	ldr	r3, [r1, #4]
 8005aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	818a      	strh	r2, [r1, #12]
 8005ab0:	dc05      	bgt.n	8005abe <__sflush_r+0x2a>
 8005ab2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc02      	bgt.n	8005abe <__sflush_r+0x2a>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	d0f9      	beq.n	8005ab8 <__sflush_r+0x24>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005aca:	682f      	ldr	r7, [r5, #0]
 8005acc:	69e1      	ldr	r1, [r4, #28]
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	d036      	beq.n	8005b40 <__sflush_r+0xac>
 8005ad2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	075a      	lsls	r2, r3, #29
 8005ad8:	d505      	bpl.n	8005ae6 <__sflush_r+0x52>
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	1ac0      	subs	r0, r0, r3
 8005ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ae0:	b10b      	cbz	r3, 8005ae6 <__sflush_r+0x52>
 8005ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ae4:	1ac0      	subs	r0, r0, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aec:	69e1      	ldr	r1, [r4, #28]
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b0      	blx	r6
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	d106      	bne.n	8005b06 <__sflush_r+0x72>
 8005af8:	6829      	ldr	r1, [r5, #0]
 8005afa:	291d      	cmp	r1, #29
 8005afc:	d82f      	bhi.n	8005b5e <__sflush_r+0xca>
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <__sflush_r+0x118>)
 8005b00:	410a      	asrs	r2, r1
 8005b02:	07d6      	lsls	r6, r2, #31
 8005b04:	d42b      	bmi.n	8005b5e <__sflush_r+0xca>
 8005b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	6062      	str	r2, [r4, #4]
 8005b10:	04d9      	lsls	r1, r3, #19
 8005b12:	6922      	ldr	r2, [r4, #16]
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	6022      	str	r2, [r4, #0]
 8005b18:	d504      	bpl.n	8005b24 <__sflush_r+0x90>
 8005b1a:	1c42      	adds	r2, r0, #1
 8005b1c:	d101      	bne.n	8005b22 <__sflush_r+0x8e>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	b903      	cbnz	r3, 8005b24 <__sflush_r+0x90>
 8005b22:	6520      	str	r0, [r4, #80]	; 0x50
 8005b24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b26:	602f      	str	r7, [r5, #0]
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d0c5      	beq.n	8005ab8 <__sflush_r+0x24>
 8005b2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <__sflush_r+0xa6>
 8005b34:	4628      	mov	r0, r5
 8005b36:	f7fe fa61 	bl	8003ffc <_free_r>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	6320      	str	r0, [r4, #48]	; 0x30
 8005b3e:	e7bc      	b.n	8005aba <__sflush_r+0x26>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b0      	blx	r6
 8005b46:	1c41      	adds	r1, r0, #1
 8005b48:	d1c4      	bne.n	8005ad4 <__sflush_r+0x40>
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0c1      	beq.n	8005ad4 <__sflush_r+0x40>
 8005b50:	2b1d      	cmp	r3, #29
 8005b52:	d001      	beq.n	8005b58 <__sflush_r+0xc4>
 8005b54:	2b16      	cmp	r3, #22
 8005b56:	d101      	bne.n	8005b5c <__sflush_r+0xc8>
 8005b58:	602f      	str	r7, [r5, #0]
 8005b5a:	e7ad      	b.n	8005ab8 <__sflush_r+0x24>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	e7a9      	b.n	8005aba <__sflush_r+0x26>
 8005b66:	690f      	ldr	r7, [r1, #16]
 8005b68:	2f00      	cmp	r7, #0
 8005b6a:	d0a5      	beq.n	8005ab8 <__sflush_r+0x24>
 8005b6c:	079b      	lsls	r3, r3, #30
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	bf08      	it	eq
 8005b72:	694b      	ldreq	r3, [r1, #20]
 8005b74:	600f      	str	r7, [r1, #0]
 8005b76:	bf18      	it	ne
 8005b78:	2300      	movne	r3, #0
 8005b7a:	eba6 0807 	sub.w	r8, r6, r7
 8005b7e:	608b      	str	r3, [r1, #8]
 8005b80:	f1b8 0f00 	cmp.w	r8, #0
 8005b84:	dd98      	ble.n	8005ab8 <__sflush_r+0x24>
 8005b86:	69e1      	ldr	r1, [r4, #28]
 8005b88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b8a:	4643      	mov	r3, r8
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b0      	blx	r6
 8005b92:	2800      	cmp	r0, #0
 8005b94:	dc06      	bgt.n	8005ba4 <__sflush_r+0x110>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba2:	e78a      	b.n	8005aba <__sflush_r+0x26>
 8005ba4:	4407      	add	r7, r0
 8005ba6:	eba8 0800 	sub.w	r8, r8, r0
 8005baa:	e7e9      	b.n	8005b80 <__sflush_r+0xec>
 8005bac:	dfbffffe 	.word	0xdfbffffe

08005bb0 <_fflush_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	b118      	cbz	r0, 8005bc0 <_fflush_r+0x10>
 8005bb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005bba:	b90b      	cbnz	r3, 8005bc0 <_fflush_r+0x10>
 8005bbc:	f7fe f890 	bl	8003ce0 <__sinit>
 8005bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc4:	b1bb      	cbz	r3, 8005bf6 <_fflush_r+0x46>
 8005bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d404      	bmi.n	8005bd6 <_fflush_r+0x26>
 8005bcc:	0599      	lsls	r1, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_fflush_r+0x26>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f7fe f9ad 	bl	8003f30 <__retarget_lock_acquire_recursive>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f7ff ff5b 	bl	8005a94 <__sflush_r>
 8005bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be0:	07da      	lsls	r2, r3, #31
 8005be2:	4605      	mov	r5, r0
 8005be4:	d405      	bmi.n	8005bf2 <_fflush_r+0x42>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	059b      	lsls	r3, r3, #22
 8005bea:	d402      	bmi.n	8005bf2 <_fflush_r+0x42>
 8005bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bee:	f7fe f9a0 	bl	8003f32 <__retarget_lock_release_recursive>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	e7fb      	b.n	8005bf2 <_fflush_r+0x42>

08005bfa <strncpy>:
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	3901      	subs	r1, #1
 8005bfe:	4603      	mov	r3, r0
 8005c00:	b132      	cbz	r2, 8005c10 <strncpy+0x16>
 8005c02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005c06:	f803 4b01 	strb.w	r4, [r3], #1
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	2c00      	cmp	r4, #0
 8005c0e:	d1f7      	bne.n	8005c00 <strncpy+0x6>
 8005c10:	441a      	add	r2, r3
 8005c12:	2100      	movs	r1, #0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <strncpy+0x20>
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <strncpy+0x1a>

08005c20 <_localeconv_r>:
 8005c20:	4800      	ldr	r0, [pc, #0]	; (8005c24 <_localeconv_r+0x4>)
 8005c22:	4770      	bx	lr
 8005c24:	20000648 	.word	0x20000648

08005c28 <_sbrk_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_sbrk_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fc fa04 	bl	8002040 <_sbrk>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_sbrk_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_sbrk_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20000ac8 	.word	0x20000ac8

08005c48 <__libc_fini_array>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	; (8005c68 <__libc_fini_array+0x20>)
 8005c4c:	4c07      	ldr	r4, [pc, #28]	; (8005c6c <__libc_fini_array+0x24>)
 8005c4e:	1b64      	subs	r4, r4, r5
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	b91c      	cbnz	r4, 8005c5c <__libc_fini_array+0x14>
 8005c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c58:	f002 bd3c 	b.w	80086d4 <_fini>
 8005c5c:	3c01      	subs	r4, #1
 8005c5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005c62:	4798      	blx	r3
 8005c64:	e7f5      	b.n	8005c52 <__libc_fini_array+0xa>
 8005c66:	bf00      	nop
 8005c68:	0800a4dc 	.word	0x0800a4dc
 8005c6c:	0800a4e0 	.word	0x0800a4e0

08005c70 <sysconf>:
 8005c70:	2808      	cmp	r0, #8
 8005c72:	b508      	push	{r3, lr}
 8005c74:	d006      	beq.n	8005c84 <sysconf+0x14>
 8005c76:	f7fe f92f 	bl	8003ed8 <__errno>
 8005c7a:	2316      	movs	r3, #22
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c82:	bd08      	pop	{r3, pc}
 8005c84:	2080      	movs	r0, #128	; 0x80
 8005c86:	e7fc      	b.n	8005c82 <sysconf+0x12>

08005c88 <frexp>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	ec55 4b10 	vmov	r4, r5, d0
 8005c90:	6001      	str	r1, [r0, #0]
 8005c92:	4916      	ldr	r1, [pc, #88]	; (8005cec <frexp+0x64>)
 8005c94:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005c98:	428a      	cmp	r2, r1
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	dc22      	bgt.n	8005ce6 <frexp+0x5e>
 8005ca0:	ee10 1a10 	vmov	r1, s0
 8005ca4:	4311      	orrs	r1, r2
 8005ca6:	d01e      	beq.n	8005ce6 <frexp+0x5e>
 8005ca8:	4911      	ldr	r1, [pc, #68]	; (8005cf0 <frexp+0x68>)
 8005caa:	4029      	ands	r1, r5
 8005cac:	b969      	cbnz	r1, 8005cca <frexp+0x42>
 8005cae:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <frexp+0x6c>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	ee10 0a10 	vmov	r0, s0
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7fa fca6 	bl	8000608 <__aeabi_dmul>
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005cc2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	6031      	str	r1, [r6, #0]
 8005cca:	6831      	ldr	r1, [r6, #0]
 8005ccc:	1512      	asrs	r2, r2, #20
 8005cce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cd2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8005cd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cda:	4411      	add	r1, r2
 8005cdc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8005ce0:	6031      	str	r1, [r6, #0]
 8005ce2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8005ce6:	ec45 4b10 	vmov	d0, r4, r5
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	7fefffff 	.word	0x7fefffff
 8005cf0:	7ff00000 	.word	0x7ff00000
 8005cf4:	43500000 	.word	0x43500000

08005cf8 <__register_exitproc>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005d74 <__register_exitproc+0x7c>
 8005d00:	4606      	mov	r6, r0
 8005d02:	f8da 0000 	ldr.w	r0, [sl]
 8005d06:	4698      	mov	r8, r3
 8005d08:	460f      	mov	r7, r1
 8005d0a:	4691      	mov	r9, r2
 8005d0c:	f7fe f910 	bl	8003f30 <__retarget_lock_acquire_recursive>
 8005d10:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <__register_exitproc+0x74>)
 8005d12:	681c      	ldr	r4, [r3, #0]
 8005d14:	b90c      	cbnz	r4, 8005d1a <__register_exitproc+0x22>
 8005d16:	4c16      	ldr	r4, [pc, #88]	; (8005d70 <__register_exitproc+0x78>)
 8005d18:	601c      	str	r4, [r3, #0]
 8005d1a:	6865      	ldr	r5, [r4, #4]
 8005d1c:	f8da 0000 	ldr.w	r0, [sl]
 8005d20:	2d1f      	cmp	r5, #31
 8005d22:	dd05      	ble.n	8005d30 <__register_exitproc+0x38>
 8005d24:	f7fe f905 	bl	8003f32 <__retarget_lock_release_recursive>
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d30:	b19e      	cbz	r6, 8005d5a <__register_exitproc+0x62>
 8005d32:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8005d3c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8005d40:	40aa      	lsls	r2, r5
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8005d48:	2e02      	cmp	r6, #2
 8005d4a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005d4e:	bf02      	ittt	eq
 8005d50:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8005d54:	4313      	orreq	r3, r2
 8005d56:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8005d5a:	1c6b      	adds	r3, r5, #1
 8005d5c:	3502      	adds	r5, #2
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005d64:	f7fe f8e5 	bl	8003f32 <__retarget_lock_release_recursive>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e7df      	b.n	8005d2c <__register_exitproc+0x34>
 8005d6c:	20000ad0 	.word	0x20000ad0
 8005d70:	20000b08 	.word	0x20000b08
 8005d74:	20000144 	.word	0x20000144

08005d78 <quorem>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	6903      	ldr	r3, [r0, #16]
 8005d7e:	690c      	ldr	r4, [r1, #16]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	4607      	mov	r7, r0
 8005d84:	db7e      	blt.n	8005e84 <quorem+0x10c>
 8005d86:	3c01      	subs	r4, #1
 8005d88:	f101 0814 	add.w	r8, r1, #20
 8005d8c:	f100 0514 	add.w	r5, r0, #20
 8005d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	429a      	cmp	r2, r3
 8005da2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005da6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005daa:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dae:	d331      	bcc.n	8005e14 <quorem+0x9c>
 8005db0:	f04f 0e00 	mov.w	lr, #0
 8005db4:	4640      	mov	r0, r8
 8005db6:	46ac      	mov	ip, r5
 8005db8:	46f2      	mov	sl, lr
 8005dba:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dbe:	b293      	uxth	r3, r2
 8005dc0:	fb06 e303 	mla	r3, r6, r3, lr
 8005dc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dc8:	0c1a      	lsrs	r2, r3, #16
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd0:	f8dc a000 	ldr.w	sl, [ip]
 8005dd4:	fa13 f38a 	uxtah	r3, r3, sl
 8005dd8:	fb06 220e 	mla	r2, r6, lr, r2
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	9b00      	ldr	r3, [sp, #0]
 8005de0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005de4:	b292      	uxth	r2, r2
 8005de6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dee:	f8bd 3000 	ldrh.w	r3, [sp]
 8005df2:	4581      	cmp	r9, r0
 8005df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005df8:	f84c 3b04 	str.w	r3, [ip], #4
 8005dfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e00:	d2db      	bcs.n	8005dba <quorem+0x42>
 8005e02:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e06:	b92b      	cbnz	r3, 8005e14 <quorem+0x9c>
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	429d      	cmp	r5, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	d32c      	bcc.n	8005e6c <quorem+0xf4>
 8005e12:	613c      	str	r4, [r7, #16]
 8005e14:	4638      	mov	r0, r7
 8005e16:	f001 f83b 	bl	8006e90 <__mcmp>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	db22      	blt.n	8005e64 <quorem+0xec>
 8005e1e:	3601      	adds	r6, #1
 8005e20:	4629      	mov	r1, r5
 8005e22:	2000      	movs	r0, #0
 8005e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e28:	f8d1 c000 	ldr.w	ip, [r1]
 8005e2c:	b293      	uxth	r3, r2
 8005e2e:	1ac3      	subs	r3, r0, r3
 8005e30:	0c12      	lsrs	r2, r2, #16
 8005e32:	fa13 f38c 	uxtah	r3, r3, ip
 8005e36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e44:	45c1      	cmp	r9, r8
 8005e46:	f841 3b04 	str.w	r3, [r1], #4
 8005e4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e4e:	d2e9      	bcs.n	8005e24 <quorem+0xac>
 8005e50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e58:	b922      	cbnz	r2, 8005e64 <quorem+0xec>
 8005e5a:	3b04      	subs	r3, #4
 8005e5c:	429d      	cmp	r5, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	d30a      	bcc.n	8005e78 <quorem+0x100>
 8005e62:	613c      	str	r4, [r7, #16]
 8005e64:	4630      	mov	r0, r6
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	d1ce      	bne.n	8005e12 <quorem+0x9a>
 8005e74:	3c01      	subs	r4, #1
 8005e76:	e7c9      	b.n	8005e0c <quorem+0x94>
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	3b04      	subs	r3, #4
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d1f0      	bne.n	8005e62 <quorem+0xea>
 8005e80:	3c01      	subs	r4, #1
 8005e82:	e7eb      	b.n	8005e5c <quorem+0xe4>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7ee      	b.n	8005e66 <quorem+0xee>

08005e88 <_dtoa_r>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	ed2d 8b04 	vpush	{d8-d9}
 8005e90:	b093      	sub	sp, #76	; 0x4c
 8005e92:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e96:	9107      	str	r1, [sp, #28]
 8005e98:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005e9a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e9e:	ec57 6b10 	vmov	r6, r7, d0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ea6:	b141      	cbz	r1, 8005eba <_dtoa_r+0x32>
 8005ea8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005eaa:	604a      	str	r2, [r1, #4]
 8005eac:	2301      	movs	r3, #1
 8005eae:	4093      	lsls	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
 8005eb2:	f000 fde4 	bl	8006a7e <_Bfree>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005eba:	1e3b      	subs	r3, r7, #0
 8005ebc:	bfb9      	ittee	lt
 8005ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	9303      	strlt	r3, [sp, #12]
 8005ec4:	2300      	movge	r3, #0
 8005ec6:	602b      	strge	r3, [r5, #0]
 8005ec8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ecc:	4ba2      	ldr	r3, [pc, #648]	; (8006158 <_dtoa_r+0x2d0>)
 8005ece:	bfbc      	itt	lt
 8005ed0:	2201      	movlt	r2, #1
 8005ed2:	602a      	strlt	r2, [r5, #0]
 8005ed4:	ea33 0308 	bics.w	r3, r3, r8
 8005ed8:	d11b      	bne.n	8005f12 <_dtoa_r+0x8a>
 8005eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005edc:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ee6:	4333      	orrs	r3, r6
 8005ee8:	f000 858f 	beq.w	8006a0a <_dtoa_r+0xb82>
 8005eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eee:	b90b      	cbnz	r3, 8005ef4 <_dtoa_r+0x6c>
 8005ef0:	4b9a      	ldr	r3, [pc, #616]	; (800615c <_dtoa_r+0x2d4>)
 8005ef2:	e027      	b.n	8005f44 <_dtoa_r+0xbc>
 8005ef4:	4b99      	ldr	r3, [pc, #612]	; (800615c <_dtoa_r+0x2d4>)
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	3303      	adds	r3, #3
 8005efa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	9800      	ldr	r0, [sp, #0]
 8005f00:	b013      	add	sp, #76	; 0x4c
 8005f02:	ecbd 8b04 	vpop	{d8-d9}
 8005f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0a:	4b95      	ldr	r3, [pc, #596]	; (8006160 <_dtoa_r+0x2d8>)
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	e7f3      	b.n	8005efa <_dtoa_r+0x72>
 8005f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	ec51 0b17 	vmov	r0, r1, d7
 8005f1c:	eeb0 8a47 	vmov.f32	s16, s14
 8005f20:	eef0 8a67 	vmov.f32	s17, s15
 8005f24:	2300      	movs	r3, #0
 8005f26:	f7fa fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f2a:	4681      	mov	r9, r0
 8005f2c:	b160      	cbz	r0, 8005f48 <_dtoa_r+0xc0>
 8005f2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f30:	2301      	movs	r3, #1
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8564 	beq.w	8006a04 <_dtoa_r+0xb7c>
 8005f3c:	4b89      	ldr	r3, [pc, #548]	; (8006164 <_dtoa_r+0x2dc>)
 8005f3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	e7da      	b.n	8005efe <_dtoa_r+0x76>
 8005f48:	aa10      	add	r2, sp, #64	; 0x40
 8005f4a:	a911      	add	r1, sp, #68	; 0x44
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005f52:	eef0 0a68 	vmov.f32	s1, s17
 8005f56:	f001 f841 	bl	8006fdc <__d2b>
 8005f5a:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f5e:	4682      	mov	sl, r0
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d07e      	beq.n	8006062 <_dtoa_r+0x1da>
 8005f64:	ee18 3a90 	vmov	r3, s17
 8005f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f6c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005f70:	ec51 0b18 	vmov	r0, r1, d8
 8005f74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f7c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f80:	4619      	mov	r1, r3
 8005f82:	2200      	movs	r2, #0
 8005f84:	4b78      	ldr	r3, [pc, #480]	; (8006168 <_dtoa_r+0x2e0>)
 8005f86:	f7fa f987 	bl	8000298 <__aeabi_dsub>
 8005f8a:	a36d      	add	r3, pc, #436	; (adr r3, 8006140 <_dtoa_r+0x2b8>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa fb3a 	bl	8000608 <__aeabi_dmul>
 8005f94:	a36c      	add	r3, pc, #432	; (adr r3, 8006148 <_dtoa_r+0x2c0>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f97f 	bl	800029c <__adddf3>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	460f      	mov	r7, r1
 8005fa4:	f7fa fac6 	bl	8000534 <__aeabi_i2d>
 8005fa8:	a369      	add	r3, pc, #420	; (adr r3, 8006150 <_dtoa_r+0x2c8>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa fb2b 	bl	8000608 <__aeabi_dmul>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa f96f 	bl	800029c <__adddf3>
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	f7fa fdd1 	bl	8000b68 <__aeabi_d2iz>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4683      	mov	fp, r0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fd8c 	bl	8000aec <__aeabi_dcmplt>
 8005fd4:	b148      	cbz	r0, 8005fea <_dtoa_r+0x162>
 8005fd6:	4658      	mov	r0, fp
 8005fd8:	f7fa faac 	bl	8000534 <__aeabi_i2d>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	463b      	mov	r3, r7
 8005fe0:	f7fa fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe4:	b908      	cbnz	r0, 8005fea <_dtoa_r+0x162>
 8005fe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fea:	f1bb 0f16 	cmp.w	fp, #22
 8005fee:	d856      	bhi.n	800609e <_dtoa_r+0x216>
 8005ff0:	4b5e      	ldr	r3, [pc, #376]	; (800616c <_dtoa_r+0x2e4>)
 8005ff2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	ec51 0b18 	vmov	r0, r1, d8
 8005ffe:	f7fa fd75 	bl	8000aec <__aeabi_dcmplt>
 8006002:	2800      	cmp	r0, #0
 8006004:	d04d      	beq.n	80060a2 <_dtoa_r+0x21a>
 8006006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800600a:	2300      	movs	r3, #0
 800600c:	930c      	str	r3, [sp, #48]	; 0x30
 800600e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006010:	1b5b      	subs	r3, r3, r5
 8006012:	1e5a      	subs	r2, r3, #1
 8006014:	bf45      	ittet	mi
 8006016:	f1c3 0301 	rsbmi	r3, r3, #1
 800601a:	9305      	strmi	r3, [sp, #20]
 800601c:	2300      	movpl	r3, #0
 800601e:	2300      	movmi	r3, #0
 8006020:	9206      	str	r2, [sp, #24]
 8006022:	bf54      	ite	pl
 8006024:	9305      	strpl	r3, [sp, #20]
 8006026:	9306      	strmi	r3, [sp, #24]
 8006028:	f1bb 0f00 	cmp.w	fp, #0
 800602c:	db3b      	blt.n	80060a6 <_dtoa_r+0x21e>
 800602e:	9b06      	ldr	r3, [sp, #24]
 8006030:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006034:	445b      	add	r3, fp
 8006036:	9306      	str	r3, [sp, #24]
 8006038:	2300      	movs	r3, #0
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	9b07      	ldr	r3, [sp, #28]
 800603e:	2b09      	cmp	r3, #9
 8006040:	d868      	bhi.n	8006114 <_dtoa_r+0x28c>
 8006042:	2b05      	cmp	r3, #5
 8006044:	bfc4      	itt	gt
 8006046:	3b04      	subgt	r3, #4
 8006048:	9307      	strgt	r3, [sp, #28]
 800604a:	9b07      	ldr	r3, [sp, #28]
 800604c:	f1a3 0302 	sub.w	r3, r3, #2
 8006050:	bfcc      	ite	gt
 8006052:	2500      	movgt	r5, #0
 8006054:	2501      	movle	r5, #1
 8006056:	2b03      	cmp	r3, #3
 8006058:	d867      	bhi.n	800612a <_dtoa_r+0x2a2>
 800605a:	e8df f003 	tbb	[pc, r3]
 800605e:	3b2e      	.short	0x3b2e
 8006060:	5939      	.short	0x5939
 8006062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006066:	441d      	add	r5, r3
 8006068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800606c:	2b20      	cmp	r3, #32
 800606e:	bfc1      	itttt	gt
 8006070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006074:	fa08 f803 	lslgt.w	r8, r8, r3
 8006078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800607c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006080:	bfd6      	itet	le
 8006082:	f1c3 0320 	rsble	r3, r3, #32
 8006086:	ea48 0003 	orrgt.w	r0, r8, r3
 800608a:	fa06 f003 	lslle.w	r0, r6, r3
 800608e:	f7fa fa41 	bl	8000514 <__aeabi_ui2d>
 8006092:	2201      	movs	r2, #1
 8006094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006098:	3d01      	subs	r5, #1
 800609a:	920e      	str	r2, [sp, #56]	; 0x38
 800609c:	e770      	b.n	8005f80 <_dtoa_r+0xf8>
 800609e:	2301      	movs	r3, #1
 80060a0:	e7b4      	b.n	800600c <_dtoa_r+0x184>
 80060a2:	900c      	str	r0, [sp, #48]	; 0x30
 80060a4:	e7b3      	b.n	800600e <_dtoa_r+0x186>
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	eba3 030b 	sub.w	r3, r3, fp
 80060ac:	9305      	str	r3, [sp, #20]
 80060ae:	f1cb 0300 	rsb	r3, fp, #0
 80060b2:	9308      	str	r3, [sp, #32]
 80060b4:	2300      	movs	r3, #0
 80060b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b8:	e7c0      	b.n	800603c <_dtoa_r+0x1b4>
 80060ba:	2300      	movs	r3, #0
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dc35      	bgt.n	8006130 <_dtoa_r+0x2a8>
 80060c4:	2301      	movs	r3, #1
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	461a      	mov	r2, r3
 80060cc:	920a      	str	r2, [sp, #40]	; 0x28
 80060ce:	e00b      	b.n	80060e8 <_dtoa_r+0x260>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e7f3      	b.n	80060bc <_dtoa_r+0x234>
 80060d4:	2300      	movs	r3, #0
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	445b      	add	r3, fp
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	3301      	adds	r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	bfb8      	it	lt
 80060e6:	2301      	movlt	r3, #1
 80060e8:	2100      	movs	r1, #0
 80060ea:	2204      	movs	r2, #4
 80060ec:	f102 0014 	add.w	r0, r2, #20
 80060f0:	4298      	cmp	r0, r3
 80060f2:	d921      	bls.n	8006138 <_dtoa_r+0x2b0>
 80060f4:	63e1      	str	r1, [r4, #60]	; 0x3c
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fc9c 	bl	8006a34 <_Balloc>
 80060fc:	9000      	str	r0, [sp, #0]
 80060fe:	2800      	cmp	r0, #0
 8006100:	d13a      	bne.n	8006178 <_dtoa_r+0x2f0>
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <_dtoa_r+0x2e8>)
 8006104:	4602      	mov	r2, r0
 8006106:	f240 11af 	movw	r1, #431	; 0x1af
 800610a:	481a      	ldr	r0, [pc, #104]	; (8006174 <_dtoa_r+0x2ec>)
 800610c:	f001 f86c 	bl	80071e8 <__assert_func>
 8006110:	2301      	movs	r3, #1
 8006112:	e7e0      	b.n	80060d6 <_dtoa_r+0x24e>
 8006114:	2501      	movs	r5, #1
 8006116:	2300      	movs	r3, #0
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	9509      	str	r5, [sp, #36]	; 0x24
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	2200      	movs	r2, #0
 8006126:	2312      	movs	r3, #18
 8006128:	e7d0      	b.n	80060cc <_dtoa_r+0x244>
 800612a:	2301      	movs	r3, #1
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
 800612e:	e7f5      	b.n	800611c <_dtoa_r+0x294>
 8006130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	9304      	str	r3, [sp, #16]
 8006136:	e7d7      	b.n	80060e8 <_dtoa_r+0x260>
 8006138:	3101      	adds	r1, #1
 800613a:	0052      	lsls	r2, r2, #1
 800613c:	e7d6      	b.n	80060ec <_dtoa_r+0x264>
 800613e:	bf00      	nop
 8006140:	636f4361 	.word	0x636f4361
 8006144:	3fd287a7 	.word	0x3fd287a7
 8006148:	8b60c8b3 	.word	0x8b60c8b3
 800614c:	3fc68a28 	.word	0x3fc68a28
 8006150:	509f79fb 	.word	0x509f79fb
 8006154:	3fd34413 	.word	0x3fd34413
 8006158:	7ff00000 	.word	0x7ff00000
 800615c:	0800a19d 	.word	0x0800a19d
 8006160:	0800a194 	.word	0x0800a194
 8006164:	0800a173 	.word	0x0800a173
 8006168:	3ff80000 	.word	0x3ff80000
 800616c:	0800a290 	.word	0x0800a290
 8006170:	0800a1a1 	.word	0x0800a1a1
 8006174:	0800a1b2 	.word	0x0800a1b2
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	63a3      	str	r3, [r4, #56]	; 0x38
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	2b0e      	cmp	r3, #14
 8006180:	f200 80a8 	bhi.w	80062d4 <_dtoa_r+0x44c>
 8006184:	2d00      	cmp	r5, #0
 8006186:	f000 80a5 	beq.w	80062d4 <_dtoa_r+0x44c>
 800618a:	f1bb 0f00 	cmp.w	fp, #0
 800618e:	dd38      	ble.n	8006202 <_dtoa_r+0x37a>
 8006190:	4bbf      	ldr	r3, [pc, #764]	; (8006490 <_dtoa_r+0x608>)
 8006192:	f00b 020f 	and.w	r2, fp, #15
 8006196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800619e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80061a2:	ea4f 182b 	mov.w	r8, fp, asr #4
 80061a6:	d019      	beq.n	80061dc <_dtoa_r+0x354>
 80061a8:	4bba      	ldr	r3, [pc, #744]	; (8006494 <_dtoa_r+0x60c>)
 80061aa:	ec51 0b18 	vmov	r0, r1, d8
 80061ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061b2:	f7fa fb53 	bl	800085c <__aeabi_ddiv>
 80061b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ba:	f008 080f 	and.w	r8, r8, #15
 80061be:	2503      	movs	r5, #3
 80061c0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006494 <_dtoa_r+0x60c>
 80061c4:	f1b8 0f00 	cmp.w	r8, #0
 80061c8:	d10a      	bne.n	80061e0 <_dtoa_r+0x358>
 80061ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ce:	4632      	mov	r2, r6
 80061d0:	463b      	mov	r3, r7
 80061d2:	f7fa fb43 	bl	800085c <__aeabi_ddiv>
 80061d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061da:	e02b      	b.n	8006234 <_dtoa_r+0x3ac>
 80061dc:	2502      	movs	r5, #2
 80061de:	e7ef      	b.n	80061c0 <_dtoa_r+0x338>
 80061e0:	f018 0f01 	tst.w	r8, #1
 80061e4:	d008      	beq.n	80061f8 <_dtoa_r+0x370>
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061ee:	f7fa fa0b 	bl	8000608 <__aeabi_dmul>
 80061f2:	3501      	adds	r5, #1
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061fc:	f109 0908 	add.w	r9, r9, #8
 8006200:	e7e0      	b.n	80061c4 <_dtoa_r+0x33c>
 8006202:	f000 809f 	beq.w	8006344 <_dtoa_r+0x4bc>
 8006206:	f1cb 0600 	rsb	r6, fp, #0
 800620a:	4ba1      	ldr	r3, [pc, #644]	; (8006490 <_dtoa_r+0x608>)
 800620c:	4fa1      	ldr	r7, [pc, #644]	; (8006494 <_dtoa_r+0x60c>)
 800620e:	f006 020f 	and.w	r2, r6, #15
 8006212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	ec51 0b18 	vmov	r0, r1, d8
 800621e:	f7fa f9f3 	bl	8000608 <__aeabi_dmul>
 8006222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006226:	1136      	asrs	r6, r6, #4
 8006228:	2300      	movs	r3, #0
 800622a:	2502      	movs	r5, #2
 800622c:	2e00      	cmp	r6, #0
 800622e:	d17e      	bne.n	800632e <_dtoa_r+0x4a6>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1d0      	bne.n	80061d6 <_dtoa_r+0x34e>
 8006234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8084 	beq.w	8006348 <_dtoa_r+0x4c0>
 8006240:	4b95      	ldr	r3, [pc, #596]	; (8006498 <_dtoa_r+0x610>)
 8006242:	2200      	movs	r2, #0
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f7fa fc50 	bl	8000aec <__aeabi_dcmplt>
 800624c:	2800      	cmp	r0, #0
 800624e:	d07b      	beq.n	8006348 <_dtoa_r+0x4c0>
 8006250:	9b04      	ldr	r3, [sp, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d078      	beq.n	8006348 <_dtoa_r+0x4c0>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd39      	ble.n	80062d0 <_dtoa_r+0x448>
 800625c:	4b8f      	ldr	r3, [pc, #572]	; (800649c <_dtoa_r+0x614>)
 800625e:	2200      	movs	r2, #0
 8006260:	4640      	mov	r0, r8
 8006262:	4649      	mov	r1, r9
 8006264:	f7fa f9d0 	bl	8000608 <__aeabi_dmul>
 8006268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626c:	9e01      	ldr	r6, [sp, #4]
 800626e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006272:	3501      	adds	r5, #1
 8006274:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006278:	4628      	mov	r0, r5
 800627a:	f7fa f95b 	bl	8000534 <__aeabi_i2d>
 800627e:	4642      	mov	r2, r8
 8006280:	464b      	mov	r3, r9
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	4b86      	ldr	r3, [pc, #536]	; (80064a0 <_dtoa_r+0x618>)
 8006288:	2200      	movs	r2, #0
 800628a:	f7fa f807 	bl	800029c <__adddf3>
 800628e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006296:	9303      	str	r3, [sp, #12]
 8006298:	2e00      	cmp	r6, #0
 800629a:	d158      	bne.n	800634e <_dtoa_r+0x4c6>
 800629c:	4b81      	ldr	r3, [pc, #516]	; (80064a4 <_dtoa_r+0x61c>)
 800629e:	2200      	movs	r2, #0
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 fff8 	bl	8000298 <__aeabi_dsub>
 80062a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ac:	4680      	mov	r8, r0
 80062ae:	4689      	mov	r9, r1
 80062b0:	f7fa fc3a 	bl	8000b28 <__aeabi_dcmpgt>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f040 8295 	bne.w	80067e4 <_dtoa_r+0x95c>
 80062ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80062be:	4640      	mov	r0, r8
 80062c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7fa fc11 	bl	8000aec <__aeabi_dcmplt>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f040 8288 	bne.w	80067e0 <_dtoa_r+0x958>
 80062d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80062d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f2c0 814d 	blt.w	8006576 <_dtoa_r+0x6ee>
 80062dc:	f1bb 0f0e 	cmp.w	fp, #14
 80062e0:	f300 8149 	bgt.w	8006576 <_dtoa_r+0x6ee>
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <_dtoa_r+0x608>)
 80062e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f280 80db 	bge.w	80064ac <_dtoa_r+0x624>
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f300 80d7 	bgt.w	80064ac <_dtoa_r+0x624>
 80062fe:	f040 826e 	bne.w	80067de <_dtoa_r+0x956>
 8006302:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <_dtoa_r+0x61c>)
 8006304:	2200      	movs	r2, #0
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7fa f97d 	bl	8000608 <__aeabi_dmul>
 800630e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006312:	f7fa fbff 	bl	8000b14 <__aeabi_dcmpge>
 8006316:	9e04      	ldr	r6, [sp, #16]
 8006318:	4637      	mov	r7, r6
 800631a:	2800      	cmp	r0, #0
 800631c:	f040 8244 	bne.w	80067a8 <_dtoa_r+0x920>
 8006320:	9d00      	ldr	r5, [sp, #0]
 8006322:	2331      	movs	r3, #49	; 0x31
 8006324:	f805 3b01 	strb.w	r3, [r5], #1
 8006328:	f10b 0b01 	add.w	fp, fp, #1
 800632c:	e240      	b.n	80067b0 <_dtoa_r+0x928>
 800632e:	07f2      	lsls	r2, r6, #31
 8006330:	d505      	bpl.n	800633e <_dtoa_r+0x4b6>
 8006332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006336:	f7fa f967 	bl	8000608 <__aeabi_dmul>
 800633a:	3501      	adds	r5, #1
 800633c:	2301      	movs	r3, #1
 800633e:	1076      	asrs	r6, r6, #1
 8006340:	3708      	adds	r7, #8
 8006342:	e773      	b.n	800622c <_dtoa_r+0x3a4>
 8006344:	2502      	movs	r5, #2
 8006346:	e775      	b.n	8006234 <_dtoa_r+0x3ac>
 8006348:	9e04      	ldr	r6, [sp, #16]
 800634a:	465f      	mov	r7, fp
 800634c:	e792      	b.n	8006274 <_dtoa_r+0x3ec>
 800634e:	9900      	ldr	r1, [sp, #0]
 8006350:	4b4f      	ldr	r3, [pc, #316]	; (8006490 <_dtoa_r+0x608>)
 8006352:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006356:	4431      	add	r1, r6
 8006358:	9102      	str	r1, [sp, #8]
 800635a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800635c:	eeb0 9a47 	vmov.f32	s18, s14
 8006360:	eef0 9a67 	vmov.f32	s19, s15
 8006364:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800636c:	2900      	cmp	r1, #0
 800636e:	d044      	beq.n	80063fa <_dtoa_r+0x572>
 8006370:	494d      	ldr	r1, [pc, #308]	; (80064a8 <_dtoa_r+0x620>)
 8006372:	2000      	movs	r0, #0
 8006374:	f7fa fa72 	bl	800085c <__aeabi_ddiv>
 8006378:	ec53 2b19 	vmov	r2, r3, d9
 800637c:	f7f9 ff8c 	bl	8000298 <__aeabi_dsub>
 8006380:	9d00      	ldr	r5, [sp, #0]
 8006382:	ec41 0b19 	vmov	d9, r0, r1
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	f7fa fbed 	bl	8000b68 <__aeabi_d2iz>
 800638e:	4606      	mov	r6, r0
 8006390:	f7fa f8d0 	bl	8000534 <__aeabi_i2d>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7f9 ff7c 	bl	8000298 <__aeabi_dsub>
 80063a0:	3630      	adds	r6, #48	; 0x30
 80063a2:	f805 6b01 	strb.w	r6, [r5], #1
 80063a6:	ec53 2b19 	vmov	r2, r3, d9
 80063aa:	4680      	mov	r8, r0
 80063ac:	4689      	mov	r9, r1
 80063ae:	f7fa fb9d 	bl	8000aec <__aeabi_dcmplt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d164      	bne.n	8006480 <_dtoa_r+0x5f8>
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	4937      	ldr	r1, [pc, #220]	; (8006498 <_dtoa_r+0x610>)
 80063bc:	2000      	movs	r0, #0
 80063be:	f7f9 ff6b 	bl	8000298 <__aeabi_dsub>
 80063c2:	ec53 2b19 	vmov	r2, r3, d9
 80063c6:	f7fa fb91 	bl	8000aec <__aeabi_dcmplt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	f040 80b5 	bne.w	800653a <_dtoa_r+0x6b2>
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	429d      	cmp	r5, r3
 80063d4:	f43f af7c 	beq.w	80062d0 <_dtoa_r+0x448>
 80063d8:	4b30      	ldr	r3, [pc, #192]	; (800649c <_dtoa_r+0x614>)
 80063da:	ec51 0b19 	vmov	r0, r1, d9
 80063de:	2200      	movs	r2, #0
 80063e0:	f7fa f912 	bl	8000608 <__aeabi_dmul>
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <_dtoa_r+0x614>)
 80063e6:	ec41 0b19 	vmov	d9, r0, r1
 80063ea:	2200      	movs	r2, #0
 80063ec:	4640      	mov	r0, r8
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7fa f90a 	bl	8000608 <__aeabi_dmul>
 80063f4:	4680      	mov	r8, r0
 80063f6:	4689      	mov	r9, r1
 80063f8:	e7c5      	b.n	8006386 <_dtoa_r+0x4fe>
 80063fa:	ec51 0b17 	vmov	r0, r1, d7
 80063fe:	f7fa f903 	bl	8000608 <__aeabi_dmul>
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	9d00      	ldr	r5, [sp, #0]
 8006406:	930f      	str	r3, [sp, #60]	; 0x3c
 8006408:	ec41 0b19 	vmov	d9, r0, r1
 800640c:	4649      	mov	r1, r9
 800640e:	4640      	mov	r0, r8
 8006410:	f7fa fbaa 	bl	8000b68 <__aeabi_d2iz>
 8006414:	4606      	mov	r6, r0
 8006416:	f7fa f88d 	bl	8000534 <__aeabi_i2d>
 800641a:	3630      	adds	r6, #48	; 0x30
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7f9 ff38 	bl	8000298 <__aeabi_dsub>
 8006428:	f805 6b01 	strb.w	r6, [r5], #1
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	429d      	cmp	r5, r3
 8006430:	4680      	mov	r8, r0
 8006432:	4689      	mov	r9, r1
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	d124      	bne.n	8006484 <_dtoa_r+0x5fc>
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <_dtoa_r+0x620>)
 800643c:	ec51 0b19 	vmov	r0, r1, d9
 8006440:	f7f9 ff2c 	bl	800029c <__adddf3>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7fa fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 8006450:	2800      	cmp	r0, #0
 8006452:	d172      	bne.n	800653a <_dtoa_r+0x6b2>
 8006454:	ec53 2b19 	vmov	r2, r3, d9
 8006458:	4913      	ldr	r1, [pc, #76]	; (80064a8 <_dtoa_r+0x620>)
 800645a:	2000      	movs	r0, #0
 800645c:	f7f9 ff1c 	bl	8000298 <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4640      	mov	r0, r8
 8006466:	4649      	mov	r1, r9
 8006468:	f7fa fb40 	bl	8000aec <__aeabi_dcmplt>
 800646c:	2800      	cmp	r0, #0
 800646e:	f43f af2f 	beq.w	80062d0 <_dtoa_r+0x448>
 8006472:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006474:	1e6b      	subs	r3, r5, #1
 8006476:	930f      	str	r3, [sp, #60]	; 0x3c
 8006478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d0f8      	beq.n	8006472 <_dtoa_r+0x5ea>
 8006480:	46bb      	mov	fp, r7
 8006482:	e049      	b.n	8006518 <_dtoa_r+0x690>
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <_dtoa_r+0x614>)
 8006486:	f7fa f8bf 	bl	8000608 <__aeabi_dmul>
 800648a:	4680      	mov	r8, r0
 800648c:	4689      	mov	r9, r1
 800648e:	e7bd      	b.n	800640c <_dtoa_r+0x584>
 8006490:	0800a290 	.word	0x0800a290
 8006494:	0800a268 	.word	0x0800a268
 8006498:	3ff00000 	.word	0x3ff00000
 800649c:	40240000 	.word	0x40240000
 80064a0:	401c0000 	.word	0x401c0000
 80064a4:	40140000 	.word	0x40140000
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064b0:	9d00      	ldr	r5, [sp, #0]
 80064b2:	4642      	mov	r2, r8
 80064b4:	464b      	mov	r3, r9
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f9cf 	bl	800085c <__aeabi_ddiv>
 80064be:	f7fa fb53 	bl	8000b68 <__aeabi_d2iz>
 80064c2:	9001      	str	r0, [sp, #4]
 80064c4:	f7fa f836 	bl	8000534 <__aeabi_i2d>
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	f7fa f89c 	bl	8000608 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7f9 fede 	bl	8000298 <__aeabi_dsub>
 80064dc:	9e01      	ldr	r6, [sp, #4]
 80064de:	9f04      	ldr	r7, [sp, #16]
 80064e0:	3630      	adds	r6, #48	; 0x30
 80064e2:	f805 6b01 	strb.w	r6, [r5], #1
 80064e6:	9e00      	ldr	r6, [sp, #0]
 80064e8:	1bae      	subs	r6, r5, r6
 80064ea:	42b7      	cmp	r7, r6
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	d134      	bne.n	800655c <_dtoa_r+0x6d4>
 80064f2:	f7f9 fed3 	bl	800029c <__adddf3>
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	f7fa fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8006502:	b9c8      	cbnz	r0, 8006538 <_dtoa_r+0x6b0>
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7fa fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006510:	b110      	cbz	r0, 8006518 <_dtoa_r+0x690>
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	07db      	lsls	r3, r3, #31
 8006516:	d40f      	bmi.n	8006538 <_dtoa_r+0x6b0>
 8006518:	4651      	mov	r1, sl
 800651a:	4620      	mov	r0, r4
 800651c:	f000 faaf 	bl	8006a7e <_Bfree>
 8006520:	2300      	movs	r3, #0
 8006522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006524:	702b      	strb	r3, [r5, #0]
 8006526:	f10b 0301 	add.w	r3, fp, #1
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800652e:	2b00      	cmp	r3, #0
 8006530:	f43f ace5 	beq.w	8005efe <_dtoa_r+0x76>
 8006534:	601d      	str	r5, [r3, #0]
 8006536:	e4e2      	b.n	8005efe <_dtoa_r+0x76>
 8006538:	465f      	mov	r7, fp
 800653a:	462b      	mov	r3, r5
 800653c:	461d      	mov	r5, r3
 800653e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006542:	2a39      	cmp	r2, #57	; 0x39
 8006544:	d106      	bne.n	8006554 <_dtoa_r+0x6cc>
 8006546:	9a00      	ldr	r2, [sp, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d1f7      	bne.n	800653c <_dtoa_r+0x6b4>
 800654c:	9900      	ldr	r1, [sp, #0]
 800654e:	2230      	movs	r2, #48	; 0x30
 8006550:	3701      	adds	r7, #1
 8006552:	700a      	strb	r2, [r1, #0]
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	3201      	adds	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e791      	b.n	8006480 <_dtoa_r+0x5f8>
 800655c:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <_dtoa_r+0x964>)
 800655e:	2200      	movs	r2, #0
 8006560:	f7fa f852 	bl	8000608 <__aeabi_dmul>
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	4606      	mov	r6, r0
 800656a:	460f      	mov	r7, r1
 800656c:	f7fa fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006570:	2800      	cmp	r0, #0
 8006572:	d09e      	beq.n	80064b2 <_dtoa_r+0x62a>
 8006574:	e7d0      	b.n	8006518 <_dtoa_r+0x690>
 8006576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006578:	2a00      	cmp	r2, #0
 800657a:	f000 80ca 	beq.w	8006712 <_dtoa_r+0x88a>
 800657e:	9a07      	ldr	r2, [sp, #28]
 8006580:	2a01      	cmp	r2, #1
 8006582:	f300 80ad 	bgt.w	80066e0 <_dtoa_r+0x858>
 8006586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006588:	2a00      	cmp	r2, #0
 800658a:	f000 80a5 	beq.w	80066d8 <_dtoa_r+0x850>
 800658e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006592:	9e08      	ldr	r6, [sp, #32]
 8006594:	9d05      	ldr	r5, [sp, #20]
 8006596:	9a05      	ldr	r2, [sp, #20]
 8006598:	441a      	add	r2, r3
 800659a:	9205      	str	r2, [sp, #20]
 800659c:	9a06      	ldr	r2, [sp, #24]
 800659e:	2101      	movs	r1, #1
 80065a0:	441a      	add	r2, r3
 80065a2:	4620      	mov	r0, r4
 80065a4:	9206      	str	r2, [sp, #24]
 80065a6:	f000 fb07 	bl	8006bb8 <__i2b>
 80065aa:	4607      	mov	r7, r0
 80065ac:	b165      	cbz	r5, 80065c8 <_dtoa_r+0x740>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dd09      	ble.n	80065c8 <_dtoa_r+0x740>
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	9a05      	ldr	r2, [sp, #20]
 80065b8:	bfa8      	it	ge
 80065ba:	462b      	movge	r3, r5
 80065bc:	1ad2      	subs	r2, r2, r3
 80065be:	9205      	str	r2, [sp, #20]
 80065c0:	9a06      	ldr	r2, [sp, #24]
 80065c2:	1aed      	subs	r5, r5, r3
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	9306      	str	r3, [sp, #24]
 80065c8:	9b08      	ldr	r3, [sp, #32]
 80065ca:	b1f3      	cbz	r3, 800660a <_dtoa_r+0x782>
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80a3 	beq.w	800671a <_dtoa_r+0x892>
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	dd10      	ble.n	80065fa <_dtoa_r+0x772>
 80065d8:	4639      	mov	r1, r7
 80065da:	4632      	mov	r2, r6
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fbab 	bl	8006d38 <__pow5mult>
 80065e2:	4652      	mov	r2, sl
 80065e4:	4601      	mov	r1, r0
 80065e6:	4607      	mov	r7, r0
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fafb 	bl	8006be4 <__multiply>
 80065ee:	4651      	mov	r1, sl
 80065f0:	4680      	mov	r8, r0
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fa43 	bl	8006a7e <_Bfree>
 80065f8:	46c2      	mov	sl, r8
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	1b9a      	subs	r2, r3, r6
 80065fe:	d004      	beq.n	800660a <_dtoa_r+0x782>
 8006600:	4651      	mov	r1, sl
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fb98 	bl	8006d38 <__pow5mult>
 8006608:	4682      	mov	sl, r0
 800660a:	2101      	movs	r1, #1
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fad3 	bl	8006bb8 <__i2b>
 8006612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	4606      	mov	r6, r0
 8006618:	f340 8081 	ble.w	800671e <_dtoa_r+0x896>
 800661c:	461a      	mov	r2, r3
 800661e:	4601      	mov	r1, r0
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fb89 	bl	8006d38 <__pow5mult>
 8006626:	9b07      	ldr	r3, [sp, #28]
 8006628:	2b01      	cmp	r3, #1
 800662a:	4606      	mov	r6, r0
 800662c:	dd7a      	ble.n	8006724 <_dtoa_r+0x89c>
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	6933      	ldr	r3, [r6, #16]
 8006634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006638:	6918      	ldr	r0, [r3, #16]
 800663a:	f000 fa6f 	bl	8006b1c <__hi0bits>
 800663e:	f1c0 0020 	rsb	r0, r0, #32
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	4418      	add	r0, r3
 8006646:	f010 001f 	ands.w	r0, r0, #31
 800664a:	f000 8094 	beq.w	8006776 <_dtoa_r+0x8ee>
 800664e:	f1c0 0320 	rsb	r3, r0, #32
 8006652:	2b04      	cmp	r3, #4
 8006654:	f340 8085 	ble.w	8006762 <_dtoa_r+0x8da>
 8006658:	9b05      	ldr	r3, [sp, #20]
 800665a:	f1c0 001c 	rsb	r0, r0, #28
 800665e:	4403      	add	r3, r0
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	4403      	add	r3, r0
 8006666:	4405      	add	r5, r0
 8006668:	9306      	str	r3, [sp, #24]
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd05      	ble.n	800667c <_dtoa_r+0x7f4>
 8006670:	4651      	mov	r1, sl
 8006672:	461a      	mov	r2, r3
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fb9f 	bl	8006db8 <__lshift>
 800667a:	4682      	mov	sl, r0
 800667c:	9b06      	ldr	r3, [sp, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	dd05      	ble.n	800668e <_dtoa_r+0x806>
 8006682:	4631      	mov	r1, r6
 8006684:	461a      	mov	r2, r3
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fb96 	bl	8006db8 <__lshift>
 800668c:	4606      	mov	r6, r0
 800668e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d072      	beq.n	800677a <_dtoa_r+0x8f2>
 8006694:	4631      	mov	r1, r6
 8006696:	4650      	mov	r0, sl
 8006698:	f000 fbfa 	bl	8006e90 <__mcmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	da6c      	bge.n	800677a <_dtoa_r+0x8f2>
 80066a0:	2300      	movs	r3, #0
 80066a2:	4651      	mov	r1, sl
 80066a4:	220a      	movs	r2, #10
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 f9f2 	bl	8006a90 <__multadd>
 80066ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066b2:	4682      	mov	sl, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 81af 	beq.w	8006a18 <_dtoa_r+0xb90>
 80066ba:	2300      	movs	r3, #0
 80066bc:	4639      	mov	r1, r7
 80066be:	220a      	movs	r2, #10
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 f9e5 	bl	8006a90 <__multadd>
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	4607      	mov	r7, r0
 80066cc:	f300 8096 	bgt.w	80067fc <_dtoa_r+0x974>
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dc59      	bgt.n	800678a <_dtoa_r+0x902>
 80066d6:	e091      	b.n	80067fc <_dtoa_r+0x974>
 80066d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066de:	e758      	b.n	8006592 <_dtoa_r+0x70a>
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	1e5e      	subs	r6, r3, #1
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	42b3      	cmp	r3, r6
 80066e8:	bfbf      	itttt	lt
 80066ea:	9b08      	ldrlt	r3, [sp, #32]
 80066ec:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80066ee:	9608      	strlt	r6, [sp, #32]
 80066f0:	1af3      	sublt	r3, r6, r3
 80066f2:	bfb4      	ite	lt
 80066f4:	18d2      	addlt	r2, r2, r3
 80066f6:	1b9e      	subge	r6, r3, r6
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	bfbc      	itt	lt
 80066fc:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80066fe:	2600      	movlt	r6, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb7      	itett	lt
 8006704:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006708:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800670c:	1a9d      	sublt	r5, r3, r2
 800670e:	2300      	movlt	r3, #0
 8006710:	e741      	b.n	8006596 <_dtoa_r+0x70e>
 8006712:	9e08      	ldr	r6, [sp, #32]
 8006714:	9d05      	ldr	r5, [sp, #20]
 8006716:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006718:	e748      	b.n	80065ac <_dtoa_r+0x724>
 800671a:	9a08      	ldr	r2, [sp, #32]
 800671c:	e770      	b.n	8006600 <_dtoa_r+0x778>
 800671e:	9b07      	ldr	r3, [sp, #28]
 8006720:	2b01      	cmp	r3, #1
 8006722:	dc19      	bgt.n	8006758 <_dtoa_r+0x8d0>
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	b9bb      	cbnz	r3, 8006758 <_dtoa_r+0x8d0>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672e:	b99b      	cbnz	r3, 8006758 <_dtoa_r+0x8d0>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006736:	0d1b      	lsrs	r3, r3, #20
 8006738:	051b      	lsls	r3, r3, #20
 800673a:	b183      	cbz	r3, 800675e <_dtoa_r+0x8d6>
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	3301      	adds	r3, #1
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	3301      	adds	r3, #1
 8006746:	9306      	str	r3, [sp, #24]
 8006748:	f04f 0801 	mov.w	r8, #1
 800674c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	f47f af6f 	bne.w	8006632 <_dtoa_r+0x7aa>
 8006754:	2001      	movs	r0, #1
 8006756:	e774      	b.n	8006642 <_dtoa_r+0x7ba>
 8006758:	f04f 0800 	mov.w	r8, #0
 800675c:	e7f6      	b.n	800674c <_dtoa_r+0x8c4>
 800675e:	4698      	mov	r8, r3
 8006760:	e7f4      	b.n	800674c <_dtoa_r+0x8c4>
 8006762:	d082      	beq.n	800666a <_dtoa_r+0x7e2>
 8006764:	9a05      	ldr	r2, [sp, #20]
 8006766:	331c      	adds	r3, #28
 8006768:	441a      	add	r2, r3
 800676a:	9205      	str	r2, [sp, #20]
 800676c:	9a06      	ldr	r2, [sp, #24]
 800676e:	441a      	add	r2, r3
 8006770:	441d      	add	r5, r3
 8006772:	9206      	str	r2, [sp, #24]
 8006774:	e779      	b.n	800666a <_dtoa_r+0x7e2>
 8006776:	4603      	mov	r3, r0
 8006778:	e7f4      	b.n	8006764 <_dtoa_r+0x8dc>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	dc37      	bgt.n	80067f0 <_dtoa_r+0x968>
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	2b02      	cmp	r3, #2
 8006784:	dd34      	ble.n	80067f0 <_dtoa_r+0x968>
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	9b01      	ldr	r3, [sp, #4]
 800678c:	b963      	cbnz	r3, 80067a8 <_dtoa_r+0x920>
 800678e:	4631      	mov	r1, r6
 8006790:	2205      	movs	r2, #5
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f97c 	bl	8006a90 <__multadd>
 8006798:	4601      	mov	r1, r0
 800679a:	4606      	mov	r6, r0
 800679c:	4650      	mov	r0, sl
 800679e:	f000 fb77 	bl	8006e90 <__mcmp>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f73f adbc 	bgt.w	8006320 <_dtoa_r+0x498>
 80067a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067aa:	9d00      	ldr	r5, [sp, #0]
 80067ac:	ea6f 0b03 	mvn.w	fp, r3
 80067b0:	f04f 0800 	mov.w	r8, #0
 80067b4:	4631      	mov	r1, r6
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f961 	bl	8006a7e <_Bfree>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f43f aeab 	beq.w	8006518 <_dtoa_r+0x690>
 80067c2:	f1b8 0f00 	cmp.w	r8, #0
 80067c6:	d005      	beq.n	80067d4 <_dtoa_r+0x94c>
 80067c8:	45b8      	cmp	r8, r7
 80067ca:	d003      	beq.n	80067d4 <_dtoa_r+0x94c>
 80067cc:	4641      	mov	r1, r8
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f955 	bl	8006a7e <_Bfree>
 80067d4:	4639      	mov	r1, r7
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 f951 	bl	8006a7e <_Bfree>
 80067dc:	e69c      	b.n	8006518 <_dtoa_r+0x690>
 80067de:	2600      	movs	r6, #0
 80067e0:	4637      	mov	r7, r6
 80067e2:	e7e1      	b.n	80067a8 <_dtoa_r+0x920>
 80067e4:	46bb      	mov	fp, r7
 80067e6:	4637      	mov	r7, r6
 80067e8:	e59a      	b.n	8006320 <_dtoa_r+0x498>
 80067ea:	bf00      	nop
 80067ec:	40240000 	.word	0x40240000
 80067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80c7 	beq.w	8006986 <_dtoa_r+0xafe>
 80067f8:	9b04      	ldr	r3, [sp, #16]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	2d00      	cmp	r5, #0
 80067fe:	dd05      	ble.n	800680c <_dtoa_r+0x984>
 8006800:	4639      	mov	r1, r7
 8006802:	462a      	mov	r2, r5
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fad7 	bl	8006db8 <__lshift>
 800680a:	4607      	mov	r7, r0
 800680c:	f1b8 0f00 	cmp.w	r8, #0
 8006810:	d05a      	beq.n	80068c8 <_dtoa_r+0xa40>
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4620      	mov	r0, r4
 8006816:	f000 f90d 	bl	8006a34 <_Balloc>
 800681a:	4605      	mov	r5, r0
 800681c:	b920      	cbnz	r0, 8006828 <_dtoa_r+0x9a0>
 800681e:	4b82      	ldr	r3, [pc, #520]	; (8006a28 <_dtoa_r+0xba0>)
 8006820:	4602      	mov	r2, r0
 8006822:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006826:	e470      	b.n	800610a <_dtoa_r+0x282>
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	3202      	adds	r2, #2
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	f107 010c 	add.w	r1, r7, #12
 8006832:	300c      	adds	r0, #12
 8006834:	f000 fcca 	bl	80071cc <memcpy>
 8006838:	2201      	movs	r2, #1
 800683a:	4629      	mov	r1, r5
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fabb 	bl	8006db8 <__lshift>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800684c:	4413      	add	r3, r2
 800684e:	9308      	str	r3, [sp, #32]
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	46b8      	mov	r8, r7
 8006858:	9306      	str	r3, [sp, #24]
 800685a:	4607      	mov	r7, r0
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	4631      	mov	r1, r6
 8006860:	3b01      	subs	r3, #1
 8006862:	4650      	mov	r0, sl
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	f7ff fa87 	bl	8005d78 <quorem>
 800686a:	4641      	mov	r1, r8
 800686c:	9002      	str	r0, [sp, #8]
 800686e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006872:	4650      	mov	r0, sl
 8006874:	f000 fb0c 	bl	8006e90 <__mcmp>
 8006878:	463a      	mov	r2, r7
 800687a:	9005      	str	r0, [sp, #20]
 800687c:	4631      	mov	r1, r6
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fb22 	bl	8006ec8 <__mdiff>
 8006884:	68c2      	ldr	r2, [r0, #12]
 8006886:	4605      	mov	r5, r0
 8006888:	bb02      	cbnz	r2, 80068cc <_dtoa_r+0xa44>
 800688a:	4601      	mov	r1, r0
 800688c:	4650      	mov	r0, sl
 800688e:	f000 faff 	bl	8006e90 <__mcmp>
 8006892:	4602      	mov	r2, r0
 8006894:	4629      	mov	r1, r5
 8006896:	4620      	mov	r0, r4
 8006898:	9209      	str	r2, [sp, #36]	; 0x24
 800689a:	f000 f8f0 	bl	8006a7e <_Bfree>
 800689e:	9b07      	ldr	r3, [sp, #28]
 80068a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068a2:	9d04      	ldr	r5, [sp, #16]
 80068a4:	ea43 0102 	orr.w	r1, r3, r2
 80068a8:	9b06      	ldr	r3, [sp, #24]
 80068aa:	4319      	orrs	r1, r3
 80068ac:	d110      	bne.n	80068d0 <_dtoa_r+0xa48>
 80068ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068b2:	d029      	beq.n	8006908 <_dtoa_r+0xa80>
 80068b4:	9b05      	ldr	r3, [sp, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd02      	ble.n	80068c0 <_dtoa_r+0xa38>
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	f883 9000 	strb.w	r9, [r3]
 80068c6:	e775      	b.n	80067b4 <_dtoa_r+0x92c>
 80068c8:	4638      	mov	r0, r7
 80068ca:	e7ba      	b.n	8006842 <_dtoa_r+0x9ba>
 80068cc:	2201      	movs	r2, #1
 80068ce:	e7e1      	b.n	8006894 <_dtoa_r+0xa0c>
 80068d0:	9b05      	ldr	r3, [sp, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db04      	blt.n	80068e0 <_dtoa_r+0xa58>
 80068d6:	9907      	ldr	r1, [sp, #28]
 80068d8:	430b      	orrs	r3, r1
 80068da:	9906      	ldr	r1, [sp, #24]
 80068dc:	430b      	orrs	r3, r1
 80068de:	d120      	bne.n	8006922 <_dtoa_r+0xa9a>
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	dded      	ble.n	80068c0 <_dtoa_r+0xa38>
 80068e4:	4651      	mov	r1, sl
 80068e6:	2201      	movs	r2, #1
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fa65 	bl	8006db8 <__lshift>
 80068ee:	4631      	mov	r1, r6
 80068f0:	4682      	mov	sl, r0
 80068f2:	f000 facd 	bl	8006e90 <__mcmp>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	dc03      	bgt.n	8006902 <_dtoa_r+0xa7a>
 80068fa:	d1e1      	bne.n	80068c0 <_dtoa_r+0xa38>
 80068fc:	f019 0f01 	tst.w	r9, #1
 8006900:	d0de      	beq.n	80068c0 <_dtoa_r+0xa38>
 8006902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006906:	d1d8      	bne.n	80068ba <_dtoa_r+0xa32>
 8006908:	9a01      	ldr	r2, [sp, #4]
 800690a:	2339      	movs	r3, #57	; 0x39
 800690c:	7013      	strb	r3, [r2, #0]
 800690e:	462b      	mov	r3, r5
 8006910:	461d      	mov	r5, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006918:	2a39      	cmp	r2, #57	; 0x39
 800691a:	d06c      	beq.n	80069f6 <_dtoa_r+0xb6e>
 800691c:	3201      	adds	r2, #1
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e748      	b.n	80067b4 <_dtoa_r+0x92c>
 8006922:	2a00      	cmp	r2, #0
 8006924:	dd07      	ble.n	8006936 <_dtoa_r+0xaae>
 8006926:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800692a:	d0ed      	beq.n	8006908 <_dtoa_r+0xa80>
 800692c:	9a01      	ldr	r2, [sp, #4]
 800692e:	f109 0301 	add.w	r3, r9, #1
 8006932:	7013      	strb	r3, [r2, #0]
 8006934:	e73e      	b.n	80067b4 <_dtoa_r+0x92c>
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	9a08      	ldr	r2, [sp, #32]
 800693a:	f803 9c01 	strb.w	r9, [r3, #-1]
 800693e:	4293      	cmp	r3, r2
 8006940:	d043      	beq.n	80069ca <_dtoa_r+0xb42>
 8006942:	4651      	mov	r1, sl
 8006944:	2300      	movs	r3, #0
 8006946:	220a      	movs	r2, #10
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f8a1 	bl	8006a90 <__multadd>
 800694e:	45b8      	cmp	r8, r7
 8006950:	4682      	mov	sl, r0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	f04f 020a 	mov.w	r2, #10
 800695a:	4641      	mov	r1, r8
 800695c:	4620      	mov	r0, r4
 800695e:	d107      	bne.n	8006970 <_dtoa_r+0xae8>
 8006960:	f000 f896 	bl	8006a90 <__multadd>
 8006964:	4680      	mov	r8, r0
 8006966:	4607      	mov	r7, r0
 8006968:	9b04      	ldr	r3, [sp, #16]
 800696a:	3301      	adds	r3, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	e775      	b.n	800685c <_dtoa_r+0x9d4>
 8006970:	f000 f88e 	bl	8006a90 <__multadd>
 8006974:	4639      	mov	r1, r7
 8006976:	4680      	mov	r8, r0
 8006978:	2300      	movs	r3, #0
 800697a:	220a      	movs	r2, #10
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f887 	bl	8006a90 <__multadd>
 8006982:	4607      	mov	r7, r0
 8006984:	e7f0      	b.n	8006968 <_dtoa_r+0xae0>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	9d00      	ldr	r5, [sp, #0]
 800698c:	4631      	mov	r1, r6
 800698e:	4650      	mov	r0, sl
 8006990:	f7ff f9f2 	bl	8005d78 <quorem>
 8006994:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006998:	9b00      	ldr	r3, [sp, #0]
 800699a:	f805 9b01 	strb.w	r9, [r5], #1
 800699e:	1aea      	subs	r2, r5, r3
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	dd07      	ble.n	80069b6 <_dtoa_r+0xb2e>
 80069a6:	4651      	mov	r1, sl
 80069a8:	2300      	movs	r3, #0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f86f 	bl	8006a90 <__multadd>
 80069b2:	4682      	mov	sl, r0
 80069b4:	e7ea      	b.n	800698c <_dtoa_r+0xb04>
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfc8      	it	gt
 80069bc:	461d      	movgt	r5, r3
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	bfd8      	it	le
 80069c2:	2501      	movle	r5, #1
 80069c4:	441d      	add	r5, r3
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	4651      	mov	r1, sl
 80069cc:	2201      	movs	r2, #1
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 f9f2 	bl	8006db8 <__lshift>
 80069d4:	4631      	mov	r1, r6
 80069d6:	4682      	mov	sl, r0
 80069d8:	f000 fa5a 	bl	8006e90 <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	dc96      	bgt.n	800690e <_dtoa_r+0xa86>
 80069e0:	d102      	bne.n	80069e8 <_dtoa_r+0xb60>
 80069e2:	f019 0f01 	tst.w	r9, #1
 80069e6:	d192      	bne.n	800690e <_dtoa_r+0xa86>
 80069e8:	462b      	mov	r3, r5
 80069ea:	461d      	mov	r5, r3
 80069ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069f0:	2a30      	cmp	r2, #48	; 0x30
 80069f2:	d0fa      	beq.n	80069ea <_dtoa_r+0xb62>
 80069f4:	e6de      	b.n	80067b4 <_dtoa_r+0x92c>
 80069f6:	9a00      	ldr	r2, [sp, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d189      	bne.n	8006910 <_dtoa_r+0xa88>
 80069fc:	f10b 0b01 	add.w	fp, fp, #1
 8006a00:	2331      	movs	r3, #49	; 0x31
 8006a02:	e796      	b.n	8006932 <_dtoa_r+0xaaa>
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <_dtoa_r+0xba4>)
 8006a06:	f7ff ba9d 	b.w	8005f44 <_dtoa_r+0xbc>
 8006a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f aa7c 	bne.w	8005f0a <_dtoa_r+0x82>
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <_dtoa_r+0xba8>)
 8006a14:	f7ff ba96 	b.w	8005f44 <_dtoa_r+0xbc>
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dcb5      	bgt.n	800698a <_dtoa_r+0xb02>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f73f aeb2 	bgt.w	800678a <_dtoa_r+0x902>
 8006a26:	e7b0      	b.n	800698a <_dtoa_r+0xb02>
 8006a28:	0800a1a1 	.word	0x0800a1a1
 8006a2c:	0800a172 	.word	0x0800a172
 8006a30:	0800a194 	.word	0x0800a194

08006a34 <_Balloc>:
 8006a34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a36:	b570      	push	{r4, r5, r6, lr}
 8006a38:	4605      	mov	r5, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b17b      	cbz	r3, 8006a5e <_Balloc+0x2a>
 8006a3e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006a40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006a44:	b9a0      	cbnz	r0, 8006a70 <_Balloc+0x3c>
 8006a46:	2101      	movs	r1, #1
 8006a48:	fa01 f604 	lsl.w	r6, r1, r4
 8006a4c:	1d72      	adds	r2, r6, #5
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fbe7 	bl	8007224 <_calloc_r>
 8006a56:	b148      	cbz	r0, 8006a6c <_Balloc+0x38>
 8006a58:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8006a5c:	e00b      	b.n	8006a76 <_Balloc+0x42>
 8006a5e:	2221      	movs	r2, #33	; 0x21
 8006a60:	2104      	movs	r1, #4
 8006a62:	f000 fbdf 	bl	8007224 <_calloc_r>
 8006a66:	6468      	str	r0, [r5, #68]	; 0x44
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d1e8      	bne.n	8006a3e <_Balloc+0xa>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	6802      	ldr	r2, [r0, #0]
 8006a72:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006a76:	2300      	movs	r3, #0
 8006a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a7c:	e7f7      	b.n	8006a6e <_Balloc+0x3a>

08006a7e <_Bfree>:
 8006a7e:	b131      	cbz	r1, 8006a8e <_Bfree+0x10>
 8006a80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a82:	684a      	ldr	r2, [r1, #4]
 8006a84:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006a88:	6008      	str	r0, [r1, #0]
 8006a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a8e:	4770      	bx	lr

08006a90 <__multadd>:
 8006a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a94:	690d      	ldr	r5, [r1, #16]
 8006a96:	4607      	mov	r7, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	461e      	mov	r6, r3
 8006a9c:	f101 0c14 	add.w	ip, r1, #20
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f8dc 3000 	ldr.w	r3, [ip]
 8006aa6:	b299      	uxth	r1, r3
 8006aa8:	fb02 6101 	mla	r1, r2, r1, r6
 8006aac:	0c1e      	lsrs	r6, r3, #16
 8006aae:	0c0b      	lsrs	r3, r1, #16
 8006ab0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ab4:	b289      	uxth	r1, r1
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006abc:	4285      	cmp	r5, r0
 8006abe:	f84c 1b04 	str.w	r1, [ip], #4
 8006ac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ac6:	dcec      	bgt.n	8006aa2 <__multadd+0x12>
 8006ac8:	b30e      	cbz	r6, 8006b0e <__multadd+0x7e>
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dc19      	bgt.n	8006b04 <__multadd+0x74>
 8006ad0:	6861      	ldr	r1, [r4, #4]
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	f7ff ffad 	bl	8006a34 <_Balloc>
 8006ada:	4680      	mov	r8, r0
 8006adc:	b928      	cbnz	r0, 8006aea <__multadd+0x5a>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <__multadd+0x84>)
 8006ae2:	480d      	ldr	r0, [pc, #52]	; (8006b18 <__multadd+0x88>)
 8006ae4:	21ba      	movs	r1, #186	; 0xba
 8006ae6:	f000 fb7f 	bl	80071e8 <__assert_func>
 8006aea:	6922      	ldr	r2, [r4, #16]
 8006aec:	3202      	adds	r2, #2
 8006aee:	f104 010c 	add.w	r1, r4, #12
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	300c      	adds	r0, #12
 8006af6:	f000 fb69 	bl	80071cc <memcpy>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4638      	mov	r0, r7
 8006afe:	f7ff ffbe 	bl	8006a7e <_Bfree>
 8006b02:	4644      	mov	r4, r8
 8006b04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b08:	3501      	adds	r5, #1
 8006b0a:	615e      	str	r6, [r3, #20]
 8006b0c:	6125      	str	r5, [r4, #16]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b14:	0800a1a1 	.word	0x0800a1a1
 8006b18:	0800a20a 	.word	0x0800a20a

08006b1c <__hi0bits>:
 8006b1c:	0c03      	lsrs	r3, r0, #16
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	b9d3      	cbnz	r3, 8006b58 <__hi0bits+0x3c>
 8006b22:	0400      	lsls	r0, r0, #16
 8006b24:	2310      	movs	r3, #16
 8006b26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b2a:	bf04      	itt	eq
 8006b2c:	0200      	lsleq	r0, r0, #8
 8006b2e:	3308      	addeq	r3, #8
 8006b30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b34:	bf04      	itt	eq
 8006b36:	0100      	lsleq	r0, r0, #4
 8006b38:	3304      	addeq	r3, #4
 8006b3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b3e:	bf04      	itt	eq
 8006b40:	0080      	lsleq	r0, r0, #2
 8006b42:	3302      	addeq	r3, #2
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db05      	blt.n	8006b54 <__hi0bits+0x38>
 8006b48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b4c:	f103 0301 	add.w	r3, r3, #1
 8006b50:	bf08      	it	eq
 8006b52:	2320      	moveq	r3, #32
 8006b54:	4618      	mov	r0, r3
 8006b56:	4770      	bx	lr
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e7e4      	b.n	8006b26 <__hi0bits+0xa>

08006b5c <__lo0bits>:
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	f013 0207 	ands.w	r2, r3, #7
 8006b62:	d00c      	beq.n	8006b7e <__lo0bits+0x22>
 8006b64:	07d9      	lsls	r1, r3, #31
 8006b66:	d422      	bmi.n	8006bae <__lo0bits+0x52>
 8006b68:	079a      	lsls	r2, r3, #30
 8006b6a:	bf49      	itett	mi
 8006b6c:	085b      	lsrmi	r3, r3, #1
 8006b6e:	089b      	lsrpl	r3, r3, #2
 8006b70:	6003      	strmi	r3, [r0, #0]
 8006b72:	2201      	movmi	r2, #1
 8006b74:	bf5c      	itt	pl
 8006b76:	6003      	strpl	r3, [r0, #0]
 8006b78:	2202      	movpl	r2, #2
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4770      	bx	lr
 8006b7e:	b299      	uxth	r1, r3
 8006b80:	b909      	cbnz	r1, 8006b86 <__lo0bits+0x2a>
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	2210      	movs	r2, #16
 8006b86:	b2d9      	uxtb	r1, r3
 8006b88:	b909      	cbnz	r1, 8006b8e <__lo0bits+0x32>
 8006b8a:	3208      	adds	r2, #8
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	0719      	lsls	r1, r3, #28
 8006b90:	bf04      	itt	eq
 8006b92:	091b      	lsreq	r3, r3, #4
 8006b94:	3204      	addeq	r2, #4
 8006b96:	0799      	lsls	r1, r3, #30
 8006b98:	bf04      	itt	eq
 8006b9a:	089b      	lsreq	r3, r3, #2
 8006b9c:	3202      	addeq	r2, #2
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	d403      	bmi.n	8006baa <__lo0bits+0x4e>
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f102 0201 	add.w	r2, r2, #1
 8006ba8:	d003      	beq.n	8006bb2 <__lo0bits+0x56>
 8006baa:	6003      	str	r3, [r0, #0]
 8006bac:	e7e5      	b.n	8006b7a <__lo0bits+0x1e>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	e7e3      	b.n	8006b7a <__lo0bits+0x1e>
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	e7e1      	b.n	8006b7a <__lo0bits+0x1e>
	...

08006bb8 <__i2b>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7ff ff39 	bl	8006a34 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__i2b+0x1a>
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <__i2b+0x24>)
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <__i2b+0x28>)
 8006bca:	f240 1145 	movw	r1, #325	; 0x145
 8006bce:	f000 fb0b 	bl	80071e8 <__assert_func>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6144      	str	r4, [r0, #20]
 8006bd6:	6103      	str	r3, [r0, #16]
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	0800a1a1 	.word	0x0800a1a1
 8006be0:	0800a20a 	.word	0x0800a20a

08006be4 <__multiply>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4691      	mov	r9, r2
 8006bea:	690a      	ldr	r2, [r1, #16]
 8006bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfb8      	it	lt
 8006bf4:	460b      	movlt	r3, r1
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	bfbc      	itt	lt
 8006bfa:	464c      	movlt	r4, r9
 8006bfc:	4699      	movlt	r9, r3
 8006bfe:	6927      	ldr	r7, [r4, #16]
 8006c00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c04:	68a3      	ldr	r3, [r4, #8]
 8006c06:	6861      	ldr	r1, [r4, #4]
 8006c08:	eb07 060a 	add.w	r6, r7, sl
 8006c0c:	42b3      	cmp	r3, r6
 8006c0e:	b085      	sub	sp, #20
 8006c10:	bfb8      	it	lt
 8006c12:	3101      	addlt	r1, #1
 8006c14:	f7ff ff0e 	bl	8006a34 <_Balloc>
 8006c18:	b930      	cbnz	r0, 8006c28 <__multiply+0x44>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4b44      	ldr	r3, [pc, #272]	; (8006d30 <__multiply+0x14c>)
 8006c1e:	4845      	ldr	r0, [pc, #276]	; (8006d34 <__multiply+0x150>)
 8006c20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c24:	f000 fae0 	bl	80071e8 <__assert_func>
 8006c28:	f100 0514 	add.w	r5, r0, #20
 8006c2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c30:	462b      	mov	r3, r5
 8006c32:	2200      	movs	r2, #0
 8006c34:	4543      	cmp	r3, r8
 8006c36:	d321      	bcc.n	8006c7c <__multiply+0x98>
 8006c38:	f104 0314 	add.w	r3, r4, #20
 8006c3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c40:	f109 0314 	add.w	r3, r9, #20
 8006c44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c48:	9202      	str	r2, [sp, #8]
 8006c4a:	1b3a      	subs	r2, r7, r4
 8006c4c:	3a15      	subs	r2, #21
 8006c4e:	f022 0203 	bic.w	r2, r2, #3
 8006c52:	3204      	adds	r2, #4
 8006c54:	f104 0115 	add.w	r1, r4, #21
 8006c58:	428f      	cmp	r7, r1
 8006c5a:	bf38      	it	cc
 8006c5c:	2204      	movcc	r2, #4
 8006c5e:	9201      	str	r2, [sp, #4]
 8006c60:	9a02      	ldr	r2, [sp, #8]
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d80c      	bhi.n	8006c82 <__multiply+0x9e>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	dd03      	ble.n	8006c74 <__multiply+0x90>
 8006c6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05b      	beq.n	8006d2c <__multiply+0x148>
 8006c74:	6106      	str	r6, [r0, #16]
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	f843 2b04 	str.w	r2, [r3], #4
 8006c80:	e7d8      	b.n	8006c34 <__multiply+0x50>
 8006c82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c86:	f1ba 0f00 	cmp.w	sl, #0
 8006c8a:	d024      	beq.n	8006cd6 <__multiply+0xf2>
 8006c8c:	f104 0e14 	add.w	lr, r4, #20
 8006c90:	46a9      	mov	r9, r5
 8006c92:	f04f 0c00 	mov.w	ip, #0
 8006c96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c9e:	fa1f fb82 	uxth.w	fp, r2
 8006ca2:	b289      	uxth	r1, r1
 8006ca4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ca8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cac:	f8d9 2000 	ldr.w	r2, [r9]
 8006cb0:	4461      	add	r1, ip
 8006cb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cbe:	b289      	uxth	r1, r1
 8006cc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc4:	4577      	cmp	r7, lr
 8006cc6:	f849 1b04 	str.w	r1, [r9], #4
 8006cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cce:	d8e2      	bhi.n	8006c96 <__multiply+0xb2>
 8006cd0:	9a01      	ldr	r2, [sp, #4]
 8006cd2:	f845 c002 	str.w	ip, [r5, r2]
 8006cd6:	9a03      	ldr	r2, [sp, #12]
 8006cd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	f1b9 0f00 	cmp.w	r9, #0
 8006ce2:	d021      	beq.n	8006d28 <__multiply+0x144>
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	f104 0c14 	add.w	ip, r4, #20
 8006cea:	46ae      	mov	lr, r5
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cf8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cfc:	4452      	add	r2, sl
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d04:	f84e 1b04 	str.w	r1, [lr], #4
 8006d08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d10:	f8be 1000 	ldrh.w	r1, [lr]
 8006d14:	fb09 110a 	mla	r1, r9, sl, r1
 8006d18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d1c:	4567      	cmp	r7, ip
 8006d1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d22:	d8e5      	bhi.n	8006cf0 <__multiply+0x10c>
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	50a9      	str	r1, [r5, r2]
 8006d28:	3504      	adds	r5, #4
 8006d2a:	e799      	b.n	8006c60 <__multiply+0x7c>
 8006d2c:	3e01      	subs	r6, #1
 8006d2e:	e79b      	b.n	8006c68 <__multiply+0x84>
 8006d30:	0800a1a1 	.word	0x0800a1a1
 8006d34:	0800a20a 	.word	0x0800a20a

08006d38 <__pow5mult>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	f012 0203 	ands.w	r2, r2, #3
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	d007      	beq.n	8006d58 <__pow5mult+0x20>
 8006d48:	4c1a      	ldr	r4, [pc, #104]	; (8006db4 <__pow5mult+0x7c>)
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d52:	f7ff fe9d 	bl	8006a90 <__multadd>
 8006d56:	4607      	mov	r7, r0
 8006d58:	10ad      	asrs	r5, r5, #2
 8006d5a:	d027      	beq.n	8006dac <__pow5mult+0x74>
 8006d5c:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8006d5e:	b944      	cbnz	r4, 8006d72 <__pow5mult+0x3a>
 8006d60:	f240 2171 	movw	r1, #625	; 0x271
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ff27 	bl	8006bb8 <__i2b>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6430      	str	r0, [r6, #64]	; 0x40
 8006d6e:	4604      	mov	r4, r0
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	f04f 0900 	mov.w	r9, #0
 8006d76:	07eb      	lsls	r3, r5, #31
 8006d78:	d50a      	bpl.n	8006d90 <__pow5mult+0x58>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ff30 	bl	8006be4 <__multiply>
 8006d84:	4639      	mov	r1, r7
 8006d86:	4680      	mov	r8, r0
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff fe78 	bl	8006a7e <_Bfree>
 8006d8e:	4647      	mov	r7, r8
 8006d90:	106d      	asrs	r5, r5, #1
 8006d92:	d00b      	beq.n	8006dac <__pow5mult+0x74>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	b938      	cbnz	r0, 8006da8 <__pow5mult+0x70>
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff ff21 	bl	8006be4 <__multiply>
 8006da2:	6020      	str	r0, [r4, #0]
 8006da4:	f8c0 9000 	str.w	r9, [r0]
 8006da8:	4604      	mov	r4, r0
 8006daa:	e7e4      	b.n	8006d76 <__pow5mult+0x3e>
 8006dac:	4638      	mov	r0, r7
 8006dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db2:	bf00      	nop
 8006db4:	0800a358 	.word	0x0800a358

08006db8 <__lshift>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	6849      	ldr	r1, [r1, #4]
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dc6:	68a3      	ldr	r3, [r4, #8]
 8006dc8:	4607      	mov	r7, r0
 8006dca:	4691      	mov	r9, r2
 8006dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dd0:	f108 0601 	add.w	r6, r8, #1
 8006dd4:	42b3      	cmp	r3, r6
 8006dd6:	db0b      	blt.n	8006df0 <__lshift+0x38>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff fe2b 	bl	8006a34 <_Balloc>
 8006dde:	4605      	mov	r5, r0
 8006de0:	b948      	cbnz	r0, 8006df6 <__lshift+0x3e>
 8006de2:	4602      	mov	r2, r0
 8006de4:	4b28      	ldr	r3, [pc, #160]	; (8006e88 <__lshift+0xd0>)
 8006de6:	4829      	ldr	r0, [pc, #164]	; (8006e8c <__lshift+0xd4>)
 8006de8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006dec:	f000 f9fc 	bl	80071e8 <__assert_func>
 8006df0:	3101      	adds	r1, #1
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	e7ee      	b.n	8006dd4 <__lshift+0x1c>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f100 0114 	add.w	r1, r0, #20
 8006dfc:	f100 0210 	add.w	r2, r0, #16
 8006e00:	4618      	mov	r0, r3
 8006e02:	4553      	cmp	r3, sl
 8006e04:	db33      	blt.n	8006e6e <__lshift+0xb6>
 8006e06:	6920      	ldr	r0, [r4, #16]
 8006e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e0c:	f104 0314 	add.w	r3, r4, #20
 8006e10:	f019 091f 	ands.w	r9, r9, #31
 8006e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e1c:	d02b      	beq.n	8006e76 <__lshift+0xbe>
 8006e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e22:	468a      	mov	sl, r1
 8006e24:	2200      	movs	r2, #0
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	fa00 f009 	lsl.w	r0, r0, r9
 8006e2c:	4310      	orrs	r0, r2
 8006e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e36:	459c      	cmp	ip, r3
 8006e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e3c:	d8f3      	bhi.n	8006e26 <__lshift+0x6e>
 8006e3e:	ebac 0304 	sub.w	r3, ip, r4
 8006e42:	3b15      	subs	r3, #21
 8006e44:	f023 0303 	bic.w	r3, r3, #3
 8006e48:	3304      	adds	r3, #4
 8006e4a:	f104 0015 	add.w	r0, r4, #21
 8006e4e:	4584      	cmp	ip, r0
 8006e50:	bf38      	it	cc
 8006e52:	2304      	movcc	r3, #4
 8006e54:	50ca      	str	r2, [r1, r3]
 8006e56:	b10a      	cbz	r2, 8006e5c <__lshift+0xa4>
 8006e58:	f108 0602 	add.w	r6, r8, #2
 8006e5c:	3e01      	subs	r6, #1
 8006e5e:	4638      	mov	r0, r7
 8006e60:	612e      	str	r6, [r5, #16]
 8006e62:	4621      	mov	r1, r4
 8006e64:	f7ff fe0b 	bl	8006a7e <_Bfree>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e72:	3301      	adds	r3, #1
 8006e74:	e7c5      	b.n	8006e02 <__lshift+0x4a>
 8006e76:	3904      	subs	r1, #4
 8006e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e80:	459c      	cmp	ip, r3
 8006e82:	d8f9      	bhi.n	8006e78 <__lshift+0xc0>
 8006e84:	e7ea      	b.n	8006e5c <__lshift+0xa4>
 8006e86:	bf00      	nop
 8006e88:	0800a1a1 	.word	0x0800a1a1
 8006e8c:	0800a20a 	.word	0x0800a20a

08006e90 <__mcmp>:
 8006e90:	b530      	push	{r4, r5, lr}
 8006e92:	6902      	ldr	r2, [r0, #16]
 8006e94:	690c      	ldr	r4, [r1, #16]
 8006e96:	1b12      	subs	r2, r2, r4
 8006e98:	d10e      	bne.n	8006eb8 <__mcmp+0x28>
 8006e9a:	f100 0314 	add.w	r3, r0, #20
 8006e9e:	3114      	adds	r1, #20
 8006ea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006eac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006eb0:	42a5      	cmp	r5, r4
 8006eb2:	d003      	beq.n	8006ebc <__mcmp+0x2c>
 8006eb4:	d305      	bcc.n	8006ec2 <__mcmp+0x32>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4610      	mov	r0, r2
 8006eba:	bd30      	pop	{r4, r5, pc}
 8006ebc:	4283      	cmp	r3, r0
 8006ebe:	d3f3      	bcc.n	8006ea8 <__mcmp+0x18>
 8006ec0:	e7fa      	b.n	8006eb8 <__mcmp+0x28>
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec6:	e7f7      	b.n	8006eb8 <__mcmp+0x28>

08006ec8 <__mdiff>:
 8006ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4606      	mov	r6, r0
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4690      	mov	r8, r2
 8006ed6:	f7ff ffdb 	bl	8006e90 <__mcmp>
 8006eda:	1e05      	subs	r5, r0, #0
 8006edc:	d110      	bne.n	8006f00 <__mdiff+0x38>
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff fda7 	bl	8006a34 <_Balloc>
 8006ee6:	b930      	cbnz	r0, 8006ef6 <__mdiff+0x2e>
 8006ee8:	4b3a      	ldr	r3, [pc, #232]	; (8006fd4 <__mdiff+0x10c>)
 8006eea:	4602      	mov	r2, r0
 8006eec:	f240 2137 	movw	r1, #567	; 0x237
 8006ef0:	4839      	ldr	r0, [pc, #228]	; (8006fd8 <__mdiff+0x110>)
 8006ef2:	f000 f979 	bl	80071e8 <__assert_func>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	bfa4      	itt	ge
 8006f02:	4643      	movge	r3, r8
 8006f04:	46a0      	movge	r8, r4
 8006f06:	4630      	mov	r0, r6
 8006f08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f0c:	bfa6      	itte	ge
 8006f0e:	461c      	movge	r4, r3
 8006f10:	2500      	movge	r5, #0
 8006f12:	2501      	movlt	r5, #1
 8006f14:	f7ff fd8e 	bl	8006a34 <_Balloc>
 8006f18:	b920      	cbnz	r0, 8006f24 <__mdiff+0x5c>
 8006f1a:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <__mdiff+0x10c>)
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	f240 2145 	movw	r1, #581	; 0x245
 8006f22:	e7e5      	b.n	8006ef0 <__mdiff+0x28>
 8006f24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f28:	6926      	ldr	r6, [r4, #16]
 8006f2a:	60c5      	str	r5, [r0, #12]
 8006f2c:	f104 0914 	add.w	r9, r4, #20
 8006f30:	f108 0514 	add.w	r5, r8, #20
 8006f34:	f100 0e14 	add.w	lr, r0, #20
 8006f38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f40:	f108 0210 	add.w	r2, r8, #16
 8006f44:	46f2      	mov	sl, lr
 8006f46:	2100      	movs	r1, #0
 8006f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f50:	fa11 f88b 	uxtah	r8, r1, fp
 8006f54:	b299      	uxth	r1, r3
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	eba8 0801 	sub.w	r8, r8, r1
 8006f5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f64:	fa1f f888 	uxth.w	r8, r8
 8006f68:	1419      	asrs	r1, r3, #16
 8006f6a:	454e      	cmp	r6, r9
 8006f6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f70:	f84a 3b04 	str.w	r3, [sl], #4
 8006f74:	d8e8      	bhi.n	8006f48 <__mdiff+0x80>
 8006f76:	1b33      	subs	r3, r6, r4
 8006f78:	3b15      	subs	r3, #21
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	3304      	adds	r3, #4
 8006f80:	3415      	adds	r4, #21
 8006f82:	42a6      	cmp	r6, r4
 8006f84:	bf38      	it	cc
 8006f86:	2304      	movcc	r3, #4
 8006f88:	441d      	add	r5, r3
 8006f8a:	4473      	add	r3, lr
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	462e      	mov	r6, r5
 8006f90:	4566      	cmp	r6, ip
 8006f92:	d30e      	bcc.n	8006fb2 <__mdiff+0xea>
 8006f94:	f10c 0203 	add.w	r2, ip, #3
 8006f98:	1b52      	subs	r2, r2, r5
 8006f9a:	f022 0203 	bic.w	r2, r2, #3
 8006f9e:	3d03      	subs	r5, #3
 8006fa0:	45ac      	cmp	ip, r5
 8006fa2:	bf38      	it	cc
 8006fa4:	2200      	movcc	r2, #0
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fac:	b17a      	cbz	r2, 8006fce <__mdiff+0x106>
 8006fae:	6107      	str	r7, [r0, #16]
 8006fb0:	e7a4      	b.n	8006efc <__mdiff+0x34>
 8006fb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fb6:	fa11 f288 	uxtah	r2, r1, r8
 8006fba:	1414      	asrs	r4, r2, #16
 8006fbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006fca:	1421      	asrs	r1, r4, #16
 8006fcc:	e7e0      	b.n	8006f90 <__mdiff+0xc8>
 8006fce:	3f01      	subs	r7, #1
 8006fd0:	e7ea      	b.n	8006fa8 <__mdiff+0xe0>
 8006fd2:	bf00      	nop
 8006fd4:	0800a1a1 	.word	0x0800a1a1
 8006fd8:	0800a20a 	.word	0x0800a20a

08006fdc <__d2b>:
 8006fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	ec59 8b10 	vmov	r8, r9, d0
 8006fe8:	4616      	mov	r6, r2
 8006fea:	f7ff fd23 	bl	8006a34 <_Balloc>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b930      	cbnz	r0, 8007000 <__d2b+0x24>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4b24      	ldr	r3, [pc, #144]	; (8007088 <__d2b+0xac>)
 8006ff6:	4825      	ldr	r0, [pc, #148]	; (800708c <__d2b+0xb0>)
 8006ff8:	f240 310f 	movw	r1, #783	; 0x30f
 8006ffc:	f000 f8f4 	bl	80071e8 <__assert_func>
 8007000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007008:	bb2d      	cbnz	r5, 8007056 <__d2b+0x7a>
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	f1b8 0300 	subs.w	r3, r8, #0
 8007010:	d026      	beq.n	8007060 <__d2b+0x84>
 8007012:	4668      	mov	r0, sp
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	f7ff fda1 	bl	8006b5c <__lo0bits>
 800701a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800701e:	b1e8      	cbz	r0, 800705c <__d2b+0x80>
 8007020:	f1c0 0320 	rsb	r3, r0, #32
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	430b      	orrs	r3, r1
 800702a:	40c2      	lsrs	r2, r0
 800702c:	6163      	str	r3, [r4, #20]
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	9b01      	ldr	r3, [sp, #4]
 8007032:	61a3      	str	r3, [r4, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf14      	ite	ne
 8007038:	2202      	movne	r2, #2
 800703a:	2201      	moveq	r2, #1
 800703c:	6122      	str	r2, [r4, #16]
 800703e:	b1bd      	cbz	r5, 8007070 <__d2b+0x94>
 8007040:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007044:	4405      	add	r5, r0
 8007046:	603d      	str	r5, [r7, #0]
 8007048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800704c:	6030      	str	r0, [r6, #0]
 800704e:	4620      	mov	r0, r4
 8007050:	b003      	add	sp, #12
 8007052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800705a:	e7d6      	b.n	800700a <__d2b+0x2e>
 800705c:	6161      	str	r1, [r4, #20]
 800705e:	e7e7      	b.n	8007030 <__d2b+0x54>
 8007060:	a801      	add	r0, sp, #4
 8007062:	f7ff fd7b 	bl	8006b5c <__lo0bits>
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	6163      	str	r3, [r4, #20]
 800706a:	3020      	adds	r0, #32
 800706c:	2201      	movs	r2, #1
 800706e:	e7e5      	b.n	800703c <__d2b+0x60>
 8007070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007078:	6038      	str	r0, [r7, #0]
 800707a:	6918      	ldr	r0, [r3, #16]
 800707c:	f7ff fd4e 	bl	8006b1c <__hi0bits>
 8007080:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007084:	e7e2      	b.n	800704c <__d2b+0x70>
 8007086:	bf00      	nop
 8007088:	0800a1a1 	.word	0x0800a1a1
 800708c:	0800a20a 	.word	0x0800a20a

08007090 <__ssprint_r>:
 8007090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	6813      	ldr	r3, [r2, #0]
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	6893      	ldr	r3, [r2, #8]
 800709a:	4680      	mov	r8, r0
 800709c:	460c      	mov	r4, r1
 800709e:	4617      	mov	r7, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d157      	bne.n	8007154 <__ssprint_r+0xc4>
 80070a4:	2000      	movs	r0, #0
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	b003      	add	sp, #12
 80070ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80070b6:	3308      	adds	r3, #8
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	68a6      	ldr	r6, [r4, #8]
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	f1bb 0f00 	cmp.w	fp, #0
 80070c2:	d0f5      	beq.n	80070b0 <__ssprint_r+0x20>
 80070c4:	45b3      	cmp	fp, r6
 80070c6:	d32d      	bcc.n	8007124 <__ssprint_r+0x94>
 80070c8:	89a2      	ldrh	r2, [r4, #12]
 80070ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ce:	d029      	beq.n	8007124 <__ssprint_r+0x94>
 80070d0:	6921      	ldr	r1, [r4, #16]
 80070d2:	6965      	ldr	r5, [r4, #20]
 80070d4:	eba0 0901 	sub.w	r9, r0, r1
 80070d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070e0:	f109 0001 	add.w	r0, r9, #1
 80070e4:	106d      	asrs	r5, r5, #1
 80070e6:	4458      	add	r0, fp
 80070e8:	4285      	cmp	r5, r0
 80070ea:	bf38      	it	cc
 80070ec:	4605      	movcc	r5, r0
 80070ee:	0553      	lsls	r3, r2, #21
 80070f0:	d534      	bpl.n	800715c <__ssprint_r+0xcc>
 80070f2:	4629      	mov	r1, r5
 80070f4:	4640      	mov	r0, r8
 80070f6:	f7fd f841 	bl	800417c <_malloc_r>
 80070fa:	4606      	mov	r6, r0
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d038      	beq.n	8007172 <__ssprint_r+0xe2>
 8007100:	464a      	mov	r2, r9
 8007102:	6921      	ldr	r1, [r4, #16]
 8007104:	f000 f862 	bl	80071cc <memcpy>
 8007108:	89a2      	ldrh	r2, [r4, #12]
 800710a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800710e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007112:	81a2      	strh	r2, [r4, #12]
 8007114:	6126      	str	r6, [r4, #16]
 8007116:	6165      	str	r5, [r4, #20]
 8007118:	444e      	add	r6, r9
 800711a:	eba5 0509 	sub.w	r5, r5, r9
 800711e:	6026      	str	r6, [r4, #0]
 8007120:	60a5      	str	r5, [r4, #8]
 8007122:	465e      	mov	r6, fp
 8007124:	455e      	cmp	r6, fp
 8007126:	bf28      	it	cs
 8007128:	465e      	movcs	r6, fp
 800712a:	4632      	mov	r2, r6
 800712c:	4651      	mov	r1, sl
 800712e:	6820      	ldr	r0, [r4, #0]
 8007130:	f000 f82b 	bl	800718a <memmove>
 8007134:	68a2      	ldr	r2, [r4, #8]
 8007136:	1b92      	subs	r2, r2, r6
 8007138:	60a2      	str	r2, [r4, #8]
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	4432      	add	r2, r6
 800713e:	6022      	str	r2, [r4, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	eba2 030b 	sub.w	r3, r2, fp
 8007146:	44da      	add	sl, fp
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0aa      	beq.n	80070a4 <__ssprint_r+0x14>
 800714e:	f04f 0b00 	mov.w	fp, #0
 8007152:	e7b2      	b.n	80070ba <__ssprint_r+0x2a>
 8007154:	f04f 0a00 	mov.w	sl, #0
 8007158:	46d3      	mov	fp, sl
 800715a:	e7ae      	b.n	80070ba <__ssprint_r+0x2a>
 800715c:	462a      	mov	r2, r5
 800715e:	4640      	mov	r0, r8
 8007160:	f000 f8a8 	bl	80072b4 <_realloc_r>
 8007164:	4606      	mov	r6, r0
 8007166:	2800      	cmp	r0, #0
 8007168:	d1d4      	bne.n	8007114 <__ssprint_r+0x84>
 800716a:	6921      	ldr	r1, [r4, #16]
 800716c:	4640      	mov	r0, r8
 800716e:	f7fc ff45 	bl	8003ffc <_free_r>
 8007172:	230c      	movs	r3, #12
 8007174:	f8c8 3000 	str.w	r3, [r8]
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	2300      	movs	r3, #0
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e78d      	b.n	80070a6 <__ssprint_r+0x16>

0800718a <memmove>:
 800718a:	4288      	cmp	r0, r1
 800718c:	b510      	push	{r4, lr}
 800718e:	eb01 0402 	add.w	r4, r1, r2
 8007192:	d902      	bls.n	800719a <memmove+0x10>
 8007194:	4284      	cmp	r4, r0
 8007196:	4623      	mov	r3, r4
 8007198:	d807      	bhi.n	80071aa <memmove+0x20>
 800719a:	1e43      	subs	r3, r0, #1
 800719c:	42a1      	cmp	r1, r4
 800719e:	d008      	beq.n	80071b2 <memmove+0x28>
 80071a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a8:	e7f8      	b.n	800719c <memmove+0x12>
 80071aa:	4402      	add	r2, r0
 80071ac:	4601      	mov	r1, r0
 80071ae:	428a      	cmp	r2, r1
 80071b0:	d100      	bne.n	80071b4 <memmove+0x2a>
 80071b2:	bd10      	pop	{r4, pc}
 80071b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071bc:	e7f7      	b.n	80071ae <memmove+0x24>
	...

080071c0 <__locale_mb_cur_max>:
 80071c0:	4b01      	ldr	r3, [pc, #4]	; (80071c8 <__locale_mb_cur_max+0x8>)
 80071c2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80071c6:	4770      	bx	lr
 80071c8:	20000558 	.word	0x20000558

080071cc <memcpy>:
 80071cc:	440a      	add	r2, r1
 80071ce:	4291      	cmp	r1, r2
 80071d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d4:	d100      	bne.n	80071d8 <memcpy+0xc>
 80071d6:	4770      	bx	lr
 80071d8:	b510      	push	{r4, lr}
 80071da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e2:	4291      	cmp	r1, r2
 80071e4:	d1f9      	bne.n	80071da <memcpy+0xe>
 80071e6:	bd10      	pop	{r4, pc}

080071e8 <__assert_func>:
 80071e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ea:	4614      	mov	r4, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <__assert_func+0x2c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4605      	mov	r5, r0
 80071f4:	68d8      	ldr	r0, [r3, #12]
 80071f6:	b14c      	cbz	r4, 800720c <__assert_func+0x24>
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <__assert_func+0x30>)
 80071fa:	9100      	str	r1, [sp, #0]
 80071fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007200:	4906      	ldr	r1, [pc, #24]	; (800721c <__assert_func+0x34>)
 8007202:	462b      	mov	r3, r5
 8007204:	f000 fa0c 	bl	8007620 <fiprintf>
 8007208:	f001 f92d 	bl	8008466 <abort>
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <__assert_func+0x38>)
 800720e:	461c      	mov	r4, r3
 8007210:	e7f3      	b.n	80071fa <__assert_func+0x12>
 8007212:	bf00      	nop
 8007214:	20000140 	.word	0x20000140
 8007218:	0800a36e 	.word	0x0800a36e
 800721c:	0800a37b 	.word	0x0800a37b
 8007220:	0800a3a9 	.word	0x0800a3a9

08007224 <_calloc_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	fba1 1502 	umull	r1, r5, r1, r2
 800722a:	b92d      	cbnz	r5, 8007238 <_calloc_r+0x14>
 800722c:	f7fc ffa6 	bl	800417c <_malloc_r>
 8007230:	4604      	mov	r4, r0
 8007232:	b938      	cbnz	r0, 8007244 <_calloc_r+0x20>
 8007234:	4620      	mov	r0, r4
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	f7fc fe4e 	bl	8003ed8 <__errno>
 800723c:	230c      	movs	r3, #12
 800723e:	6003      	str	r3, [r0, #0]
 8007240:	2400      	movs	r4, #0
 8007242:	e7f7      	b.n	8007234 <_calloc_r+0x10>
 8007244:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007248:	f022 0203 	bic.w	r2, r2, #3
 800724c:	3a04      	subs	r2, #4
 800724e:	2a24      	cmp	r2, #36	; 0x24
 8007250:	d819      	bhi.n	8007286 <_calloc_r+0x62>
 8007252:	2a13      	cmp	r2, #19
 8007254:	d915      	bls.n	8007282 <_calloc_r+0x5e>
 8007256:	2a1b      	cmp	r2, #27
 8007258:	e9c0 5500 	strd	r5, r5, [r0]
 800725c:	d806      	bhi.n	800726c <_calloc_r+0x48>
 800725e:	f100 0308 	add.w	r3, r0, #8
 8007262:	2200      	movs	r2, #0
 8007264:	e9c3 2200 	strd	r2, r2, [r3]
 8007268:	609a      	str	r2, [r3, #8]
 800726a:	e7e3      	b.n	8007234 <_calloc_r+0x10>
 800726c:	2a24      	cmp	r2, #36	; 0x24
 800726e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8007272:	bf11      	iteee	ne
 8007274:	f100 0310 	addne.w	r3, r0, #16
 8007278:	6105      	streq	r5, [r0, #16]
 800727a:	f100 0318 	addeq.w	r3, r0, #24
 800727e:	6145      	streq	r5, [r0, #20]
 8007280:	e7ef      	b.n	8007262 <_calloc_r+0x3e>
 8007282:	4603      	mov	r3, r0
 8007284:	e7ed      	b.n	8007262 <_calloc_r+0x3e>
 8007286:	4629      	mov	r1, r5
 8007288:	f7fc fdd7 	bl	8003e3a <memset>
 800728c:	e7d2      	b.n	8007234 <_calloc_r+0x10>

0800728e <__ascii_mbtowc>:
 800728e:	b082      	sub	sp, #8
 8007290:	b901      	cbnz	r1, 8007294 <__ascii_mbtowc+0x6>
 8007292:	a901      	add	r1, sp, #4
 8007294:	b142      	cbz	r2, 80072a8 <__ascii_mbtowc+0x1a>
 8007296:	b14b      	cbz	r3, 80072ac <__ascii_mbtowc+0x1e>
 8007298:	7813      	ldrb	r3, [r2, #0]
 800729a:	600b      	str	r3, [r1, #0]
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	1e10      	subs	r0, r2, #0
 80072a0:	bf18      	it	ne
 80072a2:	2001      	movne	r0, #1
 80072a4:	b002      	add	sp, #8
 80072a6:	4770      	bx	lr
 80072a8:	4610      	mov	r0, r2
 80072aa:	e7fb      	b.n	80072a4 <__ascii_mbtowc+0x16>
 80072ac:	f06f 0001 	mvn.w	r0, #1
 80072b0:	e7f8      	b.n	80072a4 <__ascii_mbtowc+0x16>
	...

080072b4 <_realloc_r>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4682      	mov	sl, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b929      	cbnz	r1, 80072ca <_realloc_r+0x16>
 80072be:	4611      	mov	r1, r2
 80072c0:	b003      	add	sp, #12
 80072c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c6:	f7fc bf59 	b.w	800417c <_malloc_r>
 80072ca:	9201      	str	r2, [sp, #4]
 80072cc:	f7fd f990 	bl	80045f0 <__malloc_lock>
 80072d0:	9a01      	ldr	r2, [sp, #4]
 80072d2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80072d6:	f102 080b 	add.w	r8, r2, #11
 80072da:	f1b8 0f16 	cmp.w	r8, #22
 80072de:	d90b      	bls.n	80072f8 <_realloc_r+0x44>
 80072e0:	f038 0807 	bics.w	r8, r8, #7
 80072e4:	d50a      	bpl.n	80072fc <_realloc_r+0x48>
 80072e6:	230c      	movs	r3, #12
 80072e8:	f8ca 3000 	str.w	r3, [sl]
 80072ec:	f04f 0b00 	mov.w	fp, #0
 80072f0:	4658      	mov	r0, fp
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	f04f 0810 	mov.w	r8, #16
 80072fc:	4590      	cmp	r8, r2
 80072fe:	d3f2      	bcc.n	80072e6 <_realloc_r+0x32>
 8007300:	f025 0603 	bic.w	r6, r5, #3
 8007304:	45b0      	cmp	r8, r6
 8007306:	f1a4 0908 	sub.w	r9, r4, #8
 800730a:	f340 8170 	ble.w	80075ee <_realloc_r+0x33a>
 800730e:	499c      	ldr	r1, [pc, #624]	; (8007580 <_realloc_r+0x2cc>)
 8007310:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007314:	eb09 0306 	add.w	r3, r9, r6
 8007318:	459c      	cmp	ip, r3
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	d005      	beq.n	800732a <_realloc_r+0x76>
 800731e:	f021 0001 	bic.w	r0, r1, #1
 8007322:	4418      	add	r0, r3
 8007324:	6840      	ldr	r0, [r0, #4]
 8007326:	07c7      	lsls	r7, r0, #31
 8007328:	d447      	bmi.n	80073ba <_realloc_r+0x106>
 800732a:	f021 0103 	bic.w	r1, r1, #3
 800732e:	459c      	cmp	ip, r3
 8007330:	eb06 0701 	add.w	r7, r6, r1
 8007334:	d119      	bne.n	800736a <_realloc_r+0xb6>
 8007336:	f108 0010 	add.w	r0, r8, #16
 800733a:	42b8      	cmp	r0, r7
 800733c:	dc3f      	bgt.n	80073be <_realloc_r+0x10a>
 800733e:	eb09 0308 	add.w	r3, r9, r8
 8007342:	4a8f      	ldr	r2, [pc, #572]	; (8007580 <_realloc_r+0x2cc>)
 8007344:	eba7 0708 	sub.w	r7, r7, r8
 8007348:	f047 0701 	orr.w	r7, r7, #1
 800734c:	6093      	str	r3, [r2, #8]
 800734e:	605f      	str	r7, [r3, #4]
 8007350:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	ea43 0308 	orr.w	r3, r3, r8
 800735c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007360:	4650      	mov	r0, sl
 8007362:	f7fd f94b 	bl	80045fc <__malloc_unlock>
 8007366:	46a3      	mov	fp, r4
 8007368:	e7c2      	b.n	80072f0 <_realloc_r+0x3c>
 800736a:	45b8      	cmp	r8, r7
 800736c:	dc27      	bgt.n	80073be <_realloc_r+0x10a>
 800736e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	6093      	str	r3, [r2, #8]
 8007376:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800737a:	eba7 0008 	sub.w	r0, r7, r8
 800737e:	280f      	cmp	r0, #15
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	eb09 0207 	add.w	r2, r9, r7
 8007388:	f240 8133 	bls.w	80075f2 <_realloc_r+0x33e>
 800738c:	eb09 0108 	add.w	r1, r9, r8
 8007390:	ea48 0303 	orr.w	r3, r8, r3
 8007394:	f040 0001 	orr.w	r0, r0, #1
 8007398:	f8c9 3004 	str.w	r3, [r9, #4]
 800739c:	6048      	str	r0, [r1, #4]
 800739e:	6853      	ldr	r3, [r2, #4]
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	6053      	str	r3, [r2, #4]
 80073a6:	3108      	adds	r1, #8
 80073a8:	4650      	mov	r0, sl
 80073aa:	f7fc fe27 	bl	8003ffc <_free_r>
 80073ae:	4650      	mov	r0, sl
 80073b0:	f7fd f924 	bl	80045fc <__malloc_unlock>
 80073b4:	f109 0b08 	add.w	fp, r9, #8
 80073b8:	e79a      	b.n	80072f0 <_realloc_r+0x3c>
 80073ba:	2100      	movs	r1, #0
 80073bc:	460b      	mov	r3, r1
 80073be:	07e8      	lsls	r0, r5, #31
 80073c0:	f100 80c6 	bmi.w	8007550 <_realloc_r+0x29c>
 80073c4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80073c8:	eba9 0505 	sub.w	r5, r9, r5
 80073cc:	6868      	ldr	r0, [r5, #4]
 80073ce:	f020 0003 	bic.w	r0, r0, #3
 80073d2:	eb00 0b06 	add.w	fp, r0, r6
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8086 	beq.w	80074e8 <_realloc_r+0x234>
 80073dc:	459c      	cmp	ip, r3
 80073de:	eb01 070b 	add.w	r7, r1, fp
 80073e2:	d149      	bne.n	8007478 <_realloc_r+0x1c4>
 80073e4:	f108 0310 	add.w	r3, r8, #16
 80073e8:	42bb      	cmp	r3, r7
 80073ea:	dc7d      	bgt.n	80074e8 <_realloc_r+0x234>
 80073ec:	46ab      	mov	fp, r5
 80073ee:	68eb      	ldr	r3, [r5, #12]
 80073f0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80073f4:	60d3      	str	r3, [r2, #12]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	1f32      	subs	r2, r6, #4
 80073fa:	2a24      	cmp	r2, #36	; 0x24
 80073fc:	d837      	bhi.n	800746e <_realloc_r+0x1ba>
 80073fe:	2a13      	cmp	r2, #19
 8007400:	d933      	bls.n	800746a <_realloc_r+0x1b6>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	60ab      	str	r3, [r5, #8]
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	60eb      	str	r3, [r5, #12]
 800740a:	2a1b      	cmp	r2, #27
 800740c:	d81b      	bhi.n	8007446 <_realloc_r+0x192>
 800740e:	3408      	adds	r4, #8
 8007410:	f105 0310 	add.w	r3, r5, #16
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	6862      	ldr	r2, [r4, #4]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	68a2      	ldr	r2, [r4, #8]
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	eb05 0308 	add.w	r3, r5, r8
 8007424:	4a56      	ldr	r2, [pc, #344]	; (8007580 <_realloc_r+0x2cc>)
 8007426:	eba7 0708 	sub.w	r7, r7, r8
 800742a:	f047 0701 	orr.w	r7, r7, #1
 800742e:	6093      	str	r3, [r2, #8]
 8007430:	605f      	str	r7, [r3, #4]
 8007432:	686b      	ldr	r3, [r5, #4]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	ea43 0308 	orr.w	r3, r3, r8
 800743c:	606b      	str	r3, [r5, #4]
 800743e:	4650      	mov	r0, sl
 8007440:	f7fd f8dc 	bl	80045fc <__malloc_unlock>
 8007444:	e754      	b.n	80072f0 <_realloc_r+0x3c>
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	612b      	str	r3, [r5, #16]
 800744a:	68e3      	ldr	r3, [r4, #12]
 800744c:	616b      	str	r3, [r5, #20]
 800744e:	2a24      	cmp	r2, #36	; 0x24
 8007450:	bf01      	itttt	eq
 8007452:	6923      	ldreq	r3, [r4, #16]
 8007454:	61ab      	streq	r3, [r5, #24]
 8007456:	6962      	ldreq	r2, [r4, #20]
 8007458:	61ea      	streq	r2, [r5, #28]
 800745a:	bf19      	ittee	ne
 800745c:	3410      	addne	r4, #16
 800745e:	f105 0318 	addne.w	r3, r5, #24
 8007462:	f105 0320 	addeq.w	r3, r5, #32
 8007466:	3418      	addeq	r4, #24
 8007468:	e7d4      	b.n	8007414 <_realloc_r+0x160>
 800746a:	465b      	mov	r3, fp
 800746c:	e7d2      	b.n	8007414 <_realloc_r+0x160>
 800746e:	4621      	mov	r1, r4
 8007470:	4658      	mov	r0, fp
 8007472:	f7ff fe8a 	bl	800718a <memmove>
 8007476:	e7d3      	b.n	8007420 <_realloc_r+0x16c>
 8007478:	45b8      	cmp	r8, r7
 800747a:	dc35      	bgt.n	80074e8 <_realloc_r+0x234>
 800747c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007480:	4628      	mov	r0, r5
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	6093      	str	r3, [r2, #8]
 8007486:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800748a:	68eb      	ldr	r3, [r5, #12]
 800748c:	60d3      	str	r3, [r2, #12]
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	1f32      	subs	r2, r6, #4
 8007492:	2a24      	cmp	r2, #36	; 0x24
 8007494:	d824      	bhi.n	80074e0 <_realloc_r+0x22c>
 8007496:	2a13      	cmp	r2, #19
 8007498:	d908      	bls.n	80074ac <_realloc_r+0x1f8>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	60ab      	str	r3, [r5, #8]
 800749e:	6863      	ldr	r3, [r4, #4]
 80074a0:	60eb      	str	r3, [r5, #12]
 80074a2:	2a1b      	cmp	r2, #27
 80074a4:	d80a      	bhi.n	80074bc <_realloc_r+0x208>
 80074a6:	3408      	adds	r4, #8
 80074a8:	f105 0010 	add.w	r0, r5, #16
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	6003      	str	r3, [r0, #0]
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	6043      	str	r3, [r0, #4]
 80074b4:	68a3      	ldr	r3, [r4, #8]
 80074b6:	6083      	str	r3, [r0, #8]
 80074b8:	46a9      	mov	r9, r5
 80074ba:	e75c      	b.n	8007376 <_realloc_r+0xc2>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	612b      	str	r3, [r5, #16]
 80074c0:	68e3      	ldr	r3, [r4, #12]
 80074c2:	616b      	str	r3, [r5, #20]
 80074c4:	2a24      	cmp	r2, #36	; 0x24
 80074c6:	bf01      	itttt	eq
 80074c8:	6923      	ldreq	r3, [r4, #16]
 80074ca:	61ab      	streq	r3, [r5, #24]
 80074cc:	6963      	ldreq	r3, [r4, #20]
 80074ce:	61eb      	streq	r3, [r5, #28]
 80074d0:	bf19      	ittee	ne
 80074d2:	3410      	addne	r4, #16
 80074d4:	f105 0018 	addne.w	r0, r5, #24
 80074d8:	f105 0020 	addeq.w	r0, r5, #32
 80074dc:	3418      	addeq	r4, #24
 80074de:	e7e5      	b.n	80074ac <_realloc_r+0x1f8>
 80074e0:	4621      	mov	r1, r4
 80074e2:	f7ff fe52 	bl	800718a <memmove>
 80074e6:	e7e7      	b.n	80074b8 <_realloc_r+0x204>
 80074e8:	45d8      	cmp	r8, fp
 80074ea:	dc31      	bgt.n	8007550 <_realloc_r+0x29c>
 80074ec:	4628      	mov	r0, r5
 80074ee:	68eb      	ldr	r3, [r5, #12]
 80074f0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80074f4:	60d3      	str	r3, [r2, #12]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	1f32      	subs	r2, r6, #4
 80074fa:	2a24      	cmp	r2, #36	; 0x24
 80074fc:	d824      	bhi.n	8007548 <_realloc_r+0x294>
 80074fe:	2a13      	cmp	r2, #19
 8007500:	d908      	bls.n	8007514 <_realloc_r+0x260>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	60ab      	str	r3, [r5, #8]
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	60eb      	str	r3, [r5, #12]
 800750a:	2a1b      	cmp	r2, #27
 800750c:	d80a      	bhi.n	8007524 <_realloc_r+0x270>
 800750e:	3408      	adds	r4, #8
 8007510:	f105 0010 	add.w	r0, r5, #16
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	6003      	str	r3, [r0, #0]
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	6043      	str	r3, [r0, #4]
 800751c:	68a3      	ldr	r3, [r4, #8]
 800751e:	6083      	str	r3, [r0, #8]
 8007520:	465f      	mov	r7, fp
 8007522:	e7c9      	b.n	80074b8 <_realloc_r+0x204>
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	612b      	str	r3, [r5, #16]
 8007528:	68e3      	ldr	r3, [r4, #12]
 800752a:	616b      	str	r3, [r5, #20]
 800752c:	2a24      	cmp	r2, #36	; 0x24
 800752e:	bf01      	itttt	eq
 8007530:	6923      	ldreq	r3, [r4, #16]
 8007532:	61ab      	streq	r3, [r5, #24]
 8007534:	6963      	ldreq	r3, [r4, #20]
 8007536:	61eb      	streq	r3, [r5, #28]
 8007538:	bf19      	ittee	ne
 800753a:	3410      	addne	r4, #16
 800753c:	f105 0018 	addne.w	r0, r5, #24
 8007540:	f105 0020 	addeq.w	r0, r5, #32
 8007544:	3418      	addeq	r4, #24
 8007546:	e7e5      	b.n	8007514 <_realloc_r+0x260>
 8007548:	4621      	mov	r1, r4
 800754a:	f7ff fe1e 	bl	800718a <memmove>
 800754e:	e7e7      	b.n	8007520 <_realloc_r+0x26c>
 8007550:	4611      	mov	r1, r2
 8007552:	4650      	mov	r0, sl
 8007554:	f7fc fe12 	bl	800417c <_malloc_r>
 8007558:	4683      	mov	fp, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	f43f af6f 	beq.w	800743e <_realloc_r+0x18a>
 8007560:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	444b      	add	r3, r9
 800756a:	f1a0 0208 	sub.w	r2, r0, #8
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <_realloc_r+0x2d0>
 8007572:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007576:	f027 0703 	bic.w	r7, r7, #3
 800757a:	4437      	add	r7, r6
 800757c:	e6fb      	b.n	8007376 <_realloc_r+0xc2>
 800757e:	bf00      	nop
 8007580:	20000148 	.word	0x20000148
 8007584:	1f32      	subs	r2, r6, #4
 8007586:	2a24      	cmp	r2, #36	; 0x24
 8007588:	d82d      	bhi.n	80075e6 <_realloc_r+0x332>
 800758a:	2a13      	cmp	r2, #19
 800758c:	d928      	bls.n	80075e0 <_realloc_r+0x32c>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	6003      	str	r3, [r0, #0]
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	6043      	str	r3, [r0, #4]
 8007596:	2a1b      	cmp	r2, #27
 8007598:	d80e      	bhi.n	80075b8 <_realloc_r+0x304>
 800759a:	f104 0208 	add.w	r2, r4, #8
 800759e:	f100 0308 	add.w	r3, r0, #8
 80075a2:	6811      	ldr	r1, [r2, #0]
 80075a4:	6019      	str	r1, [r3, #0]
 80075a6:	6851      	ldr	r1, [r2, #4]
 80075a8:	6059      	str	r1, [r3, #4]
 80075aa:	6892      	ldr	r2, [r2, #8]
 80075ac:	609a      	str	r2, [r3, #8]
 80075ae:	4621      	mov	r1, r4
 80075b0:	4650      	mov	r0, sl
 80075b2:	f7fc fd23 	bl	8003ffc <_free_r>
 80075b6:	e742      	b.n	800743e <_realloc_r+0x18a>
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	6083      	str	r3, [r0, #8]
 80075bc:	68e3      	ldr	r3, [r4, #12]
 80075be:	60c3      	str	r3, [r0, #12]
 80075c0:	2a24      	cmp	r2, #36	; 0x24
 80075c2:	bf01      	itttt	eq
 80075c4:	6923      	ldreq	r3, [r4, #16]
 80075c6:	6103      	streq	r3, [r0, #16]
 80075c8:	6961      	ldreq	r1, [r4, #20]
 80075ca:	6141      	streq	r1, [r0, #20]
 80075cc:	bf19      	ittee	ne
 80075ce:	f104 0210 	addne.w	r2, r4, #16
 80075d2:	f100 0310 	addne.w	r3, r0, #16
 80075d6:	f104 0218 	addeq.w	r2, r4, #24
 80075da:	f100 0318 	addeq.w	r3, r0, #24
 80075de:	e7e0      	b.n	80075a2 <_realloc_r+0x2ee>
 80075e0:	4603      	mov	r3, r0
 80075e2:	4622      	mov	r2, r4
 80075e4:	e7dd      	b.n	80075a2 <_realloc_r+0x2ee>
 80075e6:	4621      	mov	r1, r4
 80075e8:	f7ff fdcf 	bl	800718a <memmove>
 80075ec:	e7df      	b.n	80075ae <_realloc_r+0x2fa>
 80075ee:	4637      	mov	r7, r6
 80075f0:	e6c1      	b.n	8007376 <_realloc_r+0xc2>
 80075f2:	431f      	orrs	r7, r3
 80075f4:	f8c9 7004 	str.w	r7, [r9, #4]
 80075f8:	6853      	ldr	r3, [r2, #4]
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6053      	str	r3, [r2, #4]
 8007600:	e6d5      	b.n	80073ae <_realloc_r+0xfa>
 8007602:	bf00      	nop

08007604 <__ascii_wctomb>:
 8007604:	b149      	cbz	r1, 800761a <__ascii_wctomb+0x16>
 8007606:	2aff      	cmp	r2, #255	; 0xff
 8007608:	bf85      	ittet	hi
 800760a:	238a      	movhi	r3, #138	; 0x8a
 800760c:	6003      	strhi	r3, [r0, #0]
 800760e:	700a      	strbls	r2, [r1, #0]
 8007610:	f04f 30ff 	movhi.w	r0, #4294967295
 8007614:	bf98      	it	ls
 8007616:	2001      	movls	r0, #1
 8007618:	4770      	bx	lr
 800761a:	4608      	mov	r0, r1
 800761c:	4770      	bx	lr
	...

08007620 <fiprintf>:
 8007620:	b40e      	push	{r1, r2, r3}
 8007622:	b503      	push	{r0, r1, lr}
 8007624:	4601      	mov	r1, r0
 8007626:	ab03      	add	r3, sp, #12
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <fiprintf+0x20>)
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f000 f839 	bl	80076a8 <_vfiprintf_r>
 8007636:	b002      	add	sp, #8
 8007638:	f85d eb04 	ldr.w	lr, [sp], #4
 800763c:	b003      	add	sp, #12
 800763e:	4770      	bx	lr
 8007640:	20000140 	.word	0x20000140

08007644 <__sprint_r>:
 8007644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	6893      	ldr	r3, [r2, #8]
 800764a:	4680      	mov	r8, r0
 800764c:	460f      	mov	r7, r1
 800764e:	4614      	mov	r4, r2
 8007650:	b343      	cbz	r3, 80076a4 <__sprint_r+0x60>
 8007652:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007654:	049d      	lsls	r5, r3, #18
 8007656:	d522      	bpl.n	800769e <__sprint_r+0x5a>
 8007658:	6815      	ldr	r5, [r2, #0]
 800765a:	3508      	adds	r5, #8
 800765c:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8007660:	f04f 0900 	mov.w	r9, #0
 8007664:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007668:	45ca      	cmp	sl, r9
 800766a:	dc0d      	bgt.n	8007688 <__sprint_r+0x44>
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	f026 0603 	bic.w	r6, r6, #3
 8007672:	1b98      	subs	r0, r3, r6
 8007674:	60a0      	str	r0, [r4, #8]
 8007676:	3508      	adds	r5, #8
 8007678:	2800      	cmp	r0, #0
 800767a:	d1ef      	bne.n	800765c <__sprint_r+0x18>
 800767c:	2300      	movs	r3, #0
 800767e:	60a3      	str	r3, [r4, #8]
 8007680:	2300      	movs	r3, #0
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800768c:	463a      	mov	r2, r7
 800768e:	4640      	mov	r0, r8
 8007690:	f000 febf 	bl	8008412 <_fputwc_r>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d0f1      	beq.n	800767c <__sprint_r+0x38>
 8007698:	f109 0901 	add.w	r9, r9, #1
 800769c:	e7e4      	b.n	8007668 <__sprint_r+0x24>
 800769e:	f000 fcd5 	bl	800804c <__sfvwrite_r>
 80076a2:	e7eb      	b.n	800767c <__sprint_r+0x38>
 80076a4:	4618      	mov	r0, r3
 80076a6:	e7eb      	b.n	8007680 <__sprint_r+0x3c>

080076a8 <_vfiprintf_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b02 	vpush	{d8}
 80076b0:	b0bb      	sub	sp, #236	; 0xec
 80076b2:	460f      	mov	r7, r1
 80076b4:	9201      	str	r2, [sp, #4]
 80076b6:	461d      	mov	r5, r3
 80076b8:	461c      	mov	r4, r3
 80076ba:	4681      	mov	r9, r0
 80076bc:	b118      	cbz	r0, 80076c6 <_vfiprintf_r+0x1e>
 80076be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80076c0:	b90b      	cbnz	r3, 80076c6 <_vfiprintf_r+0x1e>
 80076c2:	f7fc fb0d 	bl	8003ce0 <__sinit>
 80076c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c8:	07d8      	lsls	r0, r3, #31
 80076ca:	d405      	bmi.n	80076d8 <_vfiprintf_r+0x30>
 80076cc:	89bb      	ldrh	r3, [r7, #12]
 80076ce:	0599      	lsls	r1, r3, #22
 80076d0:	d402      	bmi.n	80076d8 <_vfiprintf_r+0x30>
 80076d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80076d4:	f7fc fc2c 	bl	8003f30 <__retarget_lock_acquire_recursive>
 80076d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076dc:	049a      	lsls	r2, r3, #18
 80076de:	d406      	bmi.n	80076ee <_vfiprintf_r+0x46>
 80076e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076e4:	81bb      	strh	r3, [r7, #12]
 80076e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ec:	667b      	str	r3, [r7, #100]	; 0x64
 80076ee:	89bb      	ldrh	r3, [r7, #12]
 80076f0:	071e      	lsls	r6, r3, #28
 80076f2:	d501      	bpl.n	80076f8 <_vfiprintf_r+0x50>
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	b9bb      	cbnz	r3, 8007728 <_vfiprintf_r+0x80>
 80076f8:	4639      	mov	r1, r7
 80076fa:	4648      	mov	r0, r9
 80076fc:	f000 fdf0 	bl	80082e0 <__swsetup_r>
 8007700:	b190      	cbz	r0, 8007728 <_vfiprintf_r+0x80>
 8007702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007704:	07d8      	lsls	r0, r3, #31
 8007706:	d508      	bpl.n	800771a <_vfiprintf_r+0x72>
 8007708:	f04f 33ff 	mov.w	r3, #4294967295
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	9802      	ldr	r0, [sp, #8]
 8007710:	b03b      	add	sp, #236	; 0xec
 8007712:	ecbd 8b02 	vpop	{d8}
 8007716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771a:	89bb      	ldrh	r3, [r7, #12]
 800771c:	0599      	lsls	r1, r3, #22
 800771e:	d4f3      	bmi.n	8007708 <_vfiprintf_r+0x60>
 8007720:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007722:	f7fc fc06 	bl	8003f32 <__retarget_lock_release_recursive>
 8007726:	e7ef      	b.n	8007708 <_vfiprintf_r+0x60>
 8007728:	89bb      	ldrh	r3, [r7, #12]
 800772a:	f003 021a 	and.w	r2, r3, #26
 800772e:	2a0a      	cmp	r2, #10
 8007730:	d116      	bne.n	8007760 <_vfiprintf_r+0xb8>
 8007732:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007736:	2a00      	cmp	r2, #0
 8007738:	db12      	blt.n	8007760 <_vfiprintf_r+0xb8>
 800773a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800773c:	07d2      	lsls	r2, r2, #31
 800773e:	d404      	bmi.n	800774a <_vfiprintf_r+0xa2>
 8007740:	059e      	lsls	r6, r3, #22
 8007742:	d402      	bmi.n	800774a <_vfiprintf_r+0xa2>
 8007744:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007746:	f7fc fbf4 	bl	8003f32 <__retarget_lock_release_recursive>
 800774a:	9a01      	ldr	r2, [sp, #4]
 800774c:	462b      	mov	r3, r5
 800774e:	4639      	mov	r1, r7
 8007750:	4648      	mov	r0, r9
 8007752:	b03b      	add	sp, #236	; 0xec
 8007754:	ecbd 8b02 	vpop	{d8}
 8007758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	f000 bc36 	b.w	8007fcc <__sbprintf>
 8007760:	2300      	movs	r3, #0
 8007762:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8007766:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800776a:	ae11      	add	r6, sp, #68	; 0x44
 800776c:	ee08 3a10 	vmov	s16, r3
 8007770:	960e      	str	r6, [sp, #56]	; 0x38
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	461d      	mov	r5, r3
 800777a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800777e:	b10a      	cbz	r2, 8007784 <_vfiprintf_r+0xdc>
 8007780:	2a25      	cmp	r2, #37	; 0x25
 8007782:	d1f9      	bne.n	8007778 <_vfiprintf_r+0xd0>
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	ebb5 0803 	subs.w	r8, r5, r3
 800778a:	d00d      	beq.n	80077a8 <_vfiprintf_r+0x100>
 800778c:	e9c6 3800 	strd	r3, r8, [r6]
 8007790:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007792:	4443      	add	r3, r8
 8007794:	9310      	str	r3, [sp, #64]	; 0x40
 8007796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007798:	3301      	adds	r3, #1
 800779a:	2b07      	cmp	r3, #7
 800779c:	930f      	str	r3, [sp, #60]	; 0x3c
 800779e:	dc76      	bgt.n	800788e <_vfiprintf_r+0x1e6>
 80077a0:	3608      	adds	r6, #8
 80077a2:	9b02      	ldr	r3, [sp, #8]
 80077a4:	4443      	add	r3, r8
 80077a6:	9302      	str	r3, [sp, #8]
 80077a8:	782b      	ldrb	r3, [r5, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 83d0 	beq.w	8007f50 <_vfiprintf_r+0x8a8>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	3501      	adds	r5, #1
 80077b8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80077bc:	9200      	str	r2, [sp, #0]
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	469a      	mov	sl, r3
 80077c2:	462a      	mov	r2, r5
 80077c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	f1a3 0220 	sub.w	r2, r3, #32
 80077ce:	2a5a      	cmp	r2, #90	; 0x5a
 80077d0:	f200 831c 	bhi.w	8007e0c <_vfiprintf_r+0x764>
 80077d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80077d8:	031a007e 	.word	0x031a007e
 80077dc:	0086031a 	.word	0x0086031a
 80077e0:	031a031a 	.word	0x031a031a
 80077e4:	0065031a 	.word	0x0065031a
 80077e8:	031a031a 	.word	0x031a031a
 80077ec:	00930089 	.word	0x00930089
 80077f0:	0090031a 	.word	0x0090031a
 80077f4:	031a0095 	.word	0x031a0095
 80077f8:	00b300b0 	.word	0x00b300b0
 80077fc:	00b300b3 	.word	0x00b300b3
 8007800:	00b300b3 	.word	0x00b300b3
 8007804:	00b300b3 	.word	0x00b300b3
 8007808:	00b300b3 	.word	0x00b300b3
 800780c:	031a031a 	.word	0x031a031a
 8007810:	031a031a 	.word	0x031a031a
 8007814:	031a031a 	.word	0x031a031a
 8007818:	031a031a 	.word	0x031a031a
 800781c:	00dd031a 	.word	0x00dd031a
 8007820:	031a00eb 	.word	0x031a00eb
 8007824:	031a031a 	.word	0x031a031a
 8007828:	031a031a 	.word	0x031a031a
 800782c:	031a031a 	.word	0x031a031a
 8007830:	031a031a 	.word	0x031a031a
 8007834:	013b031a 	.word	0x013b031a
 8007838:	031a031a 	.word	0x031a031a
 800783c:	0180031a 	.word	0x0180031a
 8007840:	025e031a 	.word	0x025e031a
 8007844:	031a031a 	.word	0x031a031a
 8007848:	031a027e 	.word	0x031a027e
 800784c:	031a031a 	.word	0x031a031a
 8007850:	031a031a 	.word	0x031a031a
 8007854:	031a031a 	.word	0x031a031a
 8007858:	031a031a 	.word	0x031a031a
 800785c:	00dd031a 	.word	0x00dd031a
 8007860:	031a00ed 	.word	0x031a00ed
 8007864:	031a031a 	.word	0x031a031a
 8007868:	00ed00c3 	.word	0x00ed00c3
 800786c:	031a00d7 	.word	0x031a00d7
 8007870:	031a00d0 	.word	0x031a00d0
 8007874:	013d0119 	.word	0x013d0119
 8007878:	00d70172 	.word	0x00d70172
 800787c:	0180031a 	.word	0x0180031a
 8007880:	0260007c 	.word	0x0260007c
 8007884:	031a031a 	.word	0x031a031a
 8007888:	031a029a 	.word	0x031a029a
 800788c:	007c      	.short	0x007c
 800788e:	aa0e      	add	r2, sp, #56	; 0x38
 8007890:	4639      	mov	r1, r7
 8007892:	4648      	mov	r0, r9
 8007894:	f7ff fed6 	bl	8007644 <__sprint_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	f040 8338 	bne.w	8007f0e <_vfiprintf_r+0x866>
 800789e:	ae11      	add	r6, sp, #68	; 0x44
 80078a0:	e77f      	b.n	80077a2 <_vfiprintf_r+0xfa>
 80078a2:	4648      	mov	r0, r9
 80078a4:	f7fe f9bc 	bl	8005c20 <_localeconv_r>
 80078a8:	6843      	ldr	r3, [r0, #4]
 80078aa:	4618      	mov	r0, r3
 80078ac:	ee08 3a10 	vmov	s16, r3
 80078b0:	f7f8 fce6 	bl	8000280 <strlen>
 80078b4:	9007      	str	r0, [sp, #28]
 80078b6:	4648      	mov	r0, r9
 80078b8:	f7fe f9b2 	bl	8005c20 <_localeconv_r>
 80078bc:	6883      	ldr	r3, [r0, #8]
 80078be:	9306      	str	r3, [sp, #24]
 80078c0:	9b07      	ldr	r3, [sp, #28]
 80078c2:	b12b      	cbz	r3, 80078d0 <_vfiprintf_r+0x228>
 80078c4:	9b06      	ldr	r3, [sp, #24]
 80078c6:	b11b      	cbz	r3, 80078d0 <_vfiprintf_r+0x228>
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	b10b      	cbz	r3, 80078d0 <_vfiprintf_r+0x228>
 80078cc:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80078d0:	9d01      	ldr	r5, [sp, #4]
 80078d2:	e776      	b.n	80077c2 <_vfiprintf_r+0x11a>
 80078d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f9      	bne.n	80078d0 <_vfiprintf_r+0x228>
 80078dc:	2320      	movs	r3, #32
 80078de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80078e2:	e7f5      	b.n	80078d0 <_vfiprintf_r+0x228>
 80078e4:	f04a 0a01 	orr.w	sl, sl, #1
 80078e8:	e7f2      	b.n	80078d0 <_vfiprintf_r+0x228>
 80078ea:	f854 3b04 	ldr.w	r3, [r4], #4
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	daed      	bge.n	80078d0 <_vfiprintf_r+0x228>
 80078f4:	425b      	negs	r3, r3
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	f04a 0a04 	orr.w	sl, sl, #4
 80078fc:	e7e8      	b.n	80078d0 <_vfiprintf_r+0x228>
 80078fe:	232b      	movs	r3, #43	; 0x2b
 8007900:	e7ed      	b.n	80078de <_vfiprintf_r+0x236>
 8007902:	9a01      	ldr	r2, [sp, #4]
 8007904:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007908:	2b2a      	cmp	r3, #42	; 0x2a
 800790a:	d112      	bne.n	8007932 <_vfiprintf_r+0x28a>
 800790c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007914:	e9cd 3200 	strd	r3, r2, [sp]
 8007918:	e7da      	b.n	80078d0 <_vfiprintf_r+0x228>
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	200a      	movs	r0, #10
 800791e:	fb00 1303 	mla	r3, r0, r3, r1
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007928:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800792c:	2909      	cmp	r1, #9
 800792e:	d9f4      	bls.n	800791a <_vfiprintf_r+0x272>
 8007930:	e74a      	b.n	80077c8 <_vfiprintf_r+0x120>
 8007932:	2100      	movs	r1, #0
 8007934:	9100      	str	r1, [sp, #0]
 8007936:	e7f7      	b.n	8007928 <_vfiprintf_r+0x280>
 8007938:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800793c:	e7c8      	b.n	80078d0 <_vfiprintf_r+0x228>
 800793e:	2100      	movs	r1, #0
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	9103      	str	r1, [sp, #12]
 8007944:	9903      	ldr	r1, [sp, #12]
 8007946:	3b30      	subs	r3, #48	; 0x30
 8007948:	200a      	movs	r0, #10
 800794a:	fb00 3301 	mla	r3, r0, r1, r3
 800794e:	9303      	str	r3, [sp, #12]
 8007950:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007954:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007958:	2909      	cmp	r1, #9
 800795a:	d9f3      	bls.n	8007944 <_vfiprintf_r+0x29c>
 800795c:	e734      	b.n	80077c8 <_vfiprintf_r+0x120>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b68      	cmp	r3, #104	; 0x68
 8007964:	bf01      	itttt	eq
 8007966:	9b01      	ldreq	r3, [sp, #4]
 8007968:	3301      	addeq	r3, #1
 800796a:	9301      	streq	r3, [sp, #4]
 800796c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8007970:	bf18      	it	ne
 8007972:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007976:	e7ab      	b.n	80078d0 <_vfiprintf_r+0x228>
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b6c      	cmp	r3, #108	; 0x6c
 800797e:	d105      	bne.n	800798c <_vfiprintf_r+0x2e4>
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	3301      	adds	r3, #1
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	f04a 0a20 	orr.w	sl, sl, #32
 800798a:	e7a1      	b.n	80078d0 <_vfiprintf_r+0x228>
 800798c:	f04a 0a10 	orr.w	sl, sl, #16
 8007990:	e79e      	b.n	80078d0 <_vfiprintf_r+0x228>
 8007992:	46a0      	mov	r8, r4
 8007994:	f858 3b04 	ldr.w	r3, [r8], #4
 8007998:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800799c:	2300      	movs	r3, #0
 800799e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80079a2:	2201      	movs	r2, #1
 80079a4:	9200      	str	r2, [sp, #0]
 80079a6:	461d      	mov	r5, r3
 80079a8:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 80079ac:	e0a9      	b.n	8007b02 <_vfiprintf_r+0x45a>
 80079ae:	f04a 0a10 	orr.w	sl, sl, #16
 80079b2:	f01a 0f20 	tst.w	sl, #32
 80079b6:	d011      	beq.n	80079dc <_vfiprintf_r+0x334>
 80079b8:	3407      	adds	r4, #7
 80079ba:	f024 0307 	bic.w	r3, r4, #7
 80079be:	4698      	mov	r8, r3
 80079c0:	685d      	ldr	r5, [r3, #4]
 80079c2:	f858 4b08 	ldr.w	r4, [r8], #8
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	da06      	bge.n	80079d8 <_vfiprintf_r+0x330>
 80079ca:	4264      	negs	r4, r4
 80079cc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80079d0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80079d4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80079d8:	2301      	movs	r3, #1
 80079da:	e04a      	b.n	8007a72 <_vfiprintf_r+0x3ca>
 80079dc:	46a0      	mov	r8, r4
 80079de:	f01a 0f10 	tst.w	sl, #16
 80079e2:	f858 5b04 	ldr.w	r5, [r8], #4
 80079e6:	d002      	beq.n	80079ee <_vfiprintf_r+0x346>
 80079e8:	462c      	mov	r4, r5
 80079ea:	17ed      	asrs	r5, r5, #31
 80079ec:	e7eb      	b.n	80079c6 <_vfiprintf_r+0x31e>
 80079ee:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80079f2:	d003      	beq.n	80079fc <_vfiprintf_r+0x354>
 80079f4:	b22c      	sxth	r4, r5
 80079f6:	f345 35c0 	sbfx	r5, r5, #15, #1
 80079fa:	e7e4      	b.n	80079c6 <_vfiprintf_r+0x31e>
 80079fc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007a00:	d0f2      	beq.n	80079e8 <_vfiprintf_r+0x340>
 8007a02:	b26c      	sxtb	r4, r5
 8007a04:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007a08:	e7dd      	b.n	80079c6 <_vfiprintf_r+0x31e>
 8007a0a:	f01a 0f20 	tst.w	sl, #32
 8007a0e:	f104 0804 	add.w	r8, r4, #4
 8007a12:	d007      	beq.n	8007a24 <_vfiprintf_r+0x37c>
 8007a14:	9a02      	ldr	r2, [sp, #8]
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	9902      	ldr	r1, [sp, #8]
 8007a1a:	17d2      	asrs	r2, r2, #31
 8007a1c:	e9c3 1200 	strd	r1, r2, [r3]
 8007a20:	4644      	mov	r4, r8
 8007a22:	e6a8      	b.n	8007776 <_vfiprintf_r+0xce>
 8007a24:	f01a 0f10 	tst.w	sl, #16
 8007a28:	d003      	beq.n	8007a32 <_vfiprintf_r+0x38a>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	9a02      	ldr	r2, [sp, #8]
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e7f6      	b.n	8007a20 <_vfiprintf_r+0x378>
 8007a32:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007a36:	d003      	beq.n	8007a40 <_vfiprintf_r+0x398>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	9a02      	ldr	r2, [sp, #8]
 8007a3c:	801a      	strh	r2, [r3, #0]
 8007a3e:	e7ef      	b.n	8007a20 <_vfiprintf_r+0x378>
 8007a40:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007a44:	d0f1      	beq.n	8007a2a <_vfiprintf_r+0x382>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	9a02      	ldr	r2, [sp, #8]
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e7e8      	b.n	8007a20 <_vfiprintf_r+0x378>
 8007a4e:	f04a 0a10 	orr.w	sl, sl, #16
 8007a52:	f01a 0320 	ands.w	r3, sl, #32
 8007a56:	d01f      	beq.n	8007a98 <_vfiprintf_r+0x3f0>
 8007a58:	3407      	adds	r4, #7
 8007a5a:	f024 0307 	bic.w	r3, r4, #7
 8007a5e:	4698      	mov	r8, r3
 8007a60:	685d      	ldr	r5, [r3, #4]
 8007a62:	f858 4b08 	ldr.w	r4, [r8], #8
 8007a66:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8007a72:	9a00      	ldr	r2, [sp, #0]
 8007a74:	3201      	adds	r2, #1
 8007a76:	f000 8278 	beq.w	8007f6a <_vfiprintf_r+0x8c2>
 8007a7a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8007a7e:	9204      	str	r2, [sp, #16]
 8007a80:	ea54 0205 	orrs.w	r2, r4, r5
 8007a84:	f040 8277 	bne.w	8007f76 <_vfiprintf_r+0x8ce>
 8007a88:	9a00      	ldr	r2, [sp, #0]
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	f000 81b3 	beq.w	8007df6 <_vfiprintf_r+0x74e>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	f040 8273 	bne.w	8007f7c <_vfiprintf_r+0x8d4>
 8007a96:	e151      	b.n	8007d3c <_vfiprintf_r+0x694>
 8007a98:	46a0      	mov	r8, r4
 8007a9a:	f01a 0510 	ands.w	r5, sl, #16
 8007a9e:	f858 4b04 	ldr.w	r4, [r8], #4
 8007aa2:	d001      	beq.n	8007aa8 <_vfiprintf_r+0x400>
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	e7de      	b.n	8007a66 <_vfiprintf_r+0x3be>
 8007aa8:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8007aac:	d001      	beq.n	8007ab2 <_vfiprintf_r+0x40a>
 8007aae:	b2a4      	uxth	r4, r4
 8007ab0:	e7d9      	b.n	8007a66 <_vfiprintf_r+0x3be>
 8007ab2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007ab6:	d0d6      	beq.n	8007a66 <_vfiprintf_r+0x3be>
 8007ab8:	b2e4      	uxtb	r4, r4
 8007aba:	e7f3      	b.n	8007aa4 <_vfiprintf_r+0x3fc>
 8007abc:	46a0      	mov	r8, r4
 8007abe:	f647 0330 	movw	r3, #30768	; 0x7830
 8007ac2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8007ac6:	f858 4b04 	ldr.w	r4, [r8], #4
 8007aca:	4b9f      	ldr	r3, [pc, #636]	; (8007d48 <_vfiprintf_r+0x6a0>)
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	2500      	movs	r5, #0
 8007ad0:	f04a 0a02 	orr.w	sl, sl, #2
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e7c9      	b.n	8007a6c <_vfiprintf_r+0x3c4>
 8007ad8:	9b00      	ldr	r3, [sp, #0]
 8007ada:	46a0      	mov	r8, r4
 8007adc:	2500      	movs	r5, #0
 8007ade:	1c5c      	adds	r4, r3, #1
 8007ae0:	f858 bb04 	ldr.w	fp, [r8], #4
 8007ae4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8007ae8:	f000 80cf 	beq.w	8007c8a <_vfiprintf_r+0x5e2>
 8007aec:	461a      	mov	r2, r3
 8007aee:	4629      	mov	r1, r5
 8007af0:	4658      	mov	r0, fp
 8007af2:	f7f8 fb75 	bl	80001e0 <memchr>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f000 8192 	beq.w	8007e20 <_vfiprintf_r+0x778>
 8007afc:	eba0 030b 	sub.w	r3, r0, fp
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	bfb8      	it	lt
 8007b0c:	462b      	movlt	r3, r5
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0x46e>
 8007b12:	3301      	adds	r3, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	f01a 0302 	ands.w	r3, sl, #2
 8007b1a:	9308      	str	r3, [sp, #32]
 8007b1c:	bf1e      	ittt	ne
 8007b1e:	9b04      	ldrne	r3, [sp, #16]
 8007b20:	3302      	addne	r3, #2
 8007b22:	9304      	strne	r3, [sp, #16]
 8007b24:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007b28:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2a:	d11f      	bne.n	8007b6c <_vfiprintf_r+0x4c4>
 8007b2c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007b30:	1a9c      	subs	r4, r3, r2
 8007b32:	2c00      	cmp	r4, #0
 8007b34:	dd1a      	ble.n	8007b6c <_vfiprintf_r+0x4c4>
 8007b36:	4b85      	ldr	r3, [pc, #532]	; (8007d4c <_vfiprintf_r+0x6a4>)
 8007b38:	6033      	str	r3, [r6, #0]
 8007b3a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8007b3e:	2c10      	cmp	r4, #16
 8007b40:	f102 0201 	add.w	r2, r2, #1
 8007b44:	f106 0008 	add.w	r0, r6, #8
 8007b48:	f300 816c 	bgt.w	8007e24 <_vfiprintf_r+0x77c>
 8007b4c:	6074      	str	r4, [r6, #4]
 8007b4e:	2a07      	cmp	r2, #7
 8007b50:	4464      	add	r4, ip
 8007b52:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8007b56:	f340 8178 	ble.w	8007e4a <_vfiprintf_r+0x7a2>
 8007b5a:	aa0e      	add	r2, sp, #56	; 0x38
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f7ff fd70 	bl	8007644 <__sprint_r>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f040 81d2 	bne.w	8007f0e <_vfiprintf_r+0x866>
 8007b6a:	ae11      	add	r6, sp, #68	; 0x44
 8007b6c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8007b70:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8007b74:	b160      	cbz	r0, 8007b90 <_vfiprintf_r+0x4e8>
 8007b76:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	6030      	str	r0, [r6, #0]
 8007b7e:	2001      	movs	r0, #1
 8007b80:	4401      	add	r1, r0
 8007b82:	2a07      	cmp	r2, #7
 8007b84:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007b88:	6070      	str	r0, [r6, #4]
 8007b8a:	f300 8160 	bgt.w	8007e4e <_vfiprintf_r+0x7a6>
 8007b8e:	3608      	adds	r6, #8
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8007b96:	b15b      	cbz	r3, 8007bb0 <_vfiprintf_r+0x508>
 8007b98:	a80d      	add	r0, sp, #52	; 0x34
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	2002      	movs	r0, #2
 8007ba0:	4401      	add	r1, r0
 8007ba2:	2a07      	cmp	r2, #7
 8007ba4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007ba8:	6070      	str	r0, [r6, #4]
 8007baa:	f300 8159 	bgt.w	8007e60 <_vfiprintf_r+0x7b8>
 8007bae:	3608      	adds	r6, #8
 8007bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb2:	2b80      	cmp	r3, #128	; 0x80
 8007bb4:	d11f      	bne.n	8007bf6 <_vfiprintf_r+0x54e>
 8007bb6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007bba:	1a9c      	subs	r4, r3, r2
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	dd1a      	ble.n	8007bf6 <_vfiprintf_r+0x54e>
 8007bc0:	4b63      	ldr	r3, [pc, #396]	; (8007d50 <_vfiprintf_r+0x6a8>)
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8007bc8:	2c10      	cmp	r4, #16
 8007bca:	f102 0201 	add.w	r2, r2, #1
 8007bce:	f106 0008 	add.w	r0, r6, #8
 8007bd2:	f300 814e 	bgt.w	8007e72 <_vfiprintf_r+0x7ca>
 8007bd6:	6074      	str	r4, [r6, #4]
 8007bd8:	2a07      	cmp	r2, #7
 8007bda:	4464      	add	r4, ip
 8007bdc:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8007be0:	f340 815a 	ble.w	8007e98 <_vfiprintf_r+0x7f0>
 8007be4:	aa0e      	add	r2, sp, #56	; 0x38
 8007be6:	4639      	mov	r1, r7
 8007be8:	4648      	mov	r0, r9
 8007bea:	f7ff fd2b 	bl	8007644 <__sprint_r>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 818d 	bne.w	8007f0e <_vfiprintf_r+0x866>
 8007bf4:	ae11      	add	r6, sp, #68	; 0x44
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	1aec      	subs	r4, r5, r3
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	dd1b      	ble.n	8007c36 <_vfiprintf_r+0x58e>
 8007bfe:	4d54      	ldr	r5, [pc, #336]	; (8007d50 <_vfiprintf_r+0x6a8>)
 8007c00:	2310      	movs	r3, #16
 8007c02:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8007c06:	2c10      	cmp	r4, #16
 8007c08:	f102 0201 	add.w	r2, r2, #1
 8007c0c:	f106 0008 	add.w	r0, r6, #8
 8007c10:	6035      	str	r5, [r6, #0]
 8007c12:	f300 8143 	bgt.w	8007e9c <_vfiprintf_r+0x7f4>
 8007c16:	6074      	str	r4, [r6, #4]
 8007c18:	2a07      	cmp	r2, #7
 8007c1a:	440c      	add	r4, r1
 8007c1c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8007c20:	f340 814d 	ble.w	8007ebe <_vfiprintf_r+0x816>
 8007c24:	aa0e      	add	r2, sp, #56	; 0x38
 8007c26:	4639      	mov	r1, r7
 8007c28:	4648      	mov	r0, r9
 8007c2a:	f7ff fd0b 	bl	8007644 <__sprint_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 816d 	bne.w	8007f0e <_vfiprintf_r+0x866>
 8007c34:	ae11      	add	r6, sp, #68	; 0x44
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	9a00      	ldr	r2, [sp, #0]
 8007c3a:	6073      	str	r3, [r6, #4]
 8007c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c3e:	f8c6 b000 	str.w	fp, [r6]
 8007c42:	4413      	add	r3, r2
 8007c44:	9310      	str	r3, [sp, #64]	; 0x40
 8007c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c48:	3301      	adds	r3, #1
 8007c4a:	2b07      	cmp	r3, #7
 8007c4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c4e:	f300 8138 	bgt.w	8007ec2 <_vfiprintf_r+0x81a>
 8007c52:	f106 0308 	add.w	r3, r6, #8
 8007c56:	f01a 0f04 	tst.w	sl, #4
 8007c5a:	f040 813a 	bne.w	8007ed2 <_vfiprintf_r+0x82a>
 8007c5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007c62:	9904      	ldr	r1, [sp, #16]
 8007c64:	428a      	cmp	r2, r1
 8007c66:	bfac      	ite	ge
 8007c68:	189b      	addge	r3, r3, r2
 8007c6a:	185b      	addlt	r3, r3, r1
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c70:	b13b      	cbz	r3, 8007c82 <_vfiprintf_r+0x5da>
 8007c72:	aa0e      	add	r2, sp, #56	; 0x38
 8007c74:	4639      	mov	r1, r7
 8007c76:	4648      	mov	r0, r9
 8007c78:	f7ff fce4 	bl	8007644 <__sprint_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	f040 8146 	bne.w	8007f0e <_vfiprintf_r+0x866>
 8007c82:	2300      	movs	r3, #0
 8007c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c86:	ae11      	add	r6, sp, #68	; 0x44
 8007c88:	e6ca      	b.n	8007a20 <_vfiprintf_r+0x378>
 8007c8a:	4658      	mov	r0, fp
 8007c8c:	f7f8 faf8 	bl	8000280 <strlen>
 8007c90:	9000      	str	r0, [sp, #0]
 8007c92:	e736      	b.n	8007b02 <_vfiprintf_r+0x45a>
 8007c94:	f04a 0a10 	orr.w	sl, sl, #16
 8007c98:	f01a 0320 	ands.w	r3, sl, #32
 8007c9c:	d008      	beq.n	8007cb0 <_vfiprintf_r+0x608>
 8007c9e:	3407      	adds	r4, #7
 8007ca0:	f024 0307 	bic.w	r3, r4, #7
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	685d      	ldr	r5, [r3, #4]
 8007ca8:	f858 4b08 	ldr.w	r4, [r8], #8
 8007cac:	2301      	movs	r3, #1
 8007cae:	e6dd      	b.n	8007a6c <_vfiprintf_r+0x3c4>
 8007cb0:	46a0      	mov	r8, r4
 8007cb2:	f01a 0510 	ands.w	r5, sl, #16
 8007cb6:	f858 4b04 	ldr.w	r4, [r8], #4
 8007cba:	d001      	beq.n	8007cc0 <_vfiprintf_r+0x618>
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	e7f5      	b.n	8007cac <_vfiprintf_r+0x604>
 8007cc0:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8007cc4:	d001      	beq.n	8007cca <_vfiprintf_r+0x622>
 8007cc6:	b2a4      	uxth	r4, r4
 8007cc8:	e7f0      	b.n	8007cac <_vfiprintf_r+0x604>
 8007cca:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007cce:	d0ed      	beq.n	8007cac <_vfiprintf_r+0x604>
 8007cd0:	b2e4      	uxtb	r4, r4
 8007cd2:	e7f3      	b.n	8007cbc <_vfiprintf_r+0x614>
 8007cd4:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <_vfiprintf_r+0x6ac>)
 8007cd6:	9205      	str	r2, [sp, #20]
 8007cd8:	f01a 0220 	ands.w	r2, sl, #32
 8007cdc:	d018      	beq.n	8007d10 <_vfiprintf_r+0x668>
 8007cde:	3407      	adds	r4, #7
 8007ce0:	f024 0207 	bic.w	r2, r4, #7
 8007ce4:	4690      	mov	r8, r2
 8007ce6:	6855      	ldr	r5, [r2, #4]
 8007ce8:	f858 4b08 	ldr.w	r4, [r8], #8
 8007cec:	f01a 0f01 	tst.w	sl, #1
 8007cf0:	d009      	beq.n	8007d06 <_vfiprintf_r+0x65e>
 8007cf2:	ea54 0205 	orrs.w	r2, r4, r5
 8007cf6:	bf1f      	itttt	ne
 8007cf8:	2230      	movne	r2, #48	; 0x30
 8007cfa:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8007cfe:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8007d02:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d06:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007d0a:	e6e3      	b.n	8007ad4 <_vfiprintf_r+0x42c>
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <_vfiprintf_r+0x6a0>)
 8007d0e:	e7e2      	b.n	8007cd6 <_vfiprintf_r+0x62e>
 8007d10:	46a0      	mov	r8, r4
 8007d12:	f01a 0510 	ands.w	r5, sl, #16
 8007d16:	f858 4b04 	ldr.w	r4, [r8], #4
 8007d1a:	d001      	beq.n	8007d20 <_vfiprintf_r+0x678>
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	e7e5      	b.n	8007cec <_vfiprintf_r+0x644>
 8007d20:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8007d24:	d001      	beq.n	8007d2a <_vfiprintf_r+0x682>
 8007d26:	b2a4      	uxth	r4, r4
 8007d28:	e7e0      	b.n	8007cec <_vfiprintf_r+0x644>
 8007d2a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007d2e:	d0dd      	beq.n	8007cec <_vfiprintf_r+0x644>
 8007d30:	b2e4      	uxtb	r4, r4
 8007d32:	e7f3      	b.n	8007d1c <_vfiprintf_r+0x674>
 8007d34:	2c0a      	cmp	r4, #10
 8007d36:	f175 0300 	sbcs.w	r3, r5, #0
 8007d3a:	d20d      	bcs.n	8007d58 <_vfiprintf_r+0x6b0>
 8007d3c:	3430      	adds	r4, #48	; 0x30
 8007d3e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 8007d42:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 8007d46:	e135      	b.n	8007fb4 <_vfiprintf_r+0x90c>
 8007d48:	0800a150 	.word	0x0800a150
 8007d4c:	0800a4ab 	.word	0x0800a4ab
 8007d50:	0800a4bb 	.word	0x0800a4bb
 8007d54:	0800a161 	.word	0x0800a161
 8007d58:	ab3a      	add	r3, sp, #232	; 0xe8
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f04f 0a00 	mov.w	sl, #0
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	220a      	movs	r2, #10
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 ff72 	bl	8000c58 <__aeabi_uldivmod>
 8007d74:	9b08      	ldr	r3, [sp, #32]
 8007d76:	3230      	adds	r2, #48	; 0x30
 8007d78:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d7c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d86:	f10a 0a01 	add.w	sl, sl, #1
 8007d8a:	b1d3      	cbz	r3, 8007dc2 <_vfiprintf_r+0x71a>
 8007d8c:	9b06      	ldr	r3, [sp, #24]
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	4552      	cmp	r2, sl
 8007d92:	d116      	bne.n	8007dc2 <_vfiprintf_r+0x71a>
 8007d94:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007d98:	d013      	beq.n	8007dc2 <_vfiprintf_r+0x71a>
 8007d9a:	2c0a      	cmp	r4, #10
 8007d9c:	f175 0200 	sbcs.w	r2, r5, #0
 8007da0:	d30f      	bcc.n	8007dc2 <_vfiprintf_r+0x71a>
 8007da2:	9b07      	ldr	r3, [sp, #28]
 8007da4:	ebab 0b03 	sub.w	fp, fp, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	ee18 1a10 	vmov	r1, s16
 8007dae:	4658      	mov	r0, fp
 8007db0:	f7fd ff23 	bl	8005bfa <strncpy>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	785a      	ldrb	r2, [r3, #1]
 8007db8:	b16a      	cbz	r2, 8007dd6 <_vfiprintf_r+0x72e>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	f04f 0a00 	mov.w	sl, #0
 8007dc2:	2c0a      	cmp	r4, #10
 8007dc4:	f175 0500 	sbcs.w	r5, r5, #0
 8007dc8:	f0c0 80f4 	bcc.w	8007fb4 <_vfiprintf_r+0x90c>
 8007dcc:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8007dd0:	f8cd b020 	str.w	fp, [sp, #32]
 8007dd4:	e7c8      	b.n	8007d68 <_vfiprintf_r+0x6c0>
 8007dd6:	4692      	mov	sl, r2
 8007dd8:	e7f3      	b.n	8007dc2 <_vfiprintf_r+0x71a>
 8007dda:	f004 020f 	and.w	r2, r4, #15
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	0924      	lsrs	r4, r4, #4
 8007de2:	5c9a      	ldrb	r2, [r3, r2]
 8007de4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8007de8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007dec:	092d      	lsrs	r5, r5, #4
 8007dee:	ea54 0205 	orrs.w	r2, r4, r5
 8007df2:	d1f2      	bne.n	8007dda <_vfiprintf_r+0x732>
 8007df4:	e0de      	b.n	8007fb4 <_vfiprintf_r+0x90c>
 8007df6:	b933      	cbnz	r3, 8007e06 <_vfiprintf_r+0x75e>
 8007df8:	f01a 0f01 	tst.w	sl, #1
 8007dfc:	d003      	beq.n	8007e06 <_vfiprintf_r+0x75e>
 8007dfe:	2330      	movs	r3, #48	; 0x30
 8007e00:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8007e04:	e79d      	b.n	8007d42 <_vfiprintf_r+0x69a>
 8007e06:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8007e0a:	e0d3      	b.n	8007fb4 <_vfiprintf_r+0x90c>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 809f 	beq.w	8007f50 <_vfiprintf_r+0x8a8>
 8007e12:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007e16:	2300      	movs	r3, #0
 8007e18:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8007e1c:	46a0      	mov	r8, r4
 8007e1e:	e5c0      	b.n	80079a2 <_vfiprintf_r+0x2fa>
 8007e20:	4605      	mov	r5, r0
 8007e22:	e66e      	b.n	8007b02 <_vfiprintf_r+0x45a>
 8007e24:	2110      	movs	r1, #16
 8007e26:	6071      	str	r1, [r6, #4]
 8007e28:	2a07      	cmp	r2, #7
 8007e2a:	4461      	add	r1, ip
 8007e2c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007e30:	dd08      	ble.n	8007e44 <_vfiprintf_r+0x79c>
 8007e32:	aa0e      	add	r2, sp, #56	; 0x38
 8007e34:	4639      	mov	r1, r7
 8007e36:	4648      	mov	r0, r9
 8007e38:	f7ff fc04 	bl	8007644 <__sprint_r>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d166      	bne.n	8007f0e <_vfiprintf_r+0x866>
 8007e40:	4b60      	ldr	r3, [pc, #384]	; (8007fc4 <_vfiprintf_r+0x91c>)
 8007e42:	a811      	add	r0, sp, #68	; 0x44
 8007e44:	3c10      	subs	r4, #16
 8007e46:	4606      	mov	r6, r0
 8007e48:	e676      	b.n	8007b38 <_vfiprintf_r+0x490>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	e68e      	b.n	8007b6c <_vfiprintf_r+0x4c4>
 8007e4e:	aa0e      	add	r2, sp, #56	; 0x38
 8007e50:	4639      	mov	r1, r7
 8007e52:	4648      	mov	r0, r9
 8007e54:	f7ff fbf6 	bl	8007644 <__sprint_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d158      	bne.n	8007f0e <_vfiprintf_r+0x866>
 8007e5c:	ae11      	add	r6, sp, #68	; 0x44
 8007e5e:	e697      	b.n	8007b90 <_vfiprintf_r+0x4e8>
 8007e60:	aa0e      	add	r2, sp, #56	; 0x38
 8007e62:	4639      	mov	r1, r7
 8007e64:	4648      	mov	r0, r9
 8007e66:	f7ff fbed 	bl	8007644 <__sprint_r>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d14f      	bne.n	8007f0e <_vfiprintf_r+0x866>
 8007e6e:	ae11      	add	r6, sp, #68	; 0x44
 8007e70:	e69e      	b.n	8007bb0 <_vfiprintf_r+0x508>
 8007e72:	2110      	movs	r1, #16
 8007e74:	6071      	str	r1, [r6, #4]
 8007e76:	2a07      	cmp	r2, #7
 8007e78:	4461      	add	r1, ip
 8007e7a:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007e7e:	dd08      	ble.n	8007e92 <_vfiprintf_r+0x7ea>
 8007e80:	aa0e      	add	r2, sp, #56	; 0x38
 8007e82:	4639      	mov	r1, r7
 8007e84:	4648      	mov	r0, r9
 8007e86:	f7ff fbdd 	bl	8007644 <__sprint_r>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d13f      	bne.n	8007f0e <_vfiprintf_r+0x866>
 8007e8e:	4b4e      	ldr	r3, [pc, #312]	; (8007fc8 <_vfiprintf_r+0x920>)
 8007e90:	a811      	add	r0, sp, #68	; 0x44
 8007e92:	3c10      	subs	r4, #16
 8007e94:	4606      	mov	r6, r0
 8007e96:	e694      	b.n	8007bc2 <_vfiprintf_r+0x51a>
 8007e98:	4606      	mov	r6, r0
 8007e9a:	e6ac      	b.n	8007bf6 <_vfiprintf_r+0x54e>
 8007e9c:	3110      	adds	r1, #16
 8007e9e:	2a07      	cmp	r2, #7
 8007ea0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007ea4:	6073      	str	r3, [r6, #4]
 8007ea6:	dd07      	ble.n	8007eb8 <_vfiprintf_r+0x810>
 8007ea8:	aa0e      	add	r2, sp, #56	; 0x38
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4648      	mov	r0, r9
 8007eae:	f7ff fbc9 	bl	8007644 <__sprint_r>
 8007eb2:	bb60      	cbnz	r0, 8007f0e <_vfiprintf_r+0x866>
 8007eb4:	a811      	add	r0, sp, #68	; 0x44
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	3c10      	subs	r4, #16
 8007eba:	4606      	mov	r6, r0
 8007ebc:	e6a1      	b.n	8007c02 <_vfiprintf_r+0x55a>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	e6b9      	b.n	8007c36 <_vfiprintf_r+0x58e>
 8007ec2:	aa0e      	add	r2, sp, #56	; 0x38
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	f7ff fbbc 	bl	8007644 <__sprint_r>
 8007ecc:	b9f8      	cbnz	r0, 8007f0e <_vfiprintf_r+0x866>
 8007ece:	ab11      	add	r3, sp, #68	; 0x44
 8007ed0:	e6c1      	b.n	8007c56 <_vfiprintf_r+0x5ae>
 8007ed2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8007ed6:	1a54      	subs	r4, r2, r1
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	f77f aec0 	ble.w	8007c5e <_vfiprintf_r+0x5b6>
 8007ede:	4d39      	ldr	r5, [pc, #228]	; (8007fc4 <_vfiprintf_r+0x91c>)
 8007ee0:	2610      	movs	r6, #16
 8007ee2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8007ee6:	2c10      	cmp	r4, #16
 8007ee8:	f102 0201 	add.w	r2, r2, #1
 8007eec:	601d      	str	r5, [r3, #0]
 8007eee:	dc1d      	bgt.n	8007f2c <_vfiprintf_r+0x884>
 8007ef0:	605c      	str	r4, [r3, #4]
 8007ef2:	2a07      	cmp	r2, #7
 8007ef4:	440c      	add	r4, r1
 8007ef6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8007efa:	f77f aeb0 	ble.w	8007c5e <_vfiprintf_r+0x5b6>
 8007efe:	aa0e      	add	r2, sp, #56	; 0x38
 8007f00:	4639      	mov	r1, r7
 8007f02:	4648      	mov	r0, r9
 8007f04:	f7ff fb9e 	bl	8007644 <__sprint_r>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f aea8 	beq.w	8007c5e <_vfiprintf_r+0x5b6>
 8007f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f10:	07d9      	lsls	r1, r3, #31
 8007f12:	d405      	bmi.n	8007f20 <_vfiprintf_r+0x878>
 8007f14:	89bb      	ldrh	r3, [r7, #12]
 8007f16:	059a      	lsls	r2, r3, #22
 8007f18:	d402      	bmi.n	8007f20 <_vfiprintf_r+0x878>
 8007f1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f1c:	f7fc f809 	bl	8003f32 <__retarget_lock_release_recursive>
 8007f20:	89bb      	ldrh	r3, [r7, #12]
 8007f22:	065b      	lsls	r3, r3, #25
 8007f24:	f57f abf3 	bpl.w	800770e <_vfiprintf_r+0x66>
 8007f28:	f7ff bbee 	b.w	8007708 <_vfiprintf_r+0x60>
 8007f2c:	3110      	adds	r1, #16
 8007f2e:	2a07      	cmp	r2, #7
 8007f30:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007f34:	605e      	str	r6, [r3, #4]
 8007f36:	dc02      	bgt.n	8007f3e <_vfiprintf_r+0x896>
 8007f38:	3308      	adds	r3, #8
 8007f3a:	3c10      	subs	r4, #16
 8007f3c:	e7d1      	b.n	8007ee2 <_vfiprintf_r+0x83a>
 8007f3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007f40:	4639      	mov	r1, r7
 8007f42:	4648      	mov	r0, r9
 8007f44:	f7ff fb7e 	bl	8007644 <__sprint_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1e0      	bne.n	8007f0e <_vfiprintf_r+0x866>
 8007f4c:	ab11      	add	r3, sp, #68	; 0x44
 8007f4e:	e7f4      	b.n	8007f3a <_vfiprintf_r+0x892>
 8007f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f52:	b913      	cbnz	r3, 8007f5a <_vfiprintf_r+0x8b2>
 8007f54:	2300      	movs	r3, #0
 8007f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f58:	e7d9      	b.n	8007f0e <_vfiprintf_r+0x866>
 8007f5a:	aa0e      	add	r2, sp, #56	; 0x38
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f7ff fb70 	bl	8007644 <__sprint_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d0f5      	beq.n	8007f54 <_vfiprintf_r+0x8ac>
 8007f68:	e7d1      	b.n	8007f0e <_vfiprintf_r+0x866>
 8007f6a:	ea54 0205 	orrs.w	r2, r4, r5
 8007f6e:	f8cd a010 	str.w	sl, [sp, #16]
 8007f72:	f43f ad8d 	beq.w	8007a90 <_vfiprintf_r+0x3e8>
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	f43f aedc 	beq.w	8007d34 <_vfiprintf_r+0x68c>
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8007f82:	f43f af2a 	beq.w	8007dda <_vfiprintf_r+0x732>
 8007f86:	f004 0207 	and.w	r2, r4, #7
 8007f8a:	08e4      	lsrs	r4, r4, #3
 8007f8c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8007f90:	08ed      	lsrs	r5, r5, #3
 8007f92:	3230      	adds	r2, #48	; 0x30
 8007f94:	ea54 0005 	orrs.w	r0, r4, r5
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8007f9e:	d1f2      	bne.n	8007f86 <_vfiprintf_r+0x8de>
 8007fa0:	9b04      	ldr	r3, [sp, #16]
 8007fa2:	07d8      	lsls	r0, r3, #31
 8007fa4:	d506      	bpl.n	8007fb4 <_vfiprintf_r+0x90c>
 8007fa6:	2a30      	cmp	r2, #48	; 0x30
 8007fa8:	d004      	beq.n	8007fb4 <_vfiprintf_r+0x90c>
 8007faa:	2230      	movs	r2, #48	; 0x30
 8007fac:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007fb0:	f1a1 0b02 	sub.w	fp, r1, #2
 8007fb4:	ab3a      	add	r3, sp, #232	; 0xe8
 8007fb6:	eba3 030b 	sub.w	r3, r3, fp
 8007fba:	9d00      	ldr	r5, [sp, #0]
 8007fbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	e59e      	b.n	8007b02 <_vfiprintf_r+0x45a>
 8007fc4:	0800a4ab 	.word	0x0800a4ab
 8007fc8:	0800a4bb 	.word	0x0800a4bb

08007fcc <__sbprintf>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	460c      	mov	r4, r1
 8007fd0:	8989      	ldrh	r1, [r1, #12]
 8007fd2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8007fd6:	f021 0102 	bic.w	r1, r1, #2
 8007fda:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007fde:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007fe0:	911b      	str	r1, [sp, #108]	; 0x6c
 8007fe2:	89e1      	ldrh	r1, [r4, #14]
 8007fe4:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007fe8:	69e1      	ldr	r1, [r4, #28]
 8007fea:	9109      	str	r1, [sp, #36]	; 0x24
 8007fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fee:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ff0:	a91c      	add	r1, sp, #112	; 0x70
 8007ff2:	9102      	str	r1, [sp, #8]
 8007ff4:	9106      	str	r1, [sp, #24]
 8007ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	9104      	str	r1, [sp, #16]
 8007ffe:	9107      	str	r1, [sp, #28]
 8008000:	a818      	add	r0, sp, #96	; 0x60
 8008002:	2100      	movs	r1, #0
 8008004:	e9cd 3200 	strd	r3, r2, [sp]
 8008008:	9108      	str	r1, [sp, #32]
 800800a:	f7fb ff8f 	bl	8003f2c <__retarget_lock_init_recursive>
 800800e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008012:	a902      	add	r1, sp, #8
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff fb47 	bl	80076a8 <_vfiprintf_r>
 800801a:	1e05      	subs	r5, r0, #0
 800801c:	db07      	blt.n	800802e <__sbprintf+0x62>
 800801e:	a902      	add	r1, sp, #8
 8008020:	4630      	mov	r0, r6
 8008022:	f7fd fdc5 	bl	8005bb0 <_fflush_r>
 8008026:	2800      	cmp	r0, #0
 8008028:	bf18      	it	ne
 800802a:	f04f 35ff 	movne.w	r5, #4294967295
 800802e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008032:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008034:	065b      	lsls	r3, r3, #25
 8008036:	bf42      	ittt	mi
 8008038:	89a3      	ldrhmi	r3, [r4, #12]
 800803a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strhmi	r3, [r4, #12]
 8008040:	f7fb ff75 	bl	8003f2e <__retarget_lock_close_recursive>
 8008044:	4628      	mov	r0, r5
 8008046:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800804a:	bd70      	pop	{r4, r5, r6, pc}

0800804c <__sfvwrite_r>:
 800804c:	6893      	ldr	r3, [r2, #8]
 800804e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008052:	4606      	mov	r6, r0
 8008054:	460c      	mov	r4, r1
 8008056:	4691      	mov	r9, r2
 8008058:	b91b      	cbnz	r3, 8008062 <__sfvwrite_r+0x16>
 800805a:	2000      	movs	r0, #0
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008062:	898b      	ldrh	r3, [r1, #12]
 8008064:	0718      	lsls	r0, r3, #28
 8008066:	d54f      	bpl.n	8008108 <__sfvwrite_r+0xbc>
 8008068:	690b      	ldr	r3, [r1, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04c      	beq.n	8008108 <__sfvwrite_r+0xbc>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f8d9 8000 	ldr.w	r8, [r9]
 8008074:	f013 0702 	ands.w	r7, r3, #2
 8008078:	d16b      	bne.n	8008152 <__sfvwrite_r+0x106>
 800807a:	f013 0301 	ands.w	r3, r3, #1
 800807e:	f000 809b 	beq.w	80081b8 <__sfvwrite_r+0x16c>
 8008082:	4638      	mov	r0, r7
 8008084:	46ba      	mov	sl, r7
 8008086:	46bb      	mov	fp, r7
 8008088:	f1bb 0f00 	cmp.w	fp, #0
 800808c:	f000 8102 	beq.w	8008294 <__sfvwrite_r+0x248>
 8008090:	b950      	cbnz	r0, 80080a8 <__sfvwrite_r+0x5c>
 8008092:	465a      	mov	r2, fp
 8008094:	210a      	movs	r1, #10
 8008096:	4650      	mov	r0, sl
 8008098:	f7f8 f8a2 	bl	80001e0 <memchr>
 800809c:	2800      	cmp	r0, #0
 800809e:	f000 80ff 	beq.w	80082a0 <__sfvwrite_r+0x254>
 80080a2:	3001      	adds	r0, #1
 80080a4:	eba0 070a 	sub.w	r7, r0, sl
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	6921      	ldr	r1, [r4, #16]
 80080ac:	68a5      	ldr	r5, [r4, #8]
 80080ae:	6963      	ldr	r3, [r4, #20]
 80080b0:	455f      	cmp	r7, fp
 80080b2:	463a      	mov	r2, r7
 80080b4:	bf28      	it	cs
 80080b6:	465a      	movcs	r2, fp
 80080b8:	4288      	cmp	r0, r1
 80080ba:	f240 80f4 	bls.w	80082a6 <__sfvwrite_r+0x25a>
 80080be:	441d      	add	r5, r3
 80080c0:	42aa      	cmp	r2, r5
 80080c2:	f340 80f0 	ble.w	80082a6 <__sfvwrite_r+0x25a>
 80080c6:	4651      	mov	r1, sl
 80080c8:	462a      	mov	r2, r5
 80080ca:	f7ff f85e 	bl	800718a <memmove>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	442b      	add	r3, r5
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	4621      	mov	r1, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7fd fd6a 	bl	8005bb0 <_fflush_r>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d166      	bne.n	80081ae <__sfvwrite_r+0x162>
 80080e0:	1b7f      	subs	r7, r7, r5
 80080e2:	f040 80f8 	bne.w	80082d6 <__sfvwrite_r+0x28a>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4630      	mov	r0, r6
 80080ea:	f7fd fd61 	bl	8005bb0 <_fflush_r>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d15d      	bne.n	80081ae <__sfvwrite_r+0x162>
 80080f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80080f6:	1b5b      	subs	r3, r3, r5
 80080f8:	44aa      	add	sl, r5
 80080fa:	ebab 0b05 	sub.w	fp, fp, r5
 80080fe:	f8c9 3008 	str.w	r3, [r9, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1c0      	bne.n	8008088 <__sfvwrite_r+0x3c>
 8008106:	e7a8      	b.n	800805a <__sfvwrite_r+0xe>
 8008108:	4621      	mov	r1, r4
 800810a:	4630      	mov	r0, r6
 800810c:	f000 f8e8 	bl	80082e0 <__swsetup_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0ac      	beq.n	800806e <__sfvwrite_r+0x22>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e7a0      	b.n	800805c <__sfvwrite_r+0x10>
 800811a:	e9d8 a500 	ldrd	sl, r5, [r8]
 800811e:	f108 0808 	add.w	r8, r8, #8
 8008122:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008126:	69e1      	ldr	r1, [r4, #28]
 8008128:	2d00      	cmp	r5, #0
 800812a:	d0f6      	beq.n	800811a <__sfvwrite_r+0xce>
 800812c:	42bd      	cmp	r5, r7
 800812e:	462b      	mov	r3, r5
 8008130:	4652      	mov	r2, sl
 8008132:	bf28      	it	cs
 8008134:	463b      	movcs	r3, r7
 8008136:	4630      	mov	r0, r6
 8008138:	47d8      	blx	fp
 800813a:	2800      	cmp	r0, #0
 800813c:	dd37      	ble.n	80081ae <__sfvwrite_r+0x162>
 800813e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008142:	1a1b      	subs	r3, r3, r0
 8008144:	4482      	add	sl, r0
 8008146:	1a2d      	subs	r5, r5, r0
 8008148:	f8c9 3008 	str.w	r3, [r9, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e8      	bne.n	8008122 <__sfvwrite_r+0xd6>
 8008150:	e783      	b.n	800805a <__sfvwrite_r+0xe>
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	4f61      	ldr	r7, [pc, #388]	; (80082dc <__sfvwrite_r+0x290>)
 8008158:	4655      	mov	r5, sl
 800815a:	e7e2      	b.n	8008122 <__sfvwrite_r+0xd6>
 800815c:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8008160:	f108 0808 	add.w	r8, r8, #8
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	68a2      	ldr	r2, [r4, #8]
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	d0f6      	beq.n	800815c <__sfvwrite_r+0x110>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	0599      	lsls	r1, r3, #22
 8008172:	d563      	bpl.n	800823c <__sfvwrite_r+0x1f0>
 8008174:	4552      	cmp	r2, sl
 8008176:	d836      	bhi.n	80081e6 <__sfvwrite_r+0x19a>
 8008178:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800817c:	d033      	beq.n	80081e6 <__sfvwrite_r+0x19a>
 800817e:	6921      	ldr	r1, [r4, #16]
 8008180:	6965      	ldr	r5, [r4, #20]
 8008182:	eba0 0b01 	sub.w	fp, r0, r1
 8008186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800818a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800818e:	f10b 0201 	add.w	r2, fp, #1
 8008192:	106d      	asrs	r5, r5, #1
 8008194:	4452      	add	r2, sl
 8008196:	4295      	cmp	r5, r2
 8008198:	bf38      	it	cc
 800819a:	4615      	movcc	r5, r2
 800819c:	055b      	lsls	r3, r3, #21
 800819e:	d53d      	bpl.n	800821c <__sfvwrite_r+0x1d0>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7fb ffea 	bl	800417c <_malloc_r>
 80081a8:	b948      	cbnz	r0, 80081be <__sfvwrite_r+0x172>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	e7ad      	b.n	8008114 <__sfvwrite_r+0xc8>
 80081b8:	461f      	mov	r7, r3
 80081ba:	469a      	mov	sl, r3
 80081bc:	e7d2      	b.n	8008164 <__sfvwrite_r+0x118>
 80081be:	465a      	mov	r2, fp
 80081c0:	6921      	ldr	r1, [r4, #16]
 80081c2:	9001      	str	r0, [sp, #4]
 80081c4:	f7ff f802 	bl	80071cc <memcpy>
 80081c8:	89a2      	ldrh	r2, [r4, #12]
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80081d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081d4:	81a2      	strh	r2, [r4, #12]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	6165      	str	r5, [r4, #20]
 80081da:	445b      	add	r3, fp
 80081dc:	eba5 050b 	sub.w	r5, r5, fp
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	4652      	mov	r2, sl
 80081e4:	60a5      	str	r5, [r4, #8]
 80081e6:	4552      	cmp	r2, sl
 80081e8:	bf28      	it	cs
 80081ea:	4652      	movcs	r2, sl
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7fe ffca 	bl	800718a <memmove>
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	4413      	add	r3, r2
 8008202:	4655      	mov	r5, sl
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800820a:	1b5b      	subs	r3, r3, r5
 800820c:	442f      	add	r7, r5
 800820e:	ebaa 0a05 	sub.w	sl, sl, r5
 8008212:	f8c9 3008 	str.w	r3, [r9, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1a4      	bne.n	8008164 <__sfvwrite_r+0x118>
 800821a:	e71e      	b.n	800805a <__sfvwrite_r+0xe>
 800821c:	462a      	mov	r2, r5
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff f848 	bl	80072b4 <_realloc_r>
 8008224:	4603      	mov	r3, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d1d5      	bne.n	80081d6 <__sfvwrite_r+0x18a>
 800822a:	6921      	ldr	r1, [r4, #16]
 800822c:	4630      	mov	r0, r6
 800822e:	f7fb fee5 	bl	8003ffc <_free_r>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	e7b6      	b.n	80081aa <__sfvwrite_r+0x15e>
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	4283      	cmp	r3, r0
 8008240:	d302      	bcc.n	8008248 <__sfvwrite_r+0x1fc>
 8008242:	6961      	ldr	r1, [r4, #20]
 8008244:	4551      	cmp	r1, sl
 8008246:	d915      	bls.n	8008274 <__sfvwrite_r+0x228>
 8008248:	4552      	cmp	r2, sl
 800824a:	bf28      	it	cs
 800824c:	4652      	movcs	r2, sl
 800824e:	4639      	mov	r1, r7
 8008250:	4615      	mov	r5, r2
 8008252:	f7fe ff9a 	bl	800718a <memmove>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	1b5b      	subs	r3, r3, r5
 800825c:	442a      	add	r2, r5
 800825e:	60a3      	str	r3, [r4, #8]
 8008260:	6022      	str	r2, [r4, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1cf      	bne.n	8008206 <__sfvwrite_r+0x1ba>
 8008266:	4621      	mov	r1, r4
 8008268:	4630      	mov	r0, r6
 800826a:	f7fd fca1 	bl	8005bb0 <_fflush_r>
 800826e:	2800      	cmp	r0, #0
 8008270:	d0c9      	beq.n	8008206 <__sfvwrite_r+0x1ba>
 8008272:	e79c      	b.n	80081ae <__sfvwrite_r+0x162>
 8008274:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008278:	459a      	cmp	sl, r3
 800827a:	bf38      	it	cc
 800827c:	4653      	movcc	r3, sl
 800827e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008280:	fb93 f3f1 	sdiv	r3, r3, r1
 8008284:	463a      	mov	r2, r7
 8008286:	434b      	muls	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	69e1      	ldr	r1, [r4, #28]
 800828c:	47a8      	blx	r5
 800828e:	1e05      	subs	r5, r0, #0
 8008290:	dcb9      	bgt.n	8008206 <__sfvwrite_r+0x1ba>
 8008292:	e78c      	b.n	80081ae <__sfvwrite_r+0x162>
 8008294:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8008298:	2000      	movs	r0, #0
 800829a:	f108 0808 	add.w	r8, r8, #8
 800829e:	e6f3      	b.n	8008088 <__sfvwrite_r+0x3c>
 80082a0:	f10b 0701 	add.w	r7, fp, #1
 80082a4:	e700      	b.n	80080a8 <__sfvwrite_r+0x5c>
 80082a6:	4293      	cmp	r3, r2
 80082a8:	dc08      	bgt.n	80082bc <__sfvwrite_r+0x270>
 80082aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082ac:	69e1      	ldr	r1, [r4, #28]
 80082ae:	4652      	mov	r2, sl
 80082b0:	4630      	mov	r0, r6
 80082b2:	47a8      	blx	r5
 80082b4:	1e05      	subs	r5, r0, #0
 80082b6:	f73f af13 	bgt.w	80080e0 <__sfvwrite_r+0x94>
 80082ba:	e778      	b.n	80081ae <__sfvwrite_r+0x162>
 80082bc:	4651      	mov	r1, sl
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	f7fe ff63 	bl	800718a <memmove>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	60a3      	str	r3, [r4, #8]
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	4413      	add	r3, r2
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	4615      	mov	r5, r2
 80082d4:	e704      	b.n	80080e0 <__sfvwrite_r+0x94>
 80082d6:	2001      	movs	r0, #1
 80082d8:	e70b      	b.n	80080f2 <__sfvwrite_r+0xa6>
 80082da:	bf00      	nop
 80082dc:	7ffffc00 	.word	0x7ffffc00

080082e0 <__swsetup_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4b2a      	ldr	r3, [pc, #168]	; (800838c <__swsetup_r+0xac>)
 80082e4:	4605      	mov	r5, r0
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	460c      	mov	r4, r1
 80082ea:	b118      	cbz	r0, 80082f4 <__swsetup_r+0x14>
 80082ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082ee:	b90b      	cbnz	r3, 80082f4 <__swsetup_r+0x14>
 80082f0:	f7fb fcf6 	bl	8003ce0 <__sinit>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082fa:	0718      	lsls	r0, r3, #28
 80082fc:	d422      	bmi.n	8008344 <__swsetup_r+0x64>
 80082fe:	06d9      	lsls	r1, r3, #27
 8008300:	d407      	bmi.n	8008312 <__swsetup_r+0x32>
 8008302:	2309      	movs	r3, #9
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e034      	b.n	800837c <__swsetup_r+0x9c>
 8008312:	0758      	lsls	r0, r3, #29
 8008314:	d512      	bpl.n	800833c <__swsetup_r+0x5c>
 8008316:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008318:	b141      	cbz	r1, 800832c <__swsetup_r+0x4c>
 800831a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800831e:	4299      	cmp	r1, r3
 8008320:	d002      	beq.n	8008328 <__swsetup_r+0x48>
 8008322:	4628      	mov	r0, r5
 8008324:	f7fb fe6a 	bl	8003ffc <_free_r>
 8008328:	2300      	movs	r3, #0
 800832a:	6323      	str	r3, [r4, #48]	; 0x30
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	2300      	movs	r3, #0
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f043 0308 	orr.w	r3, r3, #8
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b94b      	cbnz	r3, 800835c <__swsetup_r+0x7c>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800834e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008352:	d003      	beq.n	800835c <__swsetup_r+0x7c>
 8008354:	4621      	mov	r1, r4
 8008356:	4628      	mov	r0, r5
 8008358:	f000 f8ca 	bl	80084f0 <__smakebuf_r>
 800835c:	89a0      	ldrh	r0, [r4, #12]
 800835e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008362:	f010 0301 	ands.w	r3, r0, #1
 8008366:	d00a      	beq.n	800837e <__swsetup_r+0x9e>
 8008368:	2300      	movs	r3, #0
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	6963      	ldr	r3, [r4, #20]
 800836e:	425b      	negs	r3, r3
 8008370:	61a3      	str	r3, [r4, #24]
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	b943      	cbnz	r3, 8008388 <__swsetup_r+0xa8>
 8008376:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800837a:	d1c4      	bne.n	8008306 <__swsetup_r+0x26>
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	0781      	lsls	r1, r0, #30
 8008380:	bf58      	it	pl
 8008382:	6963      	ldrpl	r3, [r4, #20]
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	e7f4      	b.n	8008372 <__swsetup_r+0x92>
 8008388:	2000      	movs	r0, #0
 800838a:	e7f7      	b.n	800837c <__swsetup_r+0x9c>
 800838c:	20000140 	.word	0x20000140

08008390 <__fputwc>:
 8008390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4680      	mov	r8, r0
 8008396:	460e      	mov	r6, r1
 8008398:	4615      	mov	r5, r2
 800839a:	f7fe ff11 	bl	80071c0 <__locale_mb_cur_max>
 800839e:	2801      	cmp	r0, #1
 80083a0:	d11c      	bne.n	80083dc <__fputwc+0x4c>
 80083a2:	1e73      	subs	r3, r6, #1
 80083a4:	2bfe      	cmp	r3, #254	; 0xfe
 80083a6:	d819      	bhi.n	80083dc <__fputwc+0x4c>
 80083a8:	f88d 6004 	strb.w	r6, [sp, #4]
 80083ac:	4604      	mov	r4, r0
 80083ae:	2700      	movs	r7, #0
 80083b0:	f10d 0904 	add.w	r9, sp, #4
 80083b4:	42a7      	cmp	r7, r4
 80083b6:	d020      	beq.n	80083fa <__fputwc+0x6a>
 80083b8:	68ab      	ldr	r3, [r5, #8]
 80083ba:	f817 1009 	ldrb.w	r1, [r7, r9]
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	60ab      	str	r3, [r5, #8]
 80083c4:	da04      	bge.n	80083d0 <__fputwc+0x40>
 80083c6:	69aa      	ldr	r2, [r5, #24]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	db1a      	blt.n	8008402 <__fputwc+0x72>
 80083cc:	290a      	cmp	r1, #10
 80083ce:	d018      	beq.n	8008402 <__fputwc+0x72>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	7019      	strb	r1, [r3, #0]
 80083d8:	3701      	adds	r7, #1
 80083da:	e7eb      	b.n	80083b4 <__fputwc+0x24>
 80083dc:	a901      	add	r1, sp, #4
 80083de:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80083e2:	4632      	mov	r2, r6
 80083e4:	4640      	mov	r0, r8
 80083e6:	f000 f845 	bl	8008474 <_wcrtomb_r>
 80083ea:	1c41      	adds	r1, r0, #1
 80083ec:	4604      	mov	r4, r0
 80083ee:	d1de      	bne.n	80083ae <__fputwc+0x1e>
 80083f0:	89ab      	ldrh	r3, [r5, #12]
 80083f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f6:	81ab      	strh	r3, [r5, #12]
 80083f8:	4606      	mov	r6, r0
 80083fa:	4630      	mov	r0, r6
 80083fc:	b003      	add	sp, #12
 80083fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008402:	462a      	mov	r2, r5
 8008404:	4640      	mov	r0, r8
 8008406:	f000 f8af 	bl	8008568 <__swbuf_r>
 800840a:	1c42      	adds	r2, r0, #1
 800840c:	d1e4      	bne.n	80083d8 <__fputwc+0x48>
 800840e:	4606      	mov	r6, r0
 8008410:	e7f3      	b.n	80083fa <__fputwc+0x6a>

08008412 <_fputwc_r>:
 8008412:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008416:	4614      	mov	r4, r2
 8008418:	07da      	lsls	r2, r3, #31
 800841a:	4605      	mov	r5, r0
 800841c:	d407      	bmi.n	800842e <_fputwc_r+0x1c>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	059b      	lsls	r3, r3, #22
 8008422:	d404      	bmi.n	800842e <_fputwc_r+0x1c>
 8008424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008426:	9101      	str	r1, [sp, #4]
 8008428:	f7fb fd82 	bl	8003f30 <__retarget_lock_acquire_recursive>
 800842c:	9901      	ldr	r1, [sp, #4]
 800842e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008432:	0498      	lsls	r0, r3, #18
 8008434:	d406      	bmi.n	8008444 <_fputwc_r+0x32>
 8008436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008442:	6663      	str	r3, [r4, #100]	; 0x64
 8008444:	4622      	mov	r2, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f7ff ffa2 	bl	8008390 <__fputwc>
 800844c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	4605      	mov	r5, r0
 8008452:	d405      	bmi.n	8008460 <_fputwc_r+0x4e>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	059b      	lsls	r3, r3, #22
 8008458:	d402      	bmi.n	8008460 <_fputwc_r+0x4e>
 800845a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845c:	f7fb fd69 	bl	8003f32 <__retarget_lock_release_recursive>
 8008460:	4628      	mov	r0, r5
 8008462:	b003      	add	sp, #12
 8008464:	bd30      	pop	{r4, r5, pc}

08008466 <abort>:
 8008466:	b508      	push	{r3, lr}
 8008468:	2006      	movs	r0, #6
 800846a:	f000 f8ef 	bl	800864c <raise>
 800846e:	2001      	movs	r0, #1
 8008470:	f7f9 fd6e 	bl	8001f50 <_exit>

08008474 <_wcrtomb_r>:
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	4c09      	ldr	r4, [pc, #36]	; (800849c <_wcrtomb_r+0x28>)
 8008478:	b085      	sub	sp, #20
 800847a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800847e:	4605      	mov	r5, r0
 8008480:	461e      	mov	r6, r3
 8008482:	b909      	cbnz	r1, 8008488 <_wcrtomb_r+0x14>
 8008484:	460a      	mov	r2, r1
 8008486:	a901      	add	r1, sp, #4
 8008488:	47b8      	blx	r7
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	bf01      	itttt	eq
 800848e:	2300      	moveq	r3, #0
 8008490:	6033      	streq	r3, [r6, #0]
 8008492:	238a      	moveq	r3, #138	; 0x8a
 8008494:	602b      	streq	r3, [r5, #0]
 8008496:	b005      	add	sp, #20
 8008498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849a:	bf00      	nop
 800849c:	20000558 	.word	0x20000558

080084a0 <__swhatbuf_r>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a8:	2900      	cmp	r1, #0
 80084aa:	b096      	sub	sp, #88	; 0x58
 80084ac:	4615      	mov	r5, r2
 80084ae:	461e      	mov	r6, r3
 80084b0:	da07      	bge.n	80084c2 <__swhatbuf_r+0x22>
 80084b2:	89a1      	ldrh	r1, [r4, #12]
 80084b4:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 80084b8:	d017      	beq.n	80084ea <__swhatbuf_r+0x4a>
 80084ba:	2100      	movs	r1, #0
 80084bc:	2340      	movs	r3, #64	; 0x40
 80084be:	4608      	mov	r0, r1
 80084c0:	e00f      	b.n	80084e2 <__swhatbuf_r+0x42>
 80084c2:	466a      	mov	r2, sp
 80084c4:	f000 f8ca 	bl	800865c <_fstat_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	dbf2      	blt.n	80084b2 <__swhatbuf_r+0x12>
 80084cc:	9901      	ldr	r1, [sp, #4]
 80084ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084d6:	4259      	negs	r1, r3
 80084d8:	4159      	adcs	r1, r3
 80084da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80084de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e2:	6031      	str	r1, [r6, #0]
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	b016      	add	sp, #88	; 0x58
 80084e8:	bd70      	pop	{r4, r5, r6, pc}
 80084ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ee:	e7e6      	b.n	80084be <__swhatbuf_r+0x1e>

080084f0 <__smakebuf_r>:
 80084f0:	898b      	ldrh	r3, [r1, #12]
 80084f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084f4:	079d      	lsls	r5, r3, #30
 80084f6:	4606      	mov	r6, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	d507      	bpl.n	800850c <__smakebuf_r+0x1c>
 80084fc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	2301      	movs	r3, #1
 8008506:	6163      	str	r3, [r4, #20]
 8008508:	b002      	add	sp, #8
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	ab01      	add	r3, sp, #4
 800850e:	466a      	mov	r2, sp
 8008510:	f7ff ffc6 	bl	80084a0 <__swhatbuf_r>
 8008514:	9900      	ldr	r1, [sp, #0]
 8008516:	4605      	mov	r5, r0
 8008518:	4630      	mov	r0, r6
 800851a:	f7fb fe2f 	bl	800417c <_malloc_r>
 800851e:	b948      	cbnz	r0, 8008534 <__smakebuf_r+0x44>
 8008520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008524:	059a      	lsls	r2, r3, #22
 8008526:	d4ef      	bmi.n	8008508 <__smakebuf_r+0x18>
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	f043 0302 	orr.w	r3, r3, #2
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	e7e3      	b.n	80084fc <__smakebuf_r+0xc>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	6163      	str	r3, [r4, #20]
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	6120      	str	r0, [r4, #16]
 8008546:	b15b      	cbz	r3, 8008560 <__smakebuf_r+0x70>
 8008548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f897 	bl	8008680 <_isatty_r>
 8008552:	b128      	cbz	r0, 8008560 <__smakebuf_r+0x70>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	431d      	orrs	r5, r3
 8008564:	81a5      	strh	r5, [r4, #12]
 8008566:	e7cf      	b.n	8008508 <__smakebuf_r+0x18>

08008568 <__swbuf_r>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	460e      	mov	r6, r1
 800856c:	4614      	mov	r4, r2
 800856e:	4605      	mov	r5, r0
 8008570:	b118      	cbz	r0, 800857a <__swbuf_r+0x12>
 8008572:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008574:	b90b      	cbnz	r3, 800857a <__swbuf_r+0x12>
 8008576:	f7fb fbb3 	bl	8003ce0 <__sinit>
 800857a:	69a3      	ldr	r3, [r4, #24]
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	0719      	lsls	r1, r3, #28
 8008582:	d529      	bpl.n	80085d8 <__swbuf_r+0x70>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	b33b      	cbz	r3, 80085d8 <__swbuf_r+0x70>
 8008588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858c:	b2f6      	uxtb	r6, r6
 800858e:	049a      	lsls	r2, r3, #18
 8008590:	4637      	mov	r7, r6
 8008592:	d52a      	bpl.n	80085ea <__swbuf_r+0x82>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	6922      	ldr	r2, [r4, #16]
 8008598:	1a98      	subs	r0, r3, r2
 800859a:	6963      	ldr	r3, [r4, #20]
 800859c:	4283      	cmp	r3, r0
 800859e:	dc04      	bgt.n	80085aa <__swbuf_r+0x42>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4628      	mov	r0, r5
 80085a4:	f7fd fb04 	bl	8005bb0 <_fflush_r>
 80085a8:	b9e0      	cbnz	r0, 80085e4 <__swbuf_r+0x7c>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	701e      	strb	r6, [r3, #0]
 80085b8:	6962      	ldr	r2, [r4, #20]
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	429a      	cmp	r2, r3
 80085be:	d004      	beq.n	80085ca <__swbuf_r+0x62>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d506      	bpl.n	80085d4 <__swbuf_r+0x6c>
 80085c6:	2e0a      	cmp	r6, #10
 80085c8:	d104      	bne.n	80085d4 <__swbuf_r+0x6c>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4628      	mov	r0, r5
 80085ce:	f7fd faef 	bl	8005bb0 <_fflush_r>
 80085d2:	b938      	cbnz	r0, 80085e4 <__swbuf_r+0x7c>
 80085d4:	4638      	mov	r0, r7
 80085d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f7ff fe80 	bl	80082e0 <__swsetup_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d0d1      	beq.n	8008588 <__swbuf_r+0x20>
 80085e4:	f04f 37ff 	mov.w	r7, #4294967295
 80085e8:	e7f4      	b.n	80085d4 <__swbuf_r+0x6c>
 80085ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f6:	6663      	str	r3, [r4, #100]	; 0x64
 80085f8:	e7cc      	b.n	8008594 <__swbuf_r+0x2c>

080085fa <_raise_r>:
 80085fa:	291f      	cmp	r1, #31
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	d904      	bls.n	800860e <_raise_r+0x14>
 8008604:	2316      	movs	r3, #22
 8008606:	6003      	str	r3, [r0, #0]
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8008612:	b112      	cbz	r2, 800861a <_raise_r+0x20>
 8008614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008618:	b94b      	cbnz	r3, 800862e <_raise_r+0x34>
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f852 	bl	80086c4 <_getpid_r>
 8008620:	462a      	mov	r2, r5
 8008622:	4601      	mov	r1, r0
 8008624:	4620      	mov	r0, r4
 8008626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862a:	f000 b839 	b.w	80086a0 <_kill_r>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d00a      	beq.n	8008648 <_raise_r+0x4e>
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	d103      	bne.n	800863e <_raise_r+0x44>
 8008636:	2316      	movs	r3, #22
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	2001      	movs	r0, #1
 800863c:	e7e6      	b.n	800860c <_raise_r+0x12>
 800863e:	2400      	movs	r4, #0
 8008640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008644:	4628      	mov	r0, r5
 8008646:	4798      	blx	r3
 8008648:	2000      	movs	r0, #0
 800864a:	e7df      	b.n	800860c <_raise_r+0x12>

0800864c <raise>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <raise+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f7ff bfd2 	b.w	80085fa <_raise_r>
 8008656:	bf00      	nop
 8008658:	20000140 	.word	0x20000140

0800865c <_fstat_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	; (800867c <_fstat_r+0x20>)
 8008660:	2300      	movs	r3, #0
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	f7f9 fcc0 	bl	8001fee <_fstat>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	d102      	bne.n	8008678 <_fstat_r+0x1c>
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	b103      	cbz	r3, 8008678 <_fstat_r+0x1c>
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	bd38      	pop	{r3, r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	20000ac8 	.word	0x20000ac8

08008680 <_isatty_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	; (800869c <_isatty_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f9 fcbf 	bl	800200e <_isatty>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_isatty_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_isatty_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000ac8 	.word	0x20000ac8

080086a0 <_kill_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	; (80086c0 <_kill_r+0x20>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	f7f9 fc3f 	bl	8001f30 <_kill>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d102      	bne.n	80086bc <_kill_r+0x1c>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	b103      	cbz	r3, 80086bc <_kill_r+0x1c>
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20000ac8 	.word	0x20000ac8

080086c4 <_getpid_r>:
 80086c4:	f7f9 bc2c 	b.w	8001f20 <_getpid>

080086c8 <_init>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr

080086d4 <_fini>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr
